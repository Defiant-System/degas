/**
 * @license
 * Copyright 2010-2022 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
const REVISION="138";const MOUSE={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2};const TOUCH={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3};const CullFaceNone=0;const CullFaceBack=1;const CullFaceFront=2;const CullFaceFrontBack=3;const BasicShadowMap=0;const PCFShadowMap=1;const PCFSoftShadowMap=2;const VSMShadowMap=3;const FrontSide=0;const BackSide=1;const DoubleSide$1=2;const FlatShading=1;const SmoothShading=2;const NoBlending=0;const NormalBlending=1;const AdditiveBlending=2;const SubtractiveBlending=3;const MultiplyBlending=4;const CustomBlending=5;const AddEquation=100;const SubtractEquation=101;const ReverseSubtractEquation=102;const MinEquation=103;const MaxEquation=104;const ZeroFactor=200;const OneFactor=201;const SrcColorFactor=202;const OneMinusSrcColorFactor=203;const SrcAlphaFactor=204;const OneMinusSrcAlphaFactor=205;const DstAlphaFactor=206;const OneMinusDstAlphaFactor=207;const DstColorFactor=208;const OneMinusDstColorFactor=209;const SrcAlphaSaturateFactor=210;const NeverDepth=0;const AlwaysDepth=1;const LessDepth=2;const LessEqualDepth=3;const EqualDepth=4;const GreaterEqualDepth=5;const GreaterDepth=6;const NotEqualDepth=7;const MultiplyOperation=0;const MixOperation=1;const AddOperation=2;const NoToneMapping=0;const LinearToneMapping=1;const ReinhardToneMapping=2;const CineonToneMapping=3;const ACESFilmicToneMapping=4;const CustomToneMapping=5;const UVMapping=300;const CubeReflectionMapping=301;const CubeRefractionMapping=302;const EquirectangularReflectionMapping=303;const EquirectangularRefractionMapping=304;const CubeUVReflectionMapping=306;const CubeUVRefractionMapping=307;const RepeatWrapping=1e3;const ClampToEdgeWrapping=1001;const MirroredRepeatWrapping=1002;const NearestFilter=1003;const NearestMipmapNearestFilter=1004;const NearestMipMapNearestFilter=1004;const NearestMipmapLinearFilter=1005;const NearestMipMapLinearFilter=1005;const LinearFilter=1006;const LinearMipmapNearestFilter=1007;const LinearMipMapNearestFilter=1007;const LinearMipmapLinearFilter=1008;const LinearMipMapLinearFilter=1008;const UnsignedByteType=1009;const ByteType=1010;const ShortType=1011;const UnsignedShortType=1012;const IntType=1013;const UnsignedIntType=1014;const FloatType=1015;const HalfFloatType=1016;const UnsignedShort4444Type=1017;const UnsignedShort5551Type=1018;const UnsignedInt248Type=1020;const AlphaFormat=1021;const RGBFormat=1022;const RGBAFormat=1023;const LuminanceFormat=1024;const LuminanceAlphaFormat=1025;const DepthFormat=1026;const DepthStencilFormat=1027;const RedFormat=1028;const RedIntegerFormat=1029;const RGFormat=1030;const RGIntegerFormat=1031;const RGBAIntegerFormat=1033;const RGB_S3TC_DXT1_Format=33776;const RGBA_S3TC_DXT1_Format=33777;const RGBA_S3TC_DXT3_Format=33778;const RGBA_S3TC_DXT5_Format=33779;const RGB_PVRTC_4BPPV1_Format=35840;const RGB_PVRTC_2BPPV1_Format=35841;const RGBA_PVRTC_4BPPV1_Format=35842;const RGBA_PVRTC_2BPPV1_Format=35843;const RGB_ETC1_Format=36196;const RGB_ETC2_Format=37492;const RGBA_ETC2_EAC_Format=37496;const RGBA_ASTC_4x4_Format=37808;const RGBA_ASTC_5x4_Format=37809;const RGBA_ASTC_5x5_Format=37810;const RGBA_ASTC_6x5_Format=37811;const RGBA_ASTC_6x6_Format=37812;const RGBA_ASTC_8x5_Format=37813;const RGBA_ASTC_8x6_Format=37814;const RGBA_ASTC_8x8_Format=37815;const RGBA_ASTC_10x5_Format=37816;const RGBA_ASTC_10x6_Format=37817;const RGBA_ASTC_10x8_Format=37818;const RGBA_ASTC_10x10_Format=37819;const RGBA_ASTC_12x10_Format=37820;const RGBA_ASTC_12x12_Format=37821;const RGBA_BPTC_Format=36492;const LoopOnce=2200;const LoopRepeat=2201;const LoopPingPong=2202;const InterpolateDiscrete=2300;const InterpolateLinear=2301;const InterpolateSmooth=2302;const ZeroCurvatureEnding=2400;const ZeroSlopeEnding=2401;const WrapAroundEnding=2402;const NormalAnimationBlendMode=2500;const AdditiveAnimationBlendMode=2501;const TrianglesDrawMode=0;const TriangleStripDrawMode=1;const TriangleFanDrawMode=2;const LinearEncoding=3e3;const sRGBEncoding=3001;const BasicDepthPacking=3200;const RGBADepthPacking=3201;const TangentSpaceNormalMap=0;const ObjectSpaceNormalMap=1;const ZeroStencilOp=0;const KeepStencilOp=7680;const ReplaceStencilOp=7681;const IncrementStencilOp=7682;const DecrementStencilOp=7683;const IncrementWrapStencilOp=34055;const DecrementWrapStencilOp=34056;const InvertStencilOp=5386;const NeverStencilFunc=512;const LessStencilFunc=513;const EqualStencilFunc=514;const LessEqualStencilFunc=515;const GreaterStencilFunc=516;const NotEqualStencilFunc=517;const GreaterEqualStencilFunc=518;const AlwaysStencilFunc=519;const StaticDrawUsage=35044;const DynamicDrawUsage=35048;const StreamDrawUsage=35040;const StaticReadUsage=35045;const DynamicReadUsage=35049;const StreamReadUsage=35041;const StaticCopyUsage=35046;const DynamicCopyUsage=35050;const StreamCopyUsage=35042;const GLSL1="100";const GLSL3="300 es";const _SRGBAFormat=1035;class EventDispatcher{addEventListener(t,e){if(this._listeners===undefined)this._listeners={};const n=this._listeners;if(n[t]===undefined){n[t]=[]}if(n[t].indexOf(e)===-1){n[t].push(e)}}hasEventListener(t,e){if(this._listeners===undefined)return false;const n=this._listeners;return n[t]!==undefined&&n[t].indexOf(e)!==-1}removeEventListener(t,e){if(this._listeners===undefined)return;const n=this._listeners;const i=n[t];if(i!==undefined){const t=i.indexOf(e);if(t!==-1){i.splice(t,1)}}}dispatchEvent(t){if(this._listeners===undefined)return;const e=this._listeners;const n=e[t.type];if(n!==undefined){t.target=this;const e=n.slice(0);for(let n=0,i=e.length;n<i;n++){e[n].call(this,t)}t.target=null}}}const _lut=[];for(let t=0;t<256;t++){_lut[t]=(t<16?"0":"")+t.toString(16)}let _seed=1234567;const DEG2RAD=Math.PI/180;const RAD2DEG=180/Math.PI;function generateUUID(){const t=Math.random()*4294967295|0;const e=Math.random()*4294967295|0;const n=Math.random()*4294967295|0;const i=Math.random()*4294967295|0;const r=_lut[t&255]+_lut[t>>8&255]+_lut[t>>16&255]+_lut[t>>24&255]+"-"+_lut[e&255]+_lut[e>>8&255]+"-"+_lut[e>>16&15|64]+_lut[e>>24&255]+"-"+_lut[n&63|128]+_lut[n>>8&255]+"-"+_lut[n>>16&255]+_lut[n>>24&255]+_lut[i&255]+_lut[i>>8&255]+_lut[i>>16&255]+_lut[i>>24&255];return r.toUpperCase()}function clamp(t,e,n){return Math.max(e,Math.min(n,t))}function euclideanModulo(t,e){return(t%e+e)%e}function mapLinear(t,e,n,i,r){return i+(t-e)*(r-i)/(n-e)}function inverseLerp(t,e,n){if(t!==e){return(n-t)/(e-t)}else{return 0}}function lerp(t,e,n){return(1-n)*t+n*e}function damp(t,e,n,i){return lerp(t,e,1-Math.exp(-n*i))}function pingpong(t,e=1){return e-Math.abs(euclideanModulo(t,e*2)-e)}function smoothstep(t,e,n){if(t<=e)return 0;if(t>=n)return 1;t=(t-e)/(n-e);return t*t*(3-2*t)}function smootherstep(t,e,n){if(t<=e)return 0;if(t>=n)return 1;t=(t-e)/(n-e);return t*t*t*(t*(t*6-15)+10)}function randInt(t,e){return t+Math.floor(Math.random()*(e-t+1))}function randFloat(t,e){return t+Math.random()*(e-t)}function randFloatSpread(t){return t*(.5-Math.random())}function seededRandom(t){if(t!==undefined)_seed=t%2147483647;_seed=_seed*16807%2147483647;return(_seed-1)/2147483646}function degToRad(t){return t*DEG2RAD}function radToDeg(t){return t*RAD2DEG}function isPowerOfTwo(t){return(t&t-1)===0&&t!==0}function ceilPowerOfTwo(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))}function floorPowerOfTwo(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))}function setQuaternionFromProperEuler(t,e,n,i,r){const a=Math.cos;const s=Math.sin;const o=a(n/2);const l=s(n/2);const c=a((e+i)/2);const u=s((e+i)/2);const h=a((e-i)/2);const d=s((e-i)/2);const f=a((i-e)/2);const p=s((i-e)/2);switch(r){case"XYX":t.set(o*u,l*h,l*d,o*c);break;case"YZY":t.set(l*d,o*u,l*h,o*c);break;case"ZXZ":t.set(l*h,l*d,o*u,o*c);break;case"XZX":t.set(o*u,l*p,l*f,o*c);break;case"YXY":t.set(l*f,o*u,l*p,o*c);break;case"ZYZ":t.set(l*p,l*f,o*u,o*c);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+r)}}var MathUtils=Object.freeze({__proto__:null,DEG2RAD:DEG2RAD,RAD2DEG:RAD2DEG,generateUUID:generateUUID,clamp:clamp,euclideanModulo:euclideanModulo,mapLinear:mapLinear,inverseLerp:inverseLerp,lerp:lerp,damp:damp,pingpong:pingpong,smoothstep:smoothstep,smootherstep:smootherstep,randInt:randInt,randFloat:randFloat,randFloatSpread:randFloatSpread,seededRandom:seededRandom,degToRad:degToRad,radToDeg:radToDeg,isPowerOfTwo:isPowerOfTwo,ceilPowerOfTwo:ceilPowerOfTwo,floorPowerOfTwo:floorPowerOfTwo,setQuaternionFromProperEuler:setQuaternionFromProperEuler});class Vector2{constructor(t=0,e=0){this.x=t;this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){this.x=t;this.y=e;return this}setScalar(t){this.x=t;this.y=t;return this}setX(t){this.x=t;return this}setY(t){this.y=t;return this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){this.x=t.x;this.y=t.y;return this}add(t,e){if(e!==undefined){console.warn("THREE.Vector2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");return this.addVectors(t,e)}this.x+=t.x;this.y+=t.y;return this}addScalar(t){this.x+=t;this.y+=t;return this}addVectors(t,e){this.x=t.x+e.x;this.y=t.y+e.y;return this}addScaledVector(t,e){this.x+=t.x*e;this.y+=t.y*e;return this}sub(t,e){if(e!==undefined){console.warn("THREE.Vector2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");return this.subVectors(t,e)}this.x-=t.x;this.y-=t.y;return this}subScalar(t){this.x-=t;this.y-=t;return this}subVectors(t,e){this.x=t.x-e.x;this.y=t.y-e.y;return this}multiply(t){this.x*=t.x;this.y*=t.y;return this}multiplyScalar(t){this.x*=t;this.y*=t;return this}divide(t){this.x/=t.x;this.y/=t.y;return this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y;const i=t.elements;this.x=i[0]*e+i[3]*n+i[6];this.y=i[1]*e+i[4]*n+i[7];return this}min(t){this.x=Math.min(this.x,t.x);this.y=Math.min(this.y,t.y);return this}max(t){this.x=Math.max(this.x,t.x);this.y=Math.max(this.y,t.y);return this}clamp(t,e){this.x=Math.max(t.x,Math.min(e.x,this.x));this.y=Math.max(t.y,Math.min(e.y,this.y));return this}clampScalar(t,e){this.x=Math.max(t,Math.min(e,this.x));this.y=Math.max(t,Math.min(e,this.y));return this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);return this}roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);return this}negate(){this.x=-this.x;this.y=-this.y;return this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){const t=Math.atan2(-this.y,-this.x)+Math.PI;return t}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){this.x+=(t.x-this.x)*e;this.y+=(t.y-this.y)*e;return this}lerpVectors(t,e,n){this.x=t.x+(e.x-t.x)*n;this.y=t.y+(e.y-t.y)*n;return this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){this.x=t[e];this.y=t[e+1];return this}toArray(t=[],e=0){t[e]=this.x;t[e+1]=this.y;return t}fromBufferAttribute(t,e,n){if(n!==undefined){console.warn("THREE.Vector2: offset has been removed from .fromBufferAttribute().")}this.x=t.getX(e);this.y=t.getY(e);return this}rotateAround(t,e){const n=Math.cos(e),i=Math.sin(e);const r=this.x-t.x;const a=this.y-t.y;this.x=r*n-a*i+t.x;this.y=r*i+a*n+t.y;return this}random(){this.x=Math.random();this.y=Math.random();return this}*[Symbol.iterator](){yield this.x;yield this.y}}Vector2.prototype.isVector2=true;class Matrix3{constructor(){this.elements=[1,0,0,0,1,0,0,0,1];if(arguments.length>0){console.error("THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.")}}set(t,e,n,i,r,a,s,o,l){const c=this.elements;c[0]=t;c[1]=i;c[2]=s;c[3]=e;c[4]=r;c[5]=o;c[6]=n;c[7]=a;c[8]=l;return this}identity(){this.set(1,0,0,0,1,0,0,0,1);return this}copy(t){const e=this.elements;const n=t.elements;e[0]=n[0];e[1]=n[1];e[2]=n[2];e[3]=n[3];e[4]=n[4];e[5]=n[5];e[6]=n[6];e[7]=n[7];e[8]=n[8];return this}extractBasis(t,e,n){t.setFromMatrix3Column(this,0);e.setFromMatrix3Column(this,1);n.setFromMatrix3Column(this,2);return this}setFromMatrix4(t){const e=t.elements;this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]);return this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements;const i=e.elements;const r=this.elements;const a=n[0],s=n[3],o=n[6];const l=n[1],c=n[4],u=n[7];const h=n[2],d=n[5],f=n[8];const p=i[0],m=i[3],g=i[6];const _=i[1],y=i[4],x=i[7];const v=i[2],b=i[5],M=i[8];r[0]=a*p+s*_+o*v;r[3]=a*m+s*y+o*b;r[6]=a*g+s*x+o*M;r[1]=l*p+c*_+u*v;r[4]=l*m+c*y+u*b;r[7]=l*g+c*x+u*M;r[2]=h*p+d*_+f*v;r[5]=h*m+d*y+f*b;r[8]=h*g+d*x+f*M;return this}multiplyScalar(t){const e=this.elements;e[0]*=t;e[3]*=t;e[6]*=t;e[1]*=t;e[4]*=t;e[7]*=t;e[2]*=t;e[5]*=t;e[8]*=t;return this}determinant(){const t=this.elements;const e=t[0],n=t[1],i=t[2],r=t[3],a=t[4],s=t[5],o=t[6],l=t[7],c=t[8];return e*a*c-e*s*l-n*r*c+n*s*o+i*r*l-i*a*o}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],a=t[4],s=t[5],o=t[6],l=t[7],c=t[8],u=c*a-s*l,h=s*o-c*r,d=l*r-a*o,f=e*u+n*h+i*d;if(f===0)return this.set(0,0,0,0,0,0,0,0,0);const p=1/f;t[0]=u*p;t[1]=(i*l-c*n)*p;t[2]=(s*n-i*a)*p;t[3]=h*p;t[4]=(c*e-i*o)*p;t[5]=(i*r-s*e)*p;t[6]=d*p;t[7]=(n*o-l*e)*p;t[8]=(a*e-n*r)*p;return this}transpose(){let t;const e=this.elements;t=e[1];e[1]=e[3];e[3]=t;t=e[2];e[2]=e[6];e[6]=t;t=e[5];e[5]=e[7];e[7]=t;return this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;t[0]=e[0];t[1]=e[3];t[2]=e[6];t[3]=e[1];t[4]=e[4];t[5]=e[7];t[6]=e[2];t[7]=e[5];t[8]=e[8];return this}setUvTransform(t,e,n,i,r,a,s){const o=Math.cos(r);const l=Math.sin(r);this.set(n*o,n*l,-n*(o*a+l*s)+a+t,-i*l,i*o,-i*(-l*a+o*s)+s+e,0,0,1);return this}scale(t,e){const n=this.elements;n[0]*=t;n[3]*=t;n[6]*=t;n[1]*=e;n[4]*=e;n[7]*=e;return this}rotate(t){const e=Math.cos(t);const n=Math.sin(t);const i=this.elements;const r=i[0],a=i[3],s=i[6];const o=i[1],l=i[4],c=i[7];i[0]=e*r+n*o;i[3]=e*a+n*l;i[6]=e*s+n*c;i[1]=-n*r+e*o;i[4]=-n*a+e*l;i[7]=-n*s+e*c;return this}translate(t,e){const n=this.elements;n[0]+=t*n[2];n[3]+=t*n[5];n[6]+=t*n[8];n[1]+=e*n[2];n[4]+=e*n[5];n[7]+=e*n[8];return this}equals(t){const e=this.elements;const n=t.elements;for(let t=0;t<9;t++){if(e[t]!==n[t])return false}return true}fromArray(t,e=0){for(let n=0;n<9;n++){this.elements[n]=t[n+e]}return this}toArray(t=[],e=0){const n=this.elements;t[e]=n[0];t[e+1]=n[1];t[e+2]=n[2];t[e+3]=n[3];t[e+4]=n[4];t[e+5]=n[5];t[e+6]=n[6];t[e+7]=n[7];t[e+8]=n[8];return t}clone(){return(new this.constructor).fromArray(this.elements)}}Matrix3.prototype.isMatrix3=true;function arrayNeedsUint32(t){for(let e=t.length-1;e>=0;--e){if(t[e]>65535)return true}return false}const TYPED_ARRAYS={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:Uint8ClampedArray,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function getTypedArray(t,e){return new TYPED_ARRAYS[t](e)}function createElementNS(t){return document.createElementNS("http://www.w3.org/1999/xhtml",t)}const _colorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};const _hslA={h:0,s:0,l:0};const _hslB={h:0,s:0,l:0};function hue2rgb(t,e,n){if(n<0)n+=1;if(n>1)n-=1;if(n<1/6)return t+(e-t)*6*n;if(n<1/2)return e;if(n<2/3)return t+(e-t)*6*(2/3-n);return t}function SRGBToLinear(t){return t<.04045?t*.0773993808:Math.pow(t*.9478672986+.0521327014,2.4)}function LinearToSRGB(t){return t<.0031308?t*12.92:1.055*Math.pow(t,.41666)-.055}class Color$1{constructor(t,e,n){if(e===undefined&&n===undefined){return this.set(t)}return this.setRGB(t,e,n)}set(t){if(t&&t.isColor){this.copy(t)}else if(typeof t==="number"){this.setHex(t)}else if(typeof t==="string"){this.setStyle(t)}return this}setScalar(t){this.r=t;this.g=t;this.b=t;return this}setHex(t){t=Math.floor(t);this.r=(t>>16&255)/255;this.g=(t>>8&255)/255;this.b=(t&255)/255;return this}setRGB(t,e,n){this.r=t;this.g=e;this.b=n;return this}setHSL(t,e,n){t=euclideanModulo(t,1);e=clamp(e,0,1);n=clamp(n,0,1);if(e===0){this.r=this.g=this.b=n}else{const i=n<=.5?n*(1+e):n+e-n*e;const r=2*n-i;this.r=hue2rgb(r,i,t+1/3);this.g=hue2rgb(r,i,t);this.b=hue2rgb(r,i,t-1/3)}return this}setStyle(t){function e(e){if(e===undefined)return;if(parseFloat(e)<1){console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}}let n;if(n=/^((?:rgb|hsl)a?)\(([^\)]*)\)/.exec(t)){let t;const i=n[1];const r=n[2];switch(i){case"rgb":case"rgba":if(t=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r)){this.r=Math.min(255,parseInt(t[1],10))/255;this.g=Math.min(255,parseInt(t[2],10))/255;this.b=Math.min(255,parseInt(t[3],10))/255;e(t[4]);return this}if(t=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r)){this.r=Math.min(100,parseInt(t[1],10))/100;this.g=Math.min(100,parseInt(t[2],10))/100;this.b=Math.min(100,parseInt(t[3],10))/100;e(t[4]);return this}break;case"hsl":case"hsla":if(t=/^\s*(\d*\.?\d+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(r)){const n=parseFloat(t[1])/360;const i=parseInt(t[2],10)/100;const r=parseInt(t[3],10)/100;e(t[4]);return this.setHSL(n,i,r)}break}}else if(n=/^\#([A-Fa-f\d]+)$/.exec(t)){const t=n[1];const e=t.length;if(e===3){this.r=parseInt(t.charAt(0)+t.charAt(0),16)/255;this.g=parseInt(t.charAt(1)+t.charAt(1),16)/255;this.b=parseInt(t.charAt(2)+t.charAt(2),16)/255;return this}else if(e===6){this.r=parseInt(t.charAt(0)+t.charAt(1),16)/255;this.g=parseInt(t.charAt(2)+t.charAt(3),16)/255;this.b=parseInt(t.charAt(4)+t.charAt(5),16)/255;return this}}if(t&&t.length>0){return this.setColorName(t)}return this}setColorName(t){const e=_colorKeywords[t.toLowerCase()];if(e!==undefined){this.setHex(e)}else{console.warn("THREE.Color: Unknown color "+t)}return this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){this.r=t.r;this.g=t.g;this.b=t.b;return this}copySRGBToLinear(t){this.r=SRGBToLinear(t.r);this.g=SRGBToLinear(t.g);this.b=SRGBToLinear(t.b);return this}copyLinearToSRGB(t){this.r=LinearToSRGB(t.r);this.g=LinearToSRGB(t.g);this.b=LinearToSRGB(t.b);return this}convertSRGBToLinear(){this.copySRGBToLinear(this);return this}convertLinearToSRGB(){this.copyLinearToSRGB(this);return this}getHex(){return this.r*255<<16^this.g*255<<8^this.b*255<<0}getHexString(){return("000000"+this.getHex().toString(16)).slice(-6)}getHSL(t){const e=this.r,n=this.g,i=this.b;const r=Math.max(e,n,i);const a=Math.min(e,n,i);let s,o;const l=(a+r)/2;if(a===r){s=0;o=0}else{const t=r-a;o=l<=.5?t/(r+a):t/(2-r-a);switch(r){case e:s=(n-i)/t+(n<i?6:0);break;case n:s=(i-e)/t+2;break;case i:s=(e-n)/t+4;break}s/=6}t.h=s;t.s=o;t.l=l;return t}getStyle(){return"rgb("+(this.r*255|0)+","+(this.g*255|0)+","+(this.b*255|0)+")"}offsetHSL(t,e,n){this.getHSL(_hslA);_hslA.h+=t;_hslA.s+=e;_hslA.l+=n;this.setHSL(_hslA.h,_hslA.s,_hslA.l);return this}add(t){this.r+=t.r;this.g+=t.g;this.b+=t.b;return this}addColors(t,e){this.r=t.r+e.r;this.g=t.g+e.g;this.b=t.b+e.b;return this}addScalar(t){this.r+=t;this.g+=t;this.b+=t;return this}sub(t){this.r=Math.max(0,this.r-t.r);this.g=Math.max(0,this.g-t.g);this.b=Math.max(0,this.b-t.b);return this}multiply(t){this.r*=t.r;this.g*=t.g;this.b*=t.b;return this}multiplyScalar(t){this.r*=t;this.g*=t;this.b*=t;return this}lerp(t,e){this.r+=(t.r-this.r)*e;this.g+=(t.g-this.g)*e;this.b+=(t.b-this.b)*e;return this}lerpColors(t,e,n){this.r=t.r+(e.r-t.r)*n;this.g=t.g+(e.g-t.g)*n;this.b=t.b+(e.b-t.b)*n;return this}lerpHSL(t,e){this.getHSL(_hslA);t.getHSL(_hslB);const n=lerp(_hslA.h,_hslB.h,e);const i=lerp(_hslA.s,_hslB.s,e);const r=lerp(_hslA.l,_hslB.l,e);this.setHSL(n,i,r);return this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){this.r=t[e];this.g=t[e+1];this.b=t[e+2];return this}toArray(t=[],e=0){t[e]=this.r;t[e+1]=this.g;t[e+2]=this.b;return t}fromBufferAttribute(t,e){this.r=t.getX(e);this.g=t.getY(e);this.b=t.getZ(e);if(t.normalized===true){this.r/=255;this.g/=255;this.b/=255}return this}toJSON(){return this.getHex()}}Color$1.NAMES=_colorKeywords;Color$1.prototype.isColor=true;Color$1.prototype.r=1;Color$1.prototype.g=1;Color$1.prototype.b=1;let _canvas;class ImageUtils{static getDataURL(t){if(/^data:/i.test(t.src)){return t.src}if(typeof HTMLCanvasElement=="undefined"){return t.src}let e;if(t instanceof HTMLCanvasElement){e=t}else{if(_canvas===undefined)_canvas=createElementNS("canvas");_canvas.width=t.width;_canvas.height=t.height;const n=_canvas.getContext("2d");if(t instanceof ImageData){n.putImageData(t,0,0)}else{n.drawImage(t,0,0,t.width,t.height)}e=_canvas}if(e.width>2048||e.height>2048){console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t);return e.toDataURL("image/jpeg",.6)}else{return e.toDataURL("image/png")}}static sRGBToLinear(t){if(typeof HTMLImageElement!=="undefined"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&t instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&t instanceof ImageBitmap){const e=createElementNS("canvas");e.width=t.width;e.height=t.height;const n=e.getContext("2d");n.drawImage(t,0,0,t.width,t.height);const i=n.getImageData(0,0,t.width,t.height);const r=i.data;for(let t=0;t<r.length;t++){r[t]=SRGBToLinear(r[t]/255)*255}n.putImageData(i,0,0);return e}else if(t.data){const e=t.data.slice(0);for(let t=0;t<e.length;t++){if(e instanceof Uint8Array||e instanceof Uint8ClampedArray){e[t]=Math.floor(SRGBToLinear(e[t]/255)*255)}else{e[t]=SRGBToLinear(e[t])}}return{data:e,width:t.width,height:t.height}}else{console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.");return t}}}class Source{constructor(t=null){this.uuid=generateUUID();this.data=t;this.version=0}set needsUpdate(t){if(t===true)this.version++}toJSON(t){const e=t===undefined||typeof t==="string";if(!e&&t.images[this.uuid]!==undefined){return t.images[this.uuid]}const n={uuid:this.uuid,url:""};const i=this.data;if(i!==null){let t;if(Array.isArray(i)){t=[];for(let e=0,n=i.length;e<n;e++){if(i[e].isDataTexture){t.push(serializeImage(i[e].image))}else{t.push(serializeImage(i[e]))}}}else{t=serializeImage(i)}n.url=t}if(!e){t.images[this.uuid]=n}return n}}function serializeImage(t){if(typeof HTMLImageElement!=="undefined"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&t instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&t instanceof ImageBitmap){return ImageUtils.getDataURL(t)}else{if(t.data){return{data:Array.prototype.slice.call(t.data),width:t.width,height:t.height,type:t.data.constructor.name}}else{console.warn("THREE.Texture: Unable to serialize Texture.");return{}}}}Source.prototype.isSource=true;let textureId=0;class Texture extends EventDispatcher{constructor(t=Texture.DEFAULT_IMAGE,e=Texture.DEFAULT_MAPPING,n=ClampToEdgeWrapping,i=ClampToEdgeWrapping,r=LinearFilter,a=LinearMipmapLinearFilter,s=RGBAFormat,o=UnsignedByteType,l=1,c=LinearEncoding){super();Object.defineProperty(this,"id",{value:textureId++});this.uuid=generateUUID();this.name="";this.source=new Source(t);this.mipmaps=[];this.mapping=e;this.wrapS=n;this.wrapT=i;this.magFilter=r;this.minFilter=a;this.anisotropy=l;this.format=s;this.internalFormat=null;this.type=o;this.offset=new Vector2(0,0);this.repeat=new Vector2(1,1);this.center=new Vector2(0,0);this.rotation=0;this.matrixAutoUpdate=true;this.matrix=new Matrix3;this.generateMipmaps=true;this.premultiplyAlpha=false;this.flipY=true;this.unpackAlignment=4;this.encoding=c;this.userData={};this.version=0;this.onUpdate=null;this.isRenderTargetTexture=false;this.needsPMREMUpdate=false}get image(){return this.source.data}set image(t){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(t){this.name=t.name;this.source=t.source;this.mipmaps=t.mipmaps.slice(0);this.mapping=t.mapping;this.wrapS=t.wrapS;this.wrapT=t.wrapT;this.magFilter=t.magFilter;this.minFilter=t.minFilter;this.anisotropy=t.anisotropy;this.format=t.format;this.internalFormat=t.internalFormat;this.type=t.type;this.offset.copy(t.offset);this.repeat.copy(t.repeat);this.center.copy(t.center);this.rotation=t.rotation;this.matrixAutoUpdate=t.matrixAutoUpdate;this.matrix.copy(t.matrix);this.generateMipmaps=t.generateMipmaps;this.premultiplyAlpha=t.premultiplyAlpha;this.flipY=t.flipY;this.unpackAlignment=t.unpackAlignment;this.encoding=t.encoding;this.userData=JSON.parse(JSON.stringify(t.userData));this.needsUpdate=true;return this}toJSON(t){const e=t===undefined||typeof t==="string";if(!e&&t.textures[this.uuid]!==undefined){return t.textures[this.uuid]}const n={metadata:{version:4.5,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,type:this.type,encoding:this.encoding,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};if(JSON.stringify(this.userData)!=="{}")n.userData=this.userData;if(!e){t.textures[this.uuid]=n}return n}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==UVMapping)return t;t.applyMatrix3(this.matrix);if(t.x<0||t.x>1){switch(this.wrapS){case RepeatWrapping:t.x=t.x-Math.floor(t.x);break;case ClampToEdgeWrapping:t.x=t.x<0?0:1;break;case MirroredRepeatWrapping:if(Math.abs(Math.floor(t.x)%2)===1){t.x=Math.ceil(t.x)-t.x}else{t.x=t.x-Math.floor(t.x)}break}}if(t.y<0||t.y>1){switch(this.wrapT){case RepeatWrapping:t.y=t.y-Math.floor(t.y);break;case ClampToEdgeWrapping:t.y=t.y<0?0:1;break;case MirroredRepeatWrapping:if(Math.abs(Math.floor(t.y)%2)===1){t.y=Math.ceil(t.y)-t.y}else{t.y=t.y-Math.floor(t.y)}break}}if(this.flipY){t.y=1-t.y}return t}set needsUpdate(t){if(t===true){this.version++;this.source.needsUpdate=true}}}Texture.DEFAULT_IMAGE=null;Texture.DEFAULT_MAPPING=UVMapping;Texture.prototype.isTexture=true;class Vector4{constructor(t=0,e=0,n=0,i=1){this.x=t;this.y=e;this.z=n;this.w=i}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,i){this.x=t;this.y=e;this.z=n;this.w=i;return this}setScalar(t){this.x=t;this.y=t;this.z=t;this.w=t;return this}setX(t){this.x=t;return this}setY(t){this.y=t;return this}setZ(t){this.z=t;return this}setW(t){this.w=t;return this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){this.x=t.x;this.y=t.y;this.z=t.z;this.w=t.w!==undefined?t.w:1;return this}add(t,e){if(e!==undefined){console.warn("THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");return this.addVectors(t,e)}this.x+=t.x;this.y+=t.y;this.z+=t.z;this.w+=t.w;return this}addScalar(t){this.x+=t;this.y+=t;this.z+=t;this.w+=t;return this}addVectors(t,e){this.x=t.x+e.x;this.y=t.y+e.y;this.z=t.z+e.z;this.w=t.w+e.w;return this}addScaledVector(t,e){this.x+=t.x*e;this.y+=t.y*e;this.z+=t.z*e;this.w+=t.w*e;return this}sub(t,e){if(e!==undefined){console.warn("THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");return this.subVectors(t,e)}this.x-=t.x;this.y-=t.y;this.z-=t.z;this.w-=t.w;return this}subScalar(t){this.x-=t;this.y-=t;this.z-=t;this.w-=t;return this}subVectors(t,e){this.x=t.x-e.x;this.y=t.y-e.y;this.z=t.z-e.z;this.w=t.w-e.w;return this}multiply(t){this.x*=t.x;this.y*=t.y;this.z*=t.z;this.w*=t.w;return this}multiplyScalar(t){this.x*=t;this.y*=t;this.z*=t;this.w*=t;return this}applyMatrix4(t){const e=this.x,n=this.y,i=this.z,r=this.w;const a=t.elements;this.x=a[0]*e+a[4]*n+a[8]*i+a[12]*r;this.y=a[1]*e+a[5]*n+a[9]*i+a[13]*r;this.z=a[2]*e+a[6]*n+a[10]*i+a[14]*r;this.w=a[3]*e+a[7]*n+a[11]*i+a[15]*r;return this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);if(e<1e-4){this.x=1;this.y=0;this.z=0}else{this.x=t.x/e;this.y=t.y/e;this.z=t.z/e}return this}setAxisAngleFromRotationMatrix(t){let e,n,i,r;const a=.01,s=.1,o=t.elements,l=o[0],c=o[4],u=o[8],h=o[1],d=o[5],f=o[9],p=o[2],m=o[6],g=o[10];if(Math.abs(c-h)<a&&Math.abs(u-p)<a&&Math.abs(f-m)<a){if(Math.abs(c+h)<s&&Math.abs(u+p)<s&&Math.abs(f+m)<s&&Math.abs(l+d+g-3)<s){this.set(1,0,0,0);return this}e=Math.PI;const t=(l+1)/2;const o=(d+1)/2;const _=(g+1)/2;const y=(c+h)/4;const x=(u+p)/4;const v=(f+m)/4;if(t>o&&t>_){if(t<a){n=0;i=.707106781;r=.707106781}else{n=Math.sqrt(t);i=y/n;r=x/n}}else if(o>_){if(o<a){n=.707106781;i=0;r=.707106781}else{i=Math.sqrt(o);n=y/i;r=v/i}}else{if(_<a){n=.707106781;i=.707106781;r=0}else{r=Math.sqrt(_);n=x/r;i=v/r}}this.set(n,i,r,e);return this}let _=Math.sqrt((m-f)*(m-f)+(u-p)*(u-p)+(h-c)*(h-c));if(Math.abs(_)<.001)_=1;this.x=(m-f)/_;this.y=(u-p)/_;this.z=(h-c)/_;this.w=Math.acos((l+d+g-1)/2);return this}min(t){this.x=Math.min(this.x,t.x);this.y=Math.min(this.y,t.y);this.z=Math.min(this.z,t.z);this.w=Math.min(this.w,t.w);return this}max(t){this.x=Math.max(this.x,t.x);this.y=Math.max(this.y,t.y);this.z=Math.max(this.z,t.z);this.w=Math.max(this.w,t.w);return this}clamp(t,e){this.x=Math.max(t.x,Math.min(e.x,this.x));this.y=Math.max(t.y,Math.min(e.y,this.y));this.z=Math.max(t.z,Math.min(e.z,this.z));this.w=Math.max(t.w,Math.min(e.w,this.w));return this}clampScalar(t,e){this.x=Math.max(t,Math.min(e,this.x));this.y=Math.max(t,Math.min(e,this.y));this.z=Math.max(t,Math.min(e,this.z));this.w=Math.max(t,Math.min(e,this.w));return this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);this.w=Math.floor(this.w);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);this.w=Math.ceil(this.w);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);this.w=Math.round(this.w);return this}roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z);this.w=this.w<0?Math.ceil(this.w):Math.floor(this.w);return this}negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;this.w=-this.w;return this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){this.x+=(t.x-this.x)*e;this.y+=(t.y-this.y)*e;this.z+=(t.z-this.z)*e;this.w+=(t.w-this.w)*e;return this}lerpVectors(t,e,n){this.x=t.x+(e.x-t.x)*n;this.y=t.y+(e.y-t.y)*n;this.z=t.z+(e.z-t.z)*n;this.w=t.w+(e.w-t.w)*n;return this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){this.x=t[e];this.y=t[e+1];this.z=t[e+2];this.w=t[e+3];return this}toArray(t=[],e=0){t[e]=this.x;t[e+1]=this.y;t[e+2]=this.z;t[e+3]=this.w;return t}fromBufferAttribute(t,e,n){if(n!==undefined){console.warn("THREE.Vector4: offset has been removed from .fromBufferAttribute().")}this.x=t.getX(e);this.y=t.getY(e);this.z=t.getZ(e);this.w=t.getW(e);return this}random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();this.w=Math.random();return this}*[Symbol.iterator](){yield this.x;yield this.y;yield this.z;yield this.w}}Vector4.prototype.isVector4=true;class WebGLRenderTarget extends EventDispatcher{constructor(t,e,n={}){super();this.width=t;this.height=e;this.depth=1;this.scissor=new Vector4(0,0,t,e);this.scissorTest=false;this.viewport=new Vector4(0,0,t,e);const i={width:t,height:e,depth:1};this.texture=new Texture(i,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.encoding);this.texture.isRenderTargetTexture=true;this.texture.generateMipmaps=n.generateMipmaps!==undefined?n.generateMipmaps:false;this.texture.internalFormat=n.internalFormat!==undefined?n.internalFormat:null;this.texture.minFilter=n.minFilter!==undefined?n.minFilter:LinearFilter;this.depthBuffer=n.depthBuffer!==undefined?n.depthBuffer:true;this.stencilBuffer=n.stencilBuffer!==undefined?n.stencilBuffer:false;this.depthTexture=n.depthTexture!==undefined?n.depthTexture:null;this.samples=n.samples!==undefined?n.samples:0}setSize(t,e,n=1){if(this.width!==t||this.height!==e||this.depth!==n){this.width=t;this.height=e;this.depth=n;this.texture.image.width=t;this.texture.image.height=e;this.texture.image.depth=n;this.dispose()}this.viewport.set(0,0,t,e);this.scissor.set(0,0,t,e)}clone(){return(new this.constructor).copy(this)}copy(t){this.width=t.width;this.height=t.height;this.depth=t.depth;this.viewport.copy(t.viewport);this.texture=t.texture.clone();this.texture.image=Object.assign({},t.texture.image);this.depthBuffer=t.depthBuffer;this.stencilBuffer=t.stencilBuffer;if(t.depthTexture!==null)this.depthTexture=t.depthTexture.clone();this.samples=t.samples;return this}dispose(){this.dispatchEvent({type:"dispose"})}}WebGLRenderTarget.prototype.isWebGLRenderTarget=true;class DataArrayTexture extends Texture{constructor(t=null,e=1,n=1,i=1){super(null);this.image={data:t,width:e,height:n,depth:i};this.magFilter=NearestFilter;this.minFilter=NearestFilter;this.wrapR=ClampToEdgeWrapping;this.generateMipmaps=false;this.flipY=false;this.unpackAlignment=1}}DataArrayTexture.prototype.isDataArrayTexture=true;class WebGLArrayRenderTarget extends WebGLRenderTarget{constructor(t,e,n){super(t,e);this.depth=n;this.texture=new DataArrayTexture(null,t,e,n);this.texture.isRenderTargetTexture=true}}WebGLArrayRenderTarget.prototype.isWebGLArrayRenderTarget=true;class Data3DTexture extends Texture{constructor(t=null,e=1,n=1,i=1){super(null);this.image={data:t,width:e,height:n,depth:i};this.magFilter=NearestFilter;this.minFilter=NearestFilter;this.wrapR=ClampToEdgeWrapping;this.generateMipmaps=false;this.flipY=false;this.unpackAlignment=1}}Data3DTexture.prototype.isData3DTexture=true;class WebGL3DRenderTarget extends WebGLRenderTarget{constructor(t,e,n){super(t,e);this.depth=n;this.texture=new Data3DTexture(null,t,e,n);this.texture.isRenderTargetTexture=true}}WebGL3DRenderTarget.prototype.isWebGL3DRenderTarget=true;class WebGLMultipleRenderTargets extends WebGLRenderTarget{constructor(t,e,n,i={}){super(t,e,i);const r=this.texture;this.texture=[];for(let t=0;t<n;t++){this.texture[t]=r.clone();this.texture[t].isRenderTargetTexture=true}}setSize(t,e,n=1){if(this.width!==t||this.height!==e||this.depth!==n){this.width=t;this.height=e;this.depth=n;for(let i=0,r=this.texture.length;i<r;i++){this.texture[i].image.width=t;this.texture[i].image.height=e;this.texture[i].image.depth=n}this.dispose()}this.viewport.set(0,0,t,e);this.scissor.set(0,0,t,e);return this}copy(t){this.dispose();this.width=t.width;this.height=t.height;this.depth=t.depth;this.viewport.set(0,0,this.width,this.height);this.scissor.set(0,0,this.width,this.height);this.depthBuffer=t.depthBuffer;this.stencilBuffer=t.stencilBuffer;this.depthTexture=t.depthTexture;this.texture.length=0;for(let e=0,n=t.texture.length;e<n;e++){this.texture[e]=t.texture[e].clone()}return this}}WebGLMultipleRenderTargets.prototype.isWebGLMultipleRenderTargets=true;class Quaternion$1{constructor(t=0,e=0,n=0,i=1){this._x=t;this._y=e;this._z=n;this._w=i}static slerp(t,e,n,i){console.warn("THREE.Quaternion: Static .slerp() has been deprecated. Use qm.slerpQuaternions( qa, qb, t ) instead.");return n.slerpQuaternions(t,e,i)}static slerpFlat(t,e,n,i,r,a,s){let o=n[i+0],l=n[i+1],c=n[i+2],u=n[i+3];const h=r[a+0],d=r[a+1],f=r[a+2],p=r[a+3];if(s===0){t[e+0]=o;t[e+1]=l;t[e+2]=c;t[e+3]=u;return}if(s===1){t[e+0]=h;t[e+1]=d;t[e+2]=f;t[e+3]=p;return}if(u!==p||o!==h||l!==d||c!==f){let t=1-s;const e=o*h+l*d+c*f+u*p,n=e>=0?1:-1,i=1-e*e;if(i>Number.EPSILON){const r=Math.sqrt(i),a=Math.atan2(r,e*n);t=Math.sin(t*a)/r;s=Math.sin(s*a)/r}const r=s*n;o=o*t+h*r;l=l*t+d*r;c=c*t+f*r;u=u*t+p*r;if(t===1-s){const t=1/Math.sqrt(o*o+l*l+c*c+u*u);o*=t;l*=t;c*=t;u*=t}}t[e]=o;t[e+1]=l;t[e+2]=c;t[e+3]=u}static multiplyQuaternionsFlat(t,e,n,i,r,a){const s=n[i];const o=n[i+1];const l=n[i+2];const c=n[i+3];const u=r[a];const h=r[a+1];const d=r[a+2];const f=r[a+3];t[e]=s*f+c*u+o*d-l*h;t[e+1]=o*f+c*h+l*u-s*d;t[e+2]=l*f+c*d+s*h-o*u;t[e+3]=c*f-s*u-o*h-l*d;return t}get x(){return this._x}set x(t){this._x=t;this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t;this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t;this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t;this._onChangeCallback()}set(t,e,n,i){this._x=t;this._y=e;this._z=n;this._w=i;this._onChangeCallback();return this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){this._x=t.x;this._y=t.y;this._z=t.z;this._w=t.w;this._onChangeCallback();return this}setFromEuler(t,e){if(!(t&&t.isEuler)){throw new Error("THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a Vector3 and order.")}const n=t._x,i=t._y,r=t._z,a=t._order;const s=Math.cos;const o=Math.sin;const l=s(n/2);const c=s(i/2);const u=s(r/2);const h=o(n/2);const d=o(i/2);const f=o(r/2);switch(a){case"XYZ":this._x=h*c*u+l*d*f;this._y=l*d*u-h*c*f;this._z=l*c*f+h*d*u;this._w=l*c*u-h*d*f;break;case"YXZ":this._x=h*c*u+l*d*f;this._y=l*d*u-h*c*f;this._z=l*c*f-h*d*u;this._w=l*c*u+h*d*f;break;case"ZXY":this._x=h*c*u-l*d*f;this._y=l*d*u+h*c*f;this._z=l*c*f+h*d*u;this._w=l*c*u-h*d*f;break;case"ZYX":this._x=h*c*u-l*d*f;this._y=l*d*u+h*c*f;this._z=l*c*f-h*d*u;this._w=l*c*u+h*d*f;break;case"YZX":this._x=h*c*u+l*d*f;this._y=l*d*u+h*c*f;this._z=l*c*f-h*d*u;this._w=l*c*u-h*d*f;break;case"XZY":this._x=h*c*u-l*d*f;this._y=l*d*u-h*c*f;this._z=l*c*f+h*d*u;this._w=l*c*u+h*d*f;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+a)}if(e!==false)this._onChangeCallback();return this}setFromAxisAngle(t,e){const n=e/2,i=Math.sin(n);this._x=t.x*i;this._y=t.y*i;this._z=t.z*i;this._w=Math.cos(n);this._onChangeCallback();return this}setFromRotationMatrix(t){const e=t.elements,n=e[0],i=e[4],r=e[8],a=e[1],s=e[5],o=e[9],l=e[2],c=e[6],u=e[10],h=n+s+u;if(h>0){const t=.5/Math.sqrt(h+1);this._w=.25/t;this._x=(c-o)*t;this._y=(r-l)*t;this._z=(a-i)*t}else if(n>s&&n>u){const t=2*Math.sqrt(1+n-s-u);this._w=(c-o)/t;this._x=.25*t;this._y=(i+a)/t;this._z=(r+l)/t}else if(s>u){const t=2*Math.sqrt(1+s-n-u);this._w=(r-l)/t;this._x=(i+a)/t;this._y=.25*t;this._z=(o+c)/t}else{const t=2*Math.sqrt(1+u-n-s);this._w=(a-i)/t;this._x=(r+l)/t;this._y=(o+c)/t;this._z=.25*t}this._onChangeCallback();return this}setFromUnitVectors(t,e){let n=t.dot(e)+1;if(n<Number.EPSILON){n=0;if(Math.abs(t.x)>Math.abs(t.z)){this._x=-t.y;this._y=t.x;this._z=0;this._w=n}else{this._x=0;this._y=-t.z;this._z=t.y;this._w=n}}else{this._x=t.y*e.z-t.z*e.y;this._y=t.z*e.x-t.x*e.z;this._z=t.x*e.y-t.y*e.x;this._w=n}return this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(clamp(this.dot(t),-1,1)))}rotateTowards(t,e){const n=this.angleTo(t);if(n===0)return this;const i=Math.min(1,e/n);this.slerp(t,i);return this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){this._x*=-1;this._y*=-1;this._z*=-1;this._onChangeCallback();return this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();if(t===0){this._x=0;this._y=0;this._z=0;this._w=1}else{t=1/t;this._x=this._x*t;this._y=this._y*t;this._z=this._z*t;this._w=this._w*t}this._onChangeCallback();return this}multiply(t,e){if(e!==undefined){console.warn("THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.");return this.multiplyQuaternions(t,e)}return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const n=t._x,i=t._y,r=t._z,a=t._w;const s=e._x,o=e._y,l=e._z,c=e._w;this._x=n*c+a*s+i*l-r*o;this._y=i*c+a*o+r*s-n*l;this._z=r*c+a*l+n*o-i*s;this._w=a*c-n*s-i*o-r*l;this._onChangeCallback();return this}slerp(t,e){if(e===0)return this;if(e===1)return this.copy(t);const n=this._x,i=this._y,r=this._z,a=this._w;let s=a*t._w+n*t._x+i*t._y+r*t._z;if(s<0){this._w=-t._w;this._x=-t._x;this._y=-t._y;this._z=-t._z;s=-s}else{this.copy(t)}if(s>=1){this._w=a;this._x=n;this._y=i;this._z=r;return this}const o=1-s*s;if(o<=Number.EPSILON){const t=1-e;this._w=t*a+e*this._w;this._x=t*n+e*this._x;this._y=t*i+e*this._y;this._z=t*r+e*this._z;this.normalize();this._onChangeCallback();return this}const l=Math.sqrt(o);const c=Math.atan2(l,s);const u=Math.sin((1-e)*c)/l,h=Math.sin(e*c)/l;this._w=a*u+this._w*h;this._x=n*u+this._x*h;this._y=i*u+this._y*h;this._z=r*u+this._z*h;this._onChangeCallback();return this}slerpQuaternions(t,e,n){return this.copy(t).slerp(e,n)}random(){const t=Math.random();const e=Math.sqrt(1-t);const n=Math.sqrt(t);const i=2*Math.PI*Math.random();const r=2*Math.PI*Math.random();return this.set(e*Math.cos(i),n*Math.sin(r),n*Math.cos(r),e*Math.sin(i))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){this._x=t[e];this._y=t[e+1];this._z=t[e+2];this._w=t[e+3];this._onChangeCallback();return this}toArray(t=[],e=0){t[e]=this._x;t[e+1]=this._y;t[e+2]=this._z;t[e+3]=this._w;return t}fromBufferAttribute(t,e){this._x=t.getX(e);this._y=t.getY(e);this._z=t.getZ(e);this._w=t.getW(e);return this}_onChange(t){this._onChangeCallback=t;return this}_onChangeCallback(){}}Quaternion$1.prototype.isQuaternion=true;class Vector3$1{constructor(t=0,e=0,n=0){this.x=t;this.y=e;this.z=n}set(t,e,n){if(n===undefined)n=this.z;this.x=t;this.y=e;this.z=n;return this}setScalar(t){this.x=t;this.y=t;this.z=t;return this}setX(t){this.x=t;return this}setY(t){this.y=t;return this}setZ(t){this.z=t;return this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){this.x=t.x;this.y=t.y;this.z=t.z;return this}add(t,e){if(e!==undefined){console.warn("THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.");return this.addVectors(t,e)}this.x+=t.x;this.y+=t.y;this.z+=t.z;return this}addScalar(t){this.x+=t;this.y+=t;this.z+=t;return this}addVectors(t,e){this.x=t.x+e.x;this.y=t.y+e.y;this.z=t.z+e.z;return this}addScaledVector(t,e){this.x+=t.x*e;this.y+=t.y*e;this.z+=t.z*e;return this}sub(t,e){if(e!==undefined){console.warn("THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.");return this.subVectors(t,e)}this.x-=t.x;this.y-=t.y;this.z-=t.z;return this}subScalar(t){this.x-=t;this.y-=t;this.z-=t;return this}subVectors(t,e){this.x=t.x-e.x;this.y=t.y-e.y;this.z=t.z-e.z;return this}multiply(t,e){if(e!==undefined){console.warn("THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.");return this.multiplyVectors(t,e)}this.x*=t.x;this.y*=t.y;this.z*=t.z;return this}multiplyScalar(t){this.x*=t;this.y*=t;this.z*=t;return this}multiplyVectors(t,e){this.x=t.x*e.x;this.y=t.y*e.y;this.z=t.z*e.z;return this}applyEuler(t){if(!(t&&t.isEuler)){console.error("THREE.Vector3: .applyEuler() now expects an Euler rotation rather than a Vector3 and order.")}return this.applyQuaternion(_quaternion$4.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(_quaternion$4.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,i=this.z;const r=t.elements;this.x=r[0]*e+r[3]*n+r[6]*i;this.y=r[1]*e+r[4]*n+r[7]*i;this.z=r[2]*e+r[5]*n+r[8]*i;return this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,i=this.z;const r=t.elements;const a=1/(r[3]*e+r[7]*n+r[11]*i+r[15]);this.x=(r[0]*e+r[4]*n+r[8]*i+r[12])*a;this.y=(r[1]*e+r[5]*n+r[9]*i+r[13])*a;this.z=(r[2]*e+r[6]*n+r[10]*i+r[14])*a;return this}applyQuaternion(t){const e=this.x,n=this.y,i=this.z;const r=t.x,a=t.y,s=t.z,o=t.w;const l=o*e+a*i-s*n;const c=o*n+s*e-r*i;const u=o*i+r*n-a*e;const h=-r*e-a*n-s*i;this.x=l*o+h*-r+c*-s-u*-a;this.y=c*o+h*-a+u*-r-l*-s;this.z=u*o+h*-s+l*-a-c*-r;return this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,i=this.z;const r=t.elements;this.x=r[0]*e+r[4]*n+r[8]*i;this.y=r[1]*e+r[5]*n+r[9]*i;this.z=r[2]*e+r[6]*n+r[10]*i;return this.normalize()}divide(t){this.x/=t.x;this.y/=t.y;this.z/=t.z;return this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){this.x=Math.min(this.x,t.x);this.y=Math.min(this.y,t.y);this.z=Math.min(this.z,t.z);return this}max(t){this.x=Math.max(this.x,t.x);this.y=Math.max(this.y,t.y);this.z=Math.max(this.z,t.z);return this}clamp(t,e){this.x=Math.max(t.x,Math.min(e.x,this.x));this.y=Math.max(t.y,Math.min(e.y,this.y));this.z=Math.max(t.z,Math.min(e.z,this.z));return this}clampScalar(t,e){this.x=Math.max(t,Math.min(e,this.x));this.y=Math.max(t,Math.min(e,this.y));this.z=Math.max(t,Math.min(e,this.z));return this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){this.x=Math.floor(this.x);this.y=Math.floor(this.y);this.z=Math.floor(this.z);return this}ceil(){this.x=Math.ceil(this.x);this.y=Math.ceil(this.y);this.z=Math.ceil(this.z);return this}round(){this.x=Math.round(this.x);this.y=Math.round(this.y);this.z=Math.round(this.z);return this}roundToZero(){this.x=this.x<0?Math.ceil(this.x):Math.floor(this.x);this.y=this.y<0?Math.ceil(this.y):Math.floor(this.y);this.z=this.z<0?Math.ceil(this.z):Math.floor(this.z);return this}negate(){this.x=-this.x;this.y=-this.y;this.z=-this.z;return this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){this.x+=(t.x-this.x)*e;this.y+=(t.y-this.y)*e;this.z+=(t.z-this.z)*e;return this}lerpVectors(t,e,n){this.x=t.x+(e.x-t.x)*n;this.y=t.y+(e.y-t.y)*n;this.z=t.z+(e.z-t.z)*n;return this}cross(t,e){if(e!==undefined){console.warn("THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.");return this.crossVectors(t,e)}return this.crossVectors(this,t)}crossVectors(t,e){const n=t.x,i=t.y,r=t.z;const a=e.x,s=e.y,o=e.z;this.x=i*o-r*s;this.y=r*a-n*o;this.z=n*s-i*a;return this}projectOnVector(t){const e=t.lengthSq();if(e===0)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){_vector$c.copy(this).projectOnVector(t);return this.sub(_vector$c)}reflect(t){return this.sub(_vector$c.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(clamp(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,i=this.z-t.z;return e*e+n*n+i*i}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,n){const i=Math.sin(e)*t;this.x=i*Math.sin(n);this.y=Math.cos(e)*t;this.z=i*Math.cos(n);return this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){this.x=t*Math.sin(e);this.y=n;this.z=t*Math.cos(e);return this}setFromMatrixPosition(t){const e=t.elements;this.x=e[12];this.y=e[13];this.z=e[14];return this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length();const n=this.setFromMatrixColumn(t,1).length();const i=this.setFromMatrixColumn(t,2).length();this.x=e;this.y=n;this.z=i;return this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,e*4)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,e*3)}setFromEuler(t){this.x=t._x;this.y=t._y;this.z=t._z;return this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){this.x=t[e];this.y=t[e+1];this.z=t[e+2];return this}toArray(t=[],e=0){t[e]=this.x;t[e+1]=this.y;t[e+2]=this.z;return t}fromBufferAttribute(t,e,n){if(n!==undefined){console.warn("THREE.Vector3: offset has been removed from .fromBufferAttribute().")}this.x=t.getX(e);this.y=t.getY(e);this.z=t.getZ(e);return this}random(){this.x=Math.random();this.y=Math.random();this.z=Math.random();return this}randomDirection(){const t=(Math.random()-.5)*2;const e=Math.random()*Math.PI*2;const n=Math.sqrt(1-t**2);this.x=n*Math.cos(e);this.y=n*Math.sin(e);this.z=t;return this}*[Symbol.iterator](){yield this.x;yield this.y;yield this.z}}Vector3$1.prototype.isVector3=true;const _vector$c=new Vector3$1;const _quaternion$4=new Quaternion$1;class Box3{constructor(t=new Vector3$1(+Infinity,+Infinity,+Infinity),e=new Vector3$1(-Infinity,-Infinity,-Infinity)){this.min=t;this.max=e}set(t,e){this.min.copy(t);this.max.copy(e);return this}setFromArray(t){let e=+Infinity;let n=+Infinity;let i=+Infinity;let r=-Infinity;let a=-Infinity;let s=-Infinity;for(let o=0,l=t.length;o<l;o+=3){const l=t[o];const c=t[o+1];const u=t[o+2];if(l<e)e=l;if(c<n)n=c;if(u<i)i=u;if(l>r)r=l;if(c>a)a=c;if(u>s)s=u}this.min.set(e,n,i);this.max.set(r,a,s);return this}setFromBufferAttribute(t){let e=+Infinity;let n=+Infinity;let i=+Infinity;let r=-Infinity;let a=-Infinity;let s=-Infinity;for(let o=0,l=t.count;o<l;o++){const l=t.getX(o);const c=t.getY(o);const u=t.getZ(o);if(l<e)e=l;if(c<n)n=c;if(u<i)i=u;if(l>r)r=l;if(c>a)a=c;if(u>s)s=u}this.min.set(e,n,i);this.max.set(r,a,s);return this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++){this.expandByPoint(t[e])}return this}setFromCenterAndSize(t,e){const n=_vector$b.copy(e).multiplyScalar(.5);this.min.copy(t).sub(n);this.max.copy(t).add(n);return this}setFromObject(t,e=false){this.makeEmpty();return this.expandByObject(t,e)}clone(){return(new this.constructor).copy(this)}copy(t){this.min.copy(t.min);this.max.copy(t.max);return this}makeEmpty(){this.min.x=this.min.y=this.min.z=+Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){this.min.min(t);this.max.max(t);return this}expandByVector(t){this.min.sub(t);this.max.add(t);return this}expandByScalar(t){this.min.addScalar(-t);this.max.addScalar(t);return this}expandByObject(t,e=false){t.updateWorldMatrix(false,false);const n=t.geometry;if(n!==undefined){if(e&&n.attributes!=undefined&&n.attributes.position!==undefined){const e=n.attributes.position;for(let n=0,i=e.count;n<i;n++){_vector$b.fromBufferAttribute(e,n).applyMatrix4(t.matrixWorld);this.expandByPoint(_vector$b)}}else{if(n.boundingBox===null){n.computeBoundingBox()}_box$3.copy(n.boundingBox);_box$3.applyMatrix4(t.matrixWorld);this.union(_box$3)}}const i=t.children;for(let t=0,n=i.length;t<n;t++){this.expandByObject(i[t],e)}return this}containsPoint(t){return t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y||t.z<this.min.z||t.z>this.max.z?false:true}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y||t.max.z<this.min.z||t.min.z>this.max.z?false:true}intersectsSphere(t){this.clampPoint(t.center,_vector$b);return _vector$b.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,n;if(t.normal.x>0){e=t.normal.x*this.min.x;n=t.normal.x*this.max.x}else{e=t.normal.x*this.max.x;n=t.normal.x*this.min.x}if(t.normal.y>0){e+=t.normal.y*this.min.y;n+=t.normal.y*this.max.y}else{e+=t.normal.y*this.max.y;n+=t.normal.y*this.min.y}if(t.normal.z>0){e+=t.normal.z*this.min.z;n+=t.normal.z*this.max.z}else{e+=t.normal.z*this.max.z;n+=t.normal.z*this.min.z}return e<=-t.constant&&n>=-t.constant}intersectsTriangle(t){if(this.isEmpty()){return false}this.getCenter(_center);_extents.subVectors(this.max,_center);_v0$2.subVectors(t.a,_center);_v1$7.subVectors(t.b,_center);_v2$3.subVectors(t.c,_center);_f0.subVectors(_v1$7,_v0$2);_f1.subVectors(_v2$3,_v1$7);_f2.subVectors(_v0$2,_v2$3);let e=[0,-_f0.z,_f0.y,0,-_f1.z,_f1.y,0,-_f2.z,_f2.y,_f0.z,0,-_f0.x,_f1.z,0,-_f1.x,_f2.z,0,-_f2.x,-_f0.y,_f0.x,0,-_f1.y,_f1.x,0,-_f2.y,_f2.x,0];if(!satForAxes(e,_v0$2,_v1$7,_v2$3,_extents)){return false}e=[1,0,0,0,1,0,0,0,1];if(!satForAxes(e,_v0$2,_v1$7,_v2$3,_extents)){return false}_triangleNormal.crossVectors(_f0,_f1);e=[_triangleNormal.x,_triangleNormal.y,_triangleNormal.z];return satForAxes(e,_v0$2,_v1$7,_v2$3,_extents)}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){const e=_vector$b.copy(t).clamp(this.min,this.max);return e.sub(t).length()}getBoundingSphere(t){this.getCenter(t.center);t.radius=this.getSize(_vector$b).length()*.5;return t}intersect(t){this.min.max(t.min);this.max.min(t.max);if(this.isEmpty())this.makeEmpty();return this}union(t){this.min.min(t.min);this.max.max(t.max);return this}applyMatrix4(t){if(this.isEmpty())return this;_points[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t);_points[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t);_points[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t);_points[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t);_points[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t);_points[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t);_points[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t);_points[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t);this.setFromPoints(_points);return this}translate(t){this.min.add(t);this.max.add(t);return this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}Box3.prototype.isBox3=true;const _points=[new Vector3$1,new Vector3$1,new Vector3$1,new Vector3$1,new Vector3$1,new Vector3$1,new Vector3$1,new Vector3$1];const _vector$b=new Vector3$1;const _box$3=new Box3;const _v0$2=new Vector3$1;const _v1$7=new Vector3$1;const _v2$3=new Vector3$1;const _f0=new Vector3$1;const _f1=new Vector3$1;const _f2=new Vector3$1;const _center=new Vector3$1;const _extents=new Vector3$1;const _triangleNormal=new Vector3$1;const _testAxis=new Vector3$1;function satForAxes(t,e,n,i,r){for(let a=0,s=t.length-3;a<=s;a+=3){_testAxis.fromArray(t,a);const s=r.x*Math.abs(_testAxis.x)+r.y*Math.abs(_testAxis.y)+r.z*Math.abs(_testAxis.z);const o=e.dot(_testAxis);const l=n.dot(_testAxis);const c=i.dot(_testAxis);if(Math.max(-Math.max(o,l,c),Math.min(o,l,c))>s){return false}}return true}const _box$2=new Box3;const _v1$6=new Vector3$1;const _toFarthestPoint=new Vector3$1;const _toPoint=new Vector3$1;class Sphere{constructor(t=new Vector3$1,e=-1){this.center=t;this.radius=e}set(t,e){this.center.copy(t);this.radius=e;return this}setFromPoints(t,e){const n=this.center;if(e!==undefined){n.copy(e)}else{_box$2.setFromPoints(t).getCenter(n)}let i=0;for(let e=0,r=t.length;e<r;e++){i=Math.max(i,n.distanceToSquared(t[e]))}this.radius=Math.sqrt(i);return this}copy(t){this.center.copy(t.center);this.radius=t.radius;return this}isEmpty(){return this.radius<0}makeEmpty(){this.center.set(0,0,0);this.radius=-1;return this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const n=this.center.distanceToSquared(t);e.copy(t);if(n>this.radius*this.radius){e.sub(this.center).normalize();e.multiplyScalar(this.radius).add(this.center)}return e}getBoundingBox(t){if(this.isEmpty()){t.makeEmpty();return t}t.set(this.center,this.center);t.expandByScalar(this.radius);return t}applyMatrix4(t){this.center.applyMatrix4(t);this.radius=this.radius*t.getMaxScaleOnAxis();return this}translate(t){this.center.add(t);return this}expandByPoint(t){_toPoint.subVectors(t,this.center);const e=_toPoint.lengthSq();if(e>this.radius*this.radius){const t=Math.sqrt(e);const n=(t-this.radius)*.5;this.center.add(_toPoint.multiplyScalar(n/t));this.radius+=n}return this}union(t){if(this.center.equals(t.center)===true){_toFarthestPoint.set(0,0,1).multiplyScalar(t.radius)}else{_toFarthestPoint.subVectors(t.center,this.center).normalize().multiplyScalar(t.radius)}this.expandByPoint(_v1$6.copy(t.center).add(_toFarthestPoint));this.expandByPoint(_v1$6.copy(t.center).sub(_toFarthestPoint));return this}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const _vector$a=new Vector3$1;const _segCenter=new Vector3$1;const _segDir=new Vector3$1;const _diff=new Vector3$1;const _edge1=new Vector3$1;const _edge2=new Vector3$1;const _normal$1=new Vector3$1;class Ray{constructor(t=new Vector3$1,e=new Vector3$1(0,0,-1)){this.origin=t;this.direction=e}set(t,e){this.origin.copy(t);this.direction.copy(e);return this}copy(t){this.origin.copy(t.origin);this.direction.copy(t.direction);return this}at(t,e){return e.copy(this.direction).multiplyScalar(t).add(this.origin)}lookAt(t){this.direction.copy(t).sub(this.origin).normalize();return this}recast(t){this.origin.copy(this.at(t,_vector$a));return this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const n=e.dot(this.direction);if(n<0){return e.copy(this.origin)}return e.copy(this.direction).multiplyScalar(n).add(this.origin)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=_vector$a.subVectors(t,this.origin).dot(this.direction);if(e<0){return this.origin.distanceToSquared(t)}_vector$a.copy(this.direction).multiplyScalar(e).add(this.origin);return _vector$a.distanceToSquared(t)}distanceSqToSegment(t,e,n,i){_segCenter.copy(t).add(e).multiplyScalar(.5);_segDir.copy(e).sub(t).normalize();_diff.copy(this.origin).sub(_segCenter);const r=t.distanceTo(e)*.5;const a=-this.direction.dot(_segDir);const s=_diff.dot(this.direction);const o=-_diff.dot(_segDir);const l=_diff.lengthSq();const c=Math.abs(1-a*a);let u,h,d,f;if(c>0){u=a*o-s;h=a*s-o;f=r*c;if(u>=0){if(h>=-f){if(h<=f){const t=1/c;u*=t;h*=t;d=u*(u+a*h+2*s)+h*(a*u+h+2*o)+l}else{h=r;u=Math.max(0,-(a*h+s));d=-u*u+h*(h+2*o)+l}}else{h=-r;u=Math.max(0,-(a*h+s));d=-u*u+h*(h+2*o)+l}}else{if(h<=-f){u=Math.max(0,-(-a*r+s));h=u>0?-r:Math.min(Math.max(-r,-o),r);d=-u*u+h*(h+2*o)+l}else if(h<=f){u=0;h=Math.min(Math.max(-r,-o),r);d=h*(h+2*o)+l}else{u=Math.max(0,-(a*r+s));h=u>0?r:Math.min(Math.max(-r,-o),r);d=-u*u+h*(h+2*o)+l}}}else{h=a>0?-r:r;u=Math.max(0,-(a*h+s));d=-u*u+h*(h+2*o)+l}if(n){n.copy(this.direction).multiplyScalar(u).add(this.origin)}if(i){i.copy(_segDir).multiplyScalar(h).add(_segCenter)}return d}intersectSphere(t,e){_vector$a.subVectors(t.center,this.origin);const n=_vector$a.dot(this.direction);const i=_vector$a.dot(_vector$a)-n*n;const r=t.radius*t.radius;if(i>r)return null;const a=Math.sqrt(r-i);const s=n-a;const o=n+a;if(s<0&&o<0)return null;if(s<0)return this.at(o,e);return this.at(s,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(e===0){if(t.distanceToPoint(this.origin)===0){return 0}return null}const n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null}intersectPlane(t,e){const n=this.distanceToPlane(t);if(n===null){return null}return this.at(n,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);if(e===0){return true}const n=t.normal.dot(this.direction);if(n*e<0){return true}return false}intersectBox(t,e){let n,i,r,a,s,o;const l=1/this.direction.x,c=1/this.direction.y,u=1/this.direction.z;const h=this.origin;if(l>=0){n=(t.min.x-h.x)*l;i=(t.max.x-h.x)*l}else{n=(t.max.x-h.x)*l;i=(t.min.x-h.x)*l}if(c>=0){r=(t.min.y-h.y)*c;a=(t.max.y-h.y)*c}else{r=(t.max.y-h.y)*c;a=(t.min.y-h.y)*c}if(n>a||r>i)return null;if(r>n||n!==n)n=r;if(a<i||i!==i)i=a;if(u>=0){s=(t.min.z-h.z)*u;o=(t.max.z-h.z)*u}else{s=(t.max.z-h.z)*u;o=(t.min.z-h.z)*u}if(n>o||s>i)return null;if(s>n||n!==n)n=s;if(o<i||i!==i)i=o;if(i<0)return null;return this.at(n>=0?n:i,e)}intersectsBox(t){return this.intersectBox(t,_vector$a)!==null}intersectTriangle(t,e,n,i,r){_edge1.subVectors(e,t);_edge2.subVectors(n,t);_normal$1.crossVectors(_edge1,_edge2);let a=this.direction.dot(_normal$1);let s;if(a>0){if(i)return null;s=1}else if(a<0){s=-1;a=-a}else{return null}_diff.subVectors(this.origin,t);const o=s*this.direction.dot(_edge2.crossVectors(_diff,_edge2));if(o<0){return null}const l=s*this.direction.dot(_edge1.cross(_diff));if(l<0){return null}if(o+l>a){return null}const c=-s*_diff.dot(_normal$1);if(c<0){return null}return this.at(c/a,r)}applyMatrix4(t){this.origin.applyMatrix4(t);this.direction.transformDirection(t);return this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class Matrix4$1{constructor(){this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];if(arguments.length>0){console.error("THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.")}}set(t,e,n,i,r,a,s,o,l,c,u,h,d,f,p,m){const g=this.elements;g[0]=t;g[4]=e;g[8]=n;g[12]=i;g[1]=r;g[5]=a;g[9]=s;g[13]=o;g[2]=l;g[6]=c;g[10]=u;g[14]=h;g[3]=d;g[7]=f;g[11]=p;g[15]=m;return this}identity(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this}clone(){return(new Matrix4$1).fromArray(this.elements)}copy(t){const e=this.elements;const n=t.elements;e[0]=n[0];e[1]=n[1];e[2]=n[2];e[3]=n[3];e[4]=n[4];e[5]=n[5];e[6]=n[6];e[7]=n[7];e[8]=n[8];e[9]=n[9];e[10]=n[10];e[11]=n[11];e[12]=n[12];e[13]=n[13];e[14]=n[14];e[15]=n[15];return this}copyPosition(t){const e=this.elements,n=t.elements;e[12]=n[12];e[13]=n[13];e[14]=n[14];return this}setFromMatrix3(t){const e=t.elements;this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1);return this}extractBasis(t,e,n){t.setFromMatrixColumn(this,0);e.setFromMatrixColumn(this,1);n.setFromMatrixColumn(this,2);return this}makeBasis(t,e,n){this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1);return this}extractRotation(t){const e=this.elements;const n=t.elements;const i=1/_v1$5.setFromMatrixColumn(t,0).length();const r=1/_v1$5.setFromMatrixColumn(t,1).length();const a=1/_v1$5.setFromMatrixColumn(t,2).length();e[0]=n[0]*i;e[1]=n[1]*i;e[2]=n[2]*i;e[3]=0;e[4]=n[4]*r;e[5]=n[5]*r;e[6]=n[6]*r;e[7]=0;e[8]=n[8]*a;e[9]=n[9]*a;e[10]=n[10]*a;e[11]=0;e[12]=0;e[13]=0;e[14]=0;e[15]=1;return this}makeRotationFromEuler(t){if(!(t&&t.isEuler)){console.error("THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.")}const e=this.elements;const n=t.x,i=t.y,r=t.z;const a=Math.cos(n),s=Math.sin(n);const o=Math.cos(i),l=Math.sin(i);const c=Math.cos(r),u=Math.sin(r);if(t.order==="XYZ"){const t=a*c,n=a*u,i=s*c,r=s*u;e[0]=o*c;e[4]=-o*u;e[8]=l;e[1]=n+i*l;e[5]=t-r*l;e[9]=-s*o;e[2]=r-t*l;e[6]=i+n*l;e[10]=a*o}else if(t.order==="YXZ"){const t=o*c,n=o*u,i=l*c,r=l*u;e[0]=t+r*s;e[4]=i*s-n;e[8]=a*l;e[1]=a*u;e[5]=a*c;e[9]=-s;e[2]=n*s-i;e[6]=r+t*s;e[10]=a*o}else if(t.order==="ZXY"){const t=o*c,n=o*u,i=l*c,r=l*u;e[0]=t-r*s;e[4]=-a*u;e[8]=i+n*s;e[1]=n+i*s;e[5]=a*c;e[9]=r-t*s;e[2]=-a*l;e[6]=s;e[10]=a*o}else if(t.order==="ZYX"){const t=a*c,n=a*u,i=s*c,r=s*u;e[0]=o*c;e[4]=i*l-n;e[8]=t*l+r;e[1]=o*u;e[5]=r*l+t;e[9]=n*l-i;e[2]=-l;e[6]=s*o;e[10]=a*o}else if(t.order==="YZX"){const t=a*o,n=a*l,i=s*o,r=s*l;e[0]=o*c;e[4]=r-t*u;e[8]=i*u+n;e[1]=u;e[5]=a*c;e[9]=-s*c;e[2]=-l*c;e[6]=n*u+i;e[10]=t-r*u}else if(t.order==="XZY"){const t=a*o,n=a*l,i=s*o,r=s*l;e[0]=o*c;e[4]=-u;e[8]=l*c;e[1]=t*u+r;e[5]=a*c;e[9]=n*u-i;e[2]=i*u-n;e[6]=s*c;e[10]=r*u+t}e[3]=0;e[7]=0;e[11]=0;e[12]=0;e[13]=0;e[14]=0;e[15]=1;return this}makeRotationFromQuaternion(t){return this.compose(_zero,t,_one)}lookAt(t,e,n){const i=this.elements;_z.subVectors(t,e);if(_z.lengthSq()===0){_z.z=1}_z.normalize();_x.crossVectors(n,_z);if(_x.lengthSq()===0){if(Math.abs(n.z)===1){_z.x+=1e-4}else{_z.z+=1e-4}_z.normalize();_x.crossVectors(n,_z)}_x.normalize();_y.crossVectors(_z,_x);i[0]=_x.x;i[4]=_y.x;i[8]=_z.x;i[1]=_x.y;i[5]=_y.y;i[9]=_z.y;i[2]=_x.z;i[6]=_y.z;i[10]=_z.z;return this}multiply(t,e){if(e!==undefined){console.warn("THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.");return this.multiplyMatrices(t,e)}return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const n=t.elements;const i=e.elements;const r=this.elements;const a=n[0],s=n[4],o=n[8],l=n[12];const c=n[1],u=n[5],h=n[9],d=n[13];const f=n[2],p=n[6],m=n[10],g=n[14];const _=n[3],y=n[7],x=n[11],v=n[15];const b=i[0],M=i[4],w=i[8],S=i[12];const A=i[1],T=i[5],E=i[9],L=i[13];const C=i[2],P=i[6],R=i[10],F=i[14];const I=i[3],B=i[7],D=i[11],N=i[15];r[0]=a*b+s*A+o*C+l*I;r[4]=a*M+s*T+o*P+l*B;r[8]=a*w+s*E+o*R+l*D;r[12]=a*S+s*L+o*F+l*N;r[1]=c*b+u*A+h*C+d*I;r[5]=c*M+u*T+h*P+d*B;r[9]=c*w+u*E+h*R+d*D;r[13]=c*S+u*L+h*F+d*N;r[2]=f*b+p*A+m*C+g*I;r[6]=f*M+p*T+m*P+g*B;r[10]=f*w+p*E+m*R+g*D;r[14]=f*S+p*L+m*F+g*N;r[3]=_*b+y*A+x*C+v*I;r[7]=_*M+y*T+x*P+v*B;r[11]=_*w+y*E+x*R+v*D;r[15]=_*S+y*L+x*F+v*N;return this}multiplyScalar(t){const e=this.elements;e[0]*=t;e[4]*=t;e[8]*=t;e[12]*=t;e[1]*=t;e[5]*=t;e[9]*=t;e[13]*=t;e[2]*=t;e[6]*=t;e[10]*=t;e[14]*=t;e[3]*=t;e[7]*=t;e[11]*=t;e[15]*=t;return this}determinant(){const t=this.elements;const e=t[0],n=t[4],i=t[8],r=t[12];const a=t[1],s=t[5],o=t[9],l=t[13];const c=t[2],u=t[6],h=t[10],d=t[14];const f=t[3],p=t[7],m=t[11],g=t[15];return f*(+r*o*u-i*l*u-r*s*h+n*l*h+i*s*d-n*o*d)+p*(+e*o*d-e*l*h+r*a*h-i*a*d+i*l*c-r*o*c)+m*(+e*l*u-e*s*d-r*a*u+n*a*d+r*s*c-n*l*c)+g*(-i*s*c-e*o*u+e*s*h+i*a*u-n*a*h+n*o*c)}transpose(){const t=this.elements;let e;e=t[1];t[1]=t[4];t[4]=e;e=t[2];t[2]=t[8];t[8]=e;e=t[6];t[6]=t[9];t[9]=e;e=t[3];t[3]=t[12];t[12]=e;e=t[7];t[7]=t[13];t[13]=e;e=t[11];t[11]=t[14];t[14]=e;return this}setPosition(t,e,n){const i=this.elements;if(t.isVector3){i[12]=t.x;i[13]=t.y;i[14]=t.z}else{i[12]=t;i[13]=e;i[14]=n}return this}invert(){const t=this.elements,e=t[0],n=t[1],i=t[2],r=t[3],a=t[4],s=t[5],o=t[6],l=t[7],c=t[8],u=t[9],h=t[10],d=t[11],f=t[12],p=t[13],m=t[14],g=t[15],_=u*m*l-p*h*l+p*o*d-s*m*d-u*o*g+s*h*g,y=f*h*l-c*m*l-f*o*d+a*m*d+c*o*g-a*h*g,x=c*p*l-f*u*l+f*s*d-a*p*d-c*s*g+a*u*g,v=f*u*o-c*p*o-f*s*h+a*p*h+c*s*m-a*u*m;const b=e*_+n*y+i*x+r*v;if(b===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const M=1/b;t[0]=_*M;t[1]=(p*h*r-u*m*r-p*i*d+n*m*d+u*i*g-n*h*g)*M;t[2]=(s*m*r-p*o*r+p*i*l-n*m*l-s*i*g+n*o*g)*M;t[3]=(u*o*r-s*h*r-u*i*l+n*h*l+s*i*d-n*o*d)*M;t[4]=y*M;t[5]=(c*m*r-f*h*r+f*i*d-e*m*d-c*i*g+e*h*g)*M;t[6]=(f*o*r-a*m*r-f*i*l+e*m*l+a*i*g-e*o*g)*M;t[7]=(a*h*r-c*o*r+c*i*l-e*h*l-a*i*d+e*o*d)*M;t[8]=x*M;t[9]=(f*u*r-c*p*r-f*n*d+e*p*d+c*n*g-e*u*g)*M;t[10]=(a*p*r-f*s*r+f*n*l-e*p*l-a*n*g+e*s*g)*M;t[11]=(c*s*r-a*u*r-c*n*l+e*u*l+a*n*d-e*s*d)*M;t[12]=v*M;t[13]=(c*p*i-f*u*i+f*n*h-e*p*h-c*n*m+e*u*m)*M;t[14]=(f*s*i-a*p*i-f*n*o+e*p*o+a*n*m-e*s*m)*M;t[15]=(a*u*i-c*s*i+c*n*o-e*u*o-a*n*h+e*s*h)*M;return this}scale(t){const e=this.elements;const n=t.x,i=t.y,r=t.z;e[0]*=n;e[4]*=i;e[8]*=r;e[1]*=n;e[5]*=i;e[9]*=r;e[2]*=n;e[6]*=i;e[10]*=r;e[3]*=n;e[7]*=i;e[11]*=r;return this}getMaxScaleOnAxis(){const t=this.elements;const e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2];const n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6];const i=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,i))}makeTranslation(t,e,n){this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1);return this}makeRotationX(t){const e=Math.cos(t),n=Math.sin(t);this.set(1,0,0,0,0,e,-n,0,0,n,e,0,0,0,0,1);return this}makeRotationY(t){const e=Math.cos(t),n=Math.sin(t);this.set(e,0,n,0,0,1,0,0,-n,0,e,0,0,0,0,1);return this}makeRotationZ(t){const e=Math.cos(t),n=Math.sin(t);this.set(e,-n,0,0,n,e,0,0,0,0,1,0,0,0,0,1);return this}makeRotationAxis(t,e){const n=Math.cos(e);const i=Math.sin(e);const r=1-n;const a=t.x,s=t.y,o=t.z;const l=r*a,c=r*s;this.set(l*a+n,l*s-i*o,l*o+i*s,0,l*s+i*o,c*s+n,c*o-i*a,0,l*o-i*s,c*o+i*a,r*o*o+n,0,0,0,0,1);return this}makeScale(t,e,n){this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1);return this}makeShear(t,e,n,i,r,a){this.set(1,n,r,0,t,1,a,0,e,i,1,0,0,0,0,1);return this}compose(t,e,n){const i=this.elements;const r=e._x,a=e._y,s=e._z,o=e._w;const l=r+r,c=a+a,u=s+s;const h=r*l,d=r*c,f=r*u;const p=a*c,m=a*u,g=s*u;const _=o*l,y=o*c,x=o*u;const v=n.x,b=n.y,M=n.z;i[0]=(1-(p+g))*v;i[1]=(d+x)*v;i[2]=(f-y)*v;i[3]=0;i[4]=(d-x)*b;i[5]=(1-(h+g))*b;i[6]=(m+_)*b;i[7]=0;i[8]=(f+y)*M;i[9]=(m-_)*M;i[10]=(1-(h+p))*M;i[11]=0;i[12]=t.x;i[13]=t.y;i[14]=t.z;i[15]=1;return this}decompose(t,e,n){const i=this.elements;let r=_v1$5.set(i[0],i[1],i[2]).length();const a=_v1$5.set(i[4],i[5],i[6]).length();const s=_v1$5.set(i[8],i[9],i[10]).length();const o=this.determinant();if(o<0)r=-r;t.x=i[12];t.y=i[13];t.z=i[14];_m1$2.copy(this);const l=1/r;const c=1/a;const u=1/s;_m1$2.elements[0]*=l;_m1$2.elements[1]*=l;_m1$2.elements[2]*=l;_m1$2.elements[4]*=c;_m1$2.elements[5]*=c;_m1$2.elements[6]*=c;_m1$2.elements[8]*=u;_m1$2.elements[9]*=u;_m1$2.elements[10]*=u;e.setFromRotationMatrix(_m1$2);n.x=r;n.y=a;n.z=s;return this}makePerspective(t,e,n,i,r,a){if(a===undefined){console.warn("THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.")}const s=this.elements;const o=2*r/(e-t);const l=2*r/(n-i);const c=(e+t)/(e-t);const u=(n+i)/(n-i);const h=-(a+r)/(a-r);const d=-2*a*r/(a-r);s[0]=o;s[4]=0;s[8]=c;s[12]=0;s[1]=0;s[5]=l;s[9]=u;s[13]=0;s[2]=0;s[6]=0;s[10]=h;s[14]=d;s[3]=0;s[7]=0;s[11]=-1;s[15]=0;return this}makeOrthographic(t,e,n,i,r,a){const s=this.elements;const o=1/(e-t);const l=1/(n-i);const c=1/(a-r);const u=(e+t)*o;const h=(n+i)*l;const d=(a+r)*c;s[0]=2*o;s[4]=0;s[8]=0;s[12]=-u;s[1]=0;s[5]=2*l;s[9]=0;s[13]=-h;s[2]=0;s[6]=0;s[10]=-2*c;s[14]=-d;s[3]=0;s[7]=0;s[11]=0;s[15]=1;return this}equals(t){const e=this.elements;const n=t.elements;for(let t=0;t<16;t++){if(e[t]!==n[t])return false}return true}fromArray(t,e=0){for(let n=0;n<16;n++){this.elements[n]=t[n+e]}return this}toArray(t=[],e=0){const n=this.elements;t[e]=n[0];t[e+1]=n[1];t[e+2]=n[2];t[e+3]=n[3];t[e+4]=n[4];t[e+5]=n[5];t[e+6]=n[6];t[e+7]=n[7];t[e+8]=n[8];t[e+9]=n[9];t[e+10]=n[10];t[e+11]=n[11];t[e+12]=n[12];t[e+13]=n[13];t[e+14]=n[14];t[e+15]=n[15];return t}}Matrix4$1.prototype.isMatrix4=true;const _v1$5=new Vector3$1;const _m1$2=new Matrix4$1;const _zero=new Vector3$1(0,0,0);const _one=new Vector3$1(1,1,1);const _x=new Vector3$1;const _y=new Vector3$1;const _z=new Vector3$1;const _matrix$1=new Matrix4$1;const _quaternion$3=new Quaternion$1;class Euler$1{constructor(t=0,e=0,n=0,i=Euler$1.DefaultOrder){this._x=t;this._y=e;this._z=n;this._order=i}get x(){return this._x}set x(t){this._x=t;this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t;this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t;this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t;this._onChangeCallback()}set(t,e,n,i=this._order){this._x=t;this._y=e;this._z=n;this._order=i;this._onChangeCallback();return this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){this._x=t._x;this._y=t._y;this._z=t._z;this._order=t._order;this._onChangeCallback();return this}setFromRotationMatrix(t,e=this._order,n=true){const i=t.elements;const r=i[0],a=i[4],s=i[8];const o=i[1],l=i[5],c=i[9];const u=i[2],h=i[6],d=i[10];switch(e){case"XYZ":this._y=Math.asin(clamp(s,-1,1));if(Math.abs(s)<.9999999){this._x=Math.atan2(-c,d);this._z=Math.atan2(-a,r)}else{this._x=Math.atan2(h,l);this._z=0}break;case"YXZ":this._x=Math.asin(-clamp(c,-1,1));if(Math.abs(c)<.9999999){this._y=Math.atan2(s,d);this._z=Math.atan2(o,l)}else{this._y=Math.atan2(-u,r);this._z=0}break;case"ZXY":this._x=Math.asin(clamp(h,-1,1));if(Math.abs(h)<.9999999){this._y=Math.atan2(-u,d);this._z=Math.atan2(-a,l)}else{this._y=0;this._z=Math.atan2(o,r)}break;case"ZYX":this._y=Math.asin(-clamp(u,-1,1));if(Math.abs(u)<.9999999){this._x=Math.atan2(h,d);this._z=Math.atan2(o,r)}else{this._x=0;this._z=Math.atan2(-a,l)}break;case"YZX":this._z=Math.asin(clamp(o,-1,1));if(Math.abs(o)<.9999999){this._x=Math.atan2(-c,l);this._y=Math.atan2(-u,r)}else{this._x=0;this._y=Math.atan2(s,d)}break;case"XZY":this._z=Math.asin(-clamp(a,-1,1));if(Math.abs(a)<.9999999){this._x=Math.atan2(h,l);this._y=Math.atan2(s,r)}else{this._x=Math.atan2(-c,d);this._y=0}break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}this._order=e;if(n===true)this._onChangeCallback();return this}setFromQuaternion(t,e,n){_matrix$1.makeRotationFromQuaternion(t);return this.setFromRotationMatrix(_matrix$1,e,n)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){_quaternion$3.setFromEuler(this);return this.setFromQuaternion(_quaternion$3,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){this._x=t[0];this._y=t[1];this._z=t[2];if(t[3]!==undefined)this._order=t[3];this._onChangeCallback();return this}toArray(t=[],e=0){t[e]=this._x;t[e+1]=this._y;t[e+2]=this._z;t[e+3]=this._order;return t}_onChange(t){this._onChangeCallback=t;return this}_onChangeCallback(){}}Euler$1.prototype.isEuler=true;Euler$1.DefaultOrder="XYZ";Euler$1.RotationOrders=["XYZ","YZX","ZXY","XZY","YXZ","ZYX"];class Layers{constructor(){this.mask=1|0}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=4294967295|0}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!==0}isEnabled(t){return(this.mask&(1<<t|0))!==0}}let _object3DId=0;const _v1$4=new Vector3$1;const _q1=new Quaternion$1;const _m1$1=new Matrix4$1;const _target=new Vector3$1;const _position$3=new Vector3$1;const _scale$2=new Vector3$1;const _quaternion$2=new Quaternion$1;const _xAxis=new Vector3$1(1,0,0);const _yAxis=new Vector3$1(0,1,0);const _zAxis=new Vector3$1(0,0,1);const _addedEvent={type:"added"};const _removedEvent={type:"removed"};class Object3D$1 extends EventDispatcher{constructor(){super();Object.defineProperty(this,"id",{value:_object3DId++});this.uuid=generateUUID();this.name="";this.type="Object3D";this.parent=null;this.children=[];this.up=Object3D$1.DefaultUp.clone();const t=new Vector3$1;const e=new Euler$1;const n=new Quaternion$1;const i=new Vector3$1(1,1,1);function r(){n.setFromEuler(e,false)}function a(){e.setFromQuaternion(n,undefined,false)}e._onChange(r);n._onChange(a);Object.defineProperties(this,{position:{configurable:true,enumerable:true,value:t},rotation:{configurable:true,enumerable:true,value:e},quaternion:{configurable:true,enumerable:true,value:n},scale:{configurable:true,enumerable:true,value:i},modelViewMatrix:{value:new Matrix4$1},normalMatrix:{value:new Matrix3}});this.matrix=new Matrix4$1;this.matrixWorld=new Matrix4$1;this.matrixAutoUpdate=Object3D$1.DefaultMatrixAutoUpdate;this.matrixWorldNeedsUpdate=false;this.layers=new Layers;this.visible=true;this.castShadow=false;this.receiveShadow=false;this.frustumCulled=true;this.renderOrder=0;this.animations=[];this.userData={}}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){if(this.matrixAutoUpdate)this.updateMatrix();this.matrix.premultiply(t);this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){this.quaternion.premultiply(t);return this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,true)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){_q1.setFromAxisAngle(t,e);this.quaternion.multiply(_q1);return this}rotateOnWorldAxis(t,e){_q1.setFromAxisAngle(t,e);this.quaternion.premultiply(_q1);return this}rotateX(t){return this.rotateOnAxis(_xAxis,t)}rotateY(t){return this.rotateOnAxis(_yAxis,t)}rotateZ(t){return this.rotateOnAxis(_zAxis,t)}translateOnAxis(t,e){_v1$4.copy(t).applyQuaternion(this.quaternion);this.position.add(_v1$4.multiplyScalar(e));return this}translateX(t){return this.translateOnAxis(_xAxis,t)}translateY(t){return this.translateOnAxis(_yAxis,t)}translateZ(t){return this.translateOnAxis(_zAxis,t)}localToWorld(t){return t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return t.applyMatrix4(_m1$1.copy(this.matrixWorld).invert())}lookAt(t,e,n){if(t.isVector3){_target.copy(t)}else{_target.set(t,e,n)}const i=this.parent;this.updateWorldMatrix(true,false);_position$3.setFromMatrixPosition(this.matrixWorld);if(this.isCamera||this.isLight){_m1$1.lookAt(_position$3,_target,this.up)}else{_m1$1.lookAt(_target,_position$3,this.up)}this.quaternion.setFromRotationMatrix(_m1$1);if(i){_m1$1.extractRotation(i.matrixWorld);_q1.setFromRotationMatrix(_m1$1);this.quaternion.premultiply(_q1.invert())}}add(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++){this.add(arguments[t])}return this}if(t===this){console.error("THREE.Object3D.add: object can't be added as a child of itself.",t);return this}if(t&&t.isObject3D){if(t.parent!==null){t.parent.remove(t)}t.parent=this;this.children.push(t);t.dispatchEvent(_addedEvent)}else{console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t)}return this}remove(t){if(arguments.length>1){for(let t=0;t<arguments.length;t++){this.remove(arguments[t])}return this}const e=this.children.indexOf(t);if(e!==-1){t.parent=null;this.children.splice(e,1);t.dispatchEvent(_removedEvent)}return this}removeFromParent(){const t=this.parent;if(t!==null){t.remove(this)}return this}clear(){for(let t=0;t<this.children.length;t++){const e=this.children[t];e.parent=null;e.dispatchEvent(_removedEvent)}this.children.length=0;return this}attach(t){this.updateWorldMatrix(true,false);_m1$1.copy(this.matrixWorld).invert();if(t.parent!==null){t.parent.updateWorldMatrix(true,false);_m1$1.multiply(t.parent.matrixWorld)}t.applyMatrix4(_m1$1);this.add(t);t.updateWorldMatrix(false,true);return this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let n=0,i=this.children.length;n<i;n++){const i=this.children[n];const r=i.getObjectByProperty(t,e);if(r!==undefined){return r}}return undefined}getWorldPosition(t){this.updateWorldMatrix(true,false);return t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){this.updateWorldMatrix(true,false);this.matrixWorld.decompose(_position$3,t,_scale$2);return t}getWorldScale(t){this.updateWorldMatrix(true,false);this.matrixWorld.decompose(_position$3,_quaternion$2,t);return t}getWorldDirection(t){this.updateWorldMatrix(true,false);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++){e[n].traverse(t)}}traverseVisible(t){if(this.visible===false)return;t(this);const e=this.children;for(let n=0,i=e.length;n<i;n++){e[n].traverseVisible(t)}}traverseAncestors(t){const e=this.parent;if(e!==null){t(e);e.traverseAncestors(t)}}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale);this.matrixWorldNeedsUpdate=true}updateMatrixWorld(t){if(this.matrixAutoUpdate)this.updateMatrix();if(this.matrixWorldNeedsUpdate||t){if(this.parent===null){this.matrixWorld.copy(this.matrix)}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)}this.matrixWorldNeedsUpdate=false;t=true}const e=this.children;for(let n=0,i=e.length;n<i;n++){e[n].updateMatrixWorld(t)}}updateWorldMatrix(t,e){const n=this.parent;if(t===true&&n!==null){n.updateWorldMatrix(true,false)}if(this.matrixAutoUpdate)this.updateMatrix();if(this.parent===null){this.matrixWorld.copy(this.matrix)}else{this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)}if(e===true){const t=this.children;for(let e=0,n=t.length;e<n;e++){t[e].updateWorldMatrix(false,true)}}}toJSON(t){const e=t===undefined||typeof t==="string";const n={};if(e){t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}};n.metadata={version:4.5,type:"Object",generator:"Object3D.toJSON"}}const i={};i.uuid=this.uuid;i.type=this.type;if(this.name!=="")i.name=this.name;if(this.castShadow===true)i.castShadow=true;if(this.receiveShadow===true)i.receiveShadow=true;if(this.visible===false)i.visible=false;if(this.frustumCulled===false)i.frustumCulled=false;if(this.renderOrder!==0)i.renderOrder=this.renderOrder;if(JSON.stringify(this.userData)!=="{}")i.userData=this.userData;i.layers=this.layers.mask;i.matrix=this.matrix.toArray();if(this.matrixAutoUpdate===false)i.matrixAutoUpdate=false;if(this.isInstancedMesh){i.type="InstancedMesh";i.count=this.count;i.instanceMatrix=this.instanceMatrix.toJSON();if(this.instanceColor!==null)i.instanceColor=this.instanceColor.toJSON()}function r(e,n){if(e[n.uuid]===undefined){e[n.uuid]=n.toJSON(t)}return n.uuid}if(this.isScene){if(this.background){if(this.background.isColor){i.background=this.background.toJSON()}else if(this.background.isTexture){i.background=this.background.toJSON(t).uuid}}if(this.environment&&this.environment.isTexture){i.environment=this.environment.toJSON(t).uuid}}else if(this.isMesh||this.isLine||this.isPoints){i.geometry=r(t.geometries,this.geometry);const e=this.geometry.parameters;if(e!==undefined&&e.shapes!==undefined){const n=e.shapes;if(Array.isArray(n)){for(let e=0,i=n.length;e<i;e++){const i=n[e];r(t.shapes,i)}}else{r(t.shapes,n)}}}if(this.isSkinnedMesh){i.bindMode=this.bindMode;i.bindMatrix=this.bindMatrix.toArray();if(this.skeleton!==undefined){r(t.skeletons,this.skeleton);i.skeleton=this.skeleton.uuid}}if(this.material!==undefined){if(Array.isArray(this.material)){const e=[];for(let n=0,i=this.material.length;n<i;n++){e.push(r(t.materials,this.material[n]))}i.material=e}else{i.material=r(t.materials,this.material)}}if(this.children.length>0){i.children=[];for(let e=0;e<this.children.length;e++){i.children.push(this.children[e].toJSON(t).object)}}if(this.animations.length>0){i.animations=[];for(let e=0;e<this.animations.length;e++){const n=this.animations[e];i.animations.push(r(t.animations,n))}}if(e){const e=a(t.geometries);const i=a(t.materials);const r=a(t.textures);const s=a(t.images);const o=a(t.shapes);const l=a(t.skeletons);const c=a(t.animations);const u=a(t.nodes);if(e.length>0)n.geometries=e;if(i.length>0)n.materials=i;if(r.length>0)n.textures=r;if(s.length>0)n.images=s;if(o.length>0)n.shapes=o;if(l.length>0)n.skeletons=l;if(c.length>0)n.animations=c;if(u.length>0)n.nodes=u}n.object=i;return n;function a(t){const e=[];for(const n in t){const i=t[n];delete i.metadata;e.push(i)}return e}}clone(t){return(new this.constructor).copy(this,t)}copy(t,e=true){this.name=t.name;this.up.copy(t.up);this.position.copy(t.position);this.rotation.order=t.rotation.order;this.quaternion.copy(t.quaternion);this.scale.copy(t.scale);this.matrix.copy(t.matrix);this.matrixWorld.copy(t.matrixWorld);this.matrixAutoUpdate=t.matrixAutoUpdate;this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate;this.layers.mask=t.layers.mask;this.visible=t.visible;this.castShadow=t.castShadow;this.receiveShadow=t.receiveShadow;this.frustumCulled=t.frustumCulled;this.renderOrder=t.renderOrder;this.userData=JSON.parse(JSON.stringify(t.userData));if(e===true){for(let e=0;e<t.children.length;e++){const n=t.children[e];this.add(n.clone())}}return this}}Object3D$1.DefaultUp=new Vector3$1(0,1,0);Object3D$1.DefaultMatrixAutoUpdate=true;Object3D$1.prototype.isObject3D=true;const _v0$1=new Vector3$1;const _v1$3=new Vector3$1;const _v2$2=new Vector3$1;const _v3$1=new Vector3$1;const _vab=new Vector3$1;const _vac=new Vector3$1;const _vbc=new Vector3$1;const _vap=new Vector3$1;const _vbp=new Vector3$1;const _vcp=new Vector3$1;class Triangle{constructor(t=new Vector3$1,e=new Vector3$1,n=new Vector3$1){this.a=t;this.b=e;this.c=n}static getNormal(t,e,n,i){i.subVectors(n,e);_v0$1.subVectors(t,e);i.cross(_v0$1);const r=i.lengthSq();if(r>0){return i.multiplyScalar(1/Math.sqrt(r))}return i.set(0,0,0)}static getBarycoord(t,e,n,i,r){_v0$1.subVectors(i,e);_v1$3.subVectors(n,e);_v2$2.subVectors(t,e);const a=_v0$1.dot(_v0$1);const s=_v0$1.dot(_v1$3);const o=_v0$1.dot(_v2$2);const l=_v1$3.dot(_v1$3);const c=_v1$3.dot(_v2$2);const u=a*l-s*s;if(u===0){return r.set(-2,-1,-1)}const h=1/u;const d=(l*o-s*c)*h;const f=(a*c-s*o)*h;return r.set(1-d-f,f,d)}static containsPoint(t,e,n,i){this.getBarycoord(t,e,n,i,_v3$1);return _v3$1.x>=0&&_v3$1.y>=0&&_v3$1.x+_v3$1.y<=1}static getUV(t,e,n,i,r,a,s,o){this.getBarycoord(t,e,n,i,_v3$1);o.set(0,0);o.addScaledVector(r,_v3$1.x);o.addScaledVector(a,_v3$1.y);o.addScaledVector(s,_v3$1.z);return o}static isFrontFacing(t,e,n,i){_v0$1.subVectors(n,e);_v1$3.subVectors(t,e);return _v0$1.cross(_v1$3).dot(i)<0?true:false}set(t,e,n){this.a.copy(t);this.b.copy(e);this.c.copy(n);return this}setFromPointsAndIndices(t,e,n,i){this.a.copy(t[e]);this.b.copy(t[n]);this.c.copy(t[i]);return this}setFromAttributeAndIndices(t,e,n,i){this.a.fromBufferAttribute(t,e);this.b.fromBufferAttribute(t,n);this.c.fromBufferAttribute(t,i);return this}clone(){return(new this.constructor).copy(this)}copy(t){this.a.copy(t.a);this.b.copy(t.b);this.c.copy(t.c);return this}getArea(){_v0$1.subVectors(this.c,this.b);_v1$3.subVectors(this.a,this.b);return _v0$1.cross(_v1$3).length()*.5}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return Triangle.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return Triangle.getBarycoord(t,this.a,this.b,this.c,e)}getUV(t,e,n,i,r){return Triangle.getUV(t,this.a,this.b,this.c,e,n,i,r)}containsPoint(t){return Triangle.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return Triangle.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const n=this.a,i=this.b,r=this.c;let a,s;_vab.subVectors(i,n);_vac.subVectors(r,n);_vap.subVectors(t,n);const o=_vab.dot(_vap);const l=_vac.dot(_vap);if(o<=0&&l<=0){return e.copy(n)}_vbp.subVectors(t,i);const c=_vab.dot(_vbp);const u=_vac.dot(_vbp);if(c>=0&&u<=c){return e.copy(i)}const h=o*u-c*l;if(h<=0&&o>=0&&c<=0){a=o/(o-c);return e.copy(n).addScaledVector(_vab,a)}_vcp.subVectors(t,r);const d=_vab.dot(_vcp);const f=_vac.dot(_vcp);if(f>=0&&d<=f){return e.copy(r)}const p=d*l-o*f;if(p<=0&&l>=0&&f<=0){s=l/(l-f);return e.copy(n).addScaledVector(_vac,s)}const m=c*f-d*u;if(m<=0&&u-c>=0&&d-f>=0){_vbc.subVectors(r,i);s=(u-c)/(u-c+(d-f));return e.copy(i).addScaledVector(_vbc,s)}const g=1/(m+p+h);a=p*g;s=h*g;return e.copy(n).addScaledVector(_vab,a).addScaledVector(_vac,s)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}let materialId=0;class Material extends EventDispatcher{constructor(){super();Object.defineProperty(this,"id",{value:materialId++});this.uuid=generateUUID();this.name="";this.type="Material";this.fog=true;this.blending=NormalBlending;this.side=FrontSide;this.vertexColors=false;this.opacity=1;this.transparent=false;this.blendSrc=SrcAlphaFactor;this.blendDst=OneMinusSrcAlphaFactor;this.blendEquation=AddEquation;this.blendSrcAlpha=null;this.blendDstAlpha=null;this.blendEquationAlpha=null;this.depthFunc=LessEqualDepth;this.depthTest=true;this.depthWrite=true;this.stencilWriteMask=255;this.stencilFunc=AlwaysStencilFunc;this.stencilRef=0;this.stencilFuncMask=255;this.stencilFail=KeepStencilOp;this.stencilZFail=KeepStencilOp;this.stencilZPass=KeepStencilOp;this.stencilWrite=false;this.clippingPlanes=null;this.clipIntersection=false;this.clipShadows=false;this.shadowSide=null;this.colorWrite=true;this.precision=null;this.polygonOffset=false;this.polygonOffsetFactor=0;this.polygonOffsetUnits=0;this.dithering=false;this.alphaToCoverage=false;this.premultipliedAlpha=false;this.visible=true;this.toneMapped=true;this.userData={};this.version=0;this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){if(this._alphaTest>0!==t>0){this.version++}this._alphaTest=t}onBuild(){}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(t===undefined)return;for(const e in t){const n=t[e];if(n===undefined){console.warn("THREE.Material: '"+e+"' parameter is undefined.");continue}if(e==="shading"){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.");this.flatShading=n===FlatShading?true:false;continue}const i=this[e];if(i===undefined){console.warn("THREE."+this.type+": '"+e+"' is not a property of this material.");continue}if(i&&i.isColor){i.set(n)}else if(i&&i.isVector3&&(n&&n.isVector3)){i.copy(n)}else{this[e]=n}}}toJSON(t){const e=t===undefined||typeof t==="string";if(e){t={textures:{},images:{}}}const n={metadata:{version:4.5,type:"Material",generator:"Material.toJSON"}};n.uuid=this.uuid;n.type=this.type;if(this.name!=="")n.name=this.name;if(this.color&&this.color.isColor)n.color=this.color.getHex();if(this.roughness!==undefined)n.roughness=this.roughness;if(this.metalness!==undefined)n.metalness=this.metalness;if(this.sheen!==undefined)n.sheen=this.sheen;if(this.sheenColor&&this.sheenColor.isColor)n.sheenColor=this.sheenColor.getHex();if(this.sheenRoughness!==undefined)n.sheenRoughness=this.sheenRoughness;if(this.emissive&&this.emissive.isColor)n.emissive=this.emissive.getHex();if(this.emissiveIntensity&&this.emissiveIntensity!==1)n.emissiveIntensity=this.emissiveIntensity;if(this.specular&&this.specular.isColor)n.specular=this.specular.getHex();if(this.specularIntensity!==undefined)n.specularIntensity=this.specularIntensity;if(this.specularColor&&this.specularColor.isColor)n.specularColor=this.specularColor.getHex();if(this.shininess!==undefined)n.shininess=this.shininess;if(this.clearcoat!==undefined)n.clearcoat=this.clearcoat;if(this.clearcoatRoughness!==undefined)n.clearcoatRoughness=this.clearcoatRoughness;if(this.clearcoatMap&&this.clearcoatMap.isTexture){n.clearcoatMap=this.clearcoatMap.toJSON(t).uuid}if(this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture){n.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid}if(this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture){n.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid;n.clearcoatNormalScale=this.clearcoatNormalScale.toArray()}if(this.map&&this.map.isTexture)n.map=this.map.toJSON(t).uuid;if(this.matcap&&this.matcap.isTexture)n.matcap=this.matcap.toJSON(t).uuid;if(this.alphaMap&&this.alphaMap.isTexture)n.alphaMap=this.alphaMap.toJSON(t).uuid;if(this.lightMap&&this.lightMap.isTexture){n.lightMap=this.lightMap.toJSON(t).uuid;n.lightMapIntensity=this.lightMapIntensity}if(this.aoMap&&this.aoMap.isTexture){n.aoMap=this.aoMap.toJSON(t).uuid;n.aoMapIntensity=this.aoMapIntensity}if(this.bumpMap&&this.bumpMap.isTexture){n.bumpMap=this.bumpMap.toJSON(t).uuid;n.bumpScale=this.bumpScale}if(this.normalMap&&this.normalMap.isTexture){n.normalMap=this.normalMap.toJSON(t).uuid;n.normalMapType=this.normalMapType;n.normalScale=this.normalScale.toArray()}if(this.displacementMap&&this.displacementMap.isTexture){n.displacementMap=this.displacementMap.toJSON(t).uuid;n.displacementScale=this.displacementScale;n.displacementBias=this.displacementBias}if(this.roughnessMap&&this.roughnessMap.isTexture)n.roughnessMap=this.roughnessMap.toJSON(t).uuid;if(this.metalnessMap&&this.metalnessMap.isTexture)n.metalnessMap=this.metalnessMap.toJSON(t).uuid;if(this.emissiveMap&&this.emissiveMap.isTexture)n.emissiveMap=this.emissiveMap.toJSON(t).uuid;if(this.specularMap&&this.specularMap.isTexture)n.specularMap=this.specularMap.toJSON(t).uuid;if(this.specularIntensityMap&&this.specularIntensityMap.isTexture)n.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid;if(this.specularColorMap&&this.specularColorMap.isTexture)n.specularColorMap=this.specularColorMap.toJSON(t).uuid;if(this.envMap&&this.envMap.isTexture){n.envMap=this.envMap.toJSON(t).uuid;if(this.combine!==undefined)n.combine=this.combine}if(this.envMapIntensity!==undefined)n.envMapIntensity=this.envMapIntensity;if(this.reflectivity!==undefined)n.reflectivity=this.reflectivity;if(this.refractionRatio!==undefined)n.refractionRatio=this.refractionRatio;if(this.gradientMap&&this.gradientMap.isTexture){n.gradientMap=this.gradientMap.toJSON(t).uuid}if(this.transmission!==undefined)n.transmission=this.transmission;if(this.transmissionMap&&this.transmissionMap.isTexture)n.transmissionMap=this.transmissionMap.toJSON(t).uuid;if(this.thickness!==undefined)n.thickness=this.thickness;if(this.thicknessMap&&this.thicknessMap.isTexture)n.thicknessMap=this.thicknessMap.toJSON(t).uuid;if(this.attenuationDistance!==undefined)n.attenuationDistance=this.attenuationDistance;if(this.attenuationColor!==undefined)n.attenuationColor=this.attenuationColor.getHex();if(this.size!==undefined)n.size=this.size;if(this.shadowSide!==null)n.shadowSide=this.shadowSide;if(this.sizeAttenuation!==undefined)n.sizeAttenuation=this.sizeAttenuation;if(this.blending!==NormalBlending)n.blending=this.blending;if(this.side!==FrontSide)n.side=this.side;if(this.vertexColors)n.vertexColors=true;if(this.opacity<1)n.opacity=this.opacity;if(this.transparent===true)n.transparent=this.transparent;n.depthFunc=this.depthFunc;n.depthTest=this.depthTest;n.depthWrite=this.depthWrite;n.colorWrite=this.colorWrite;n.stencilWrite=this.stencilWrite;n.stencilWriteMask=this.stencilWriteMask;n.stencilFunc=this.stencilFunc;n.stencilRef=this.stencilRef;n.stencilFuncMask=this.stencilFuncMask;n.stencilFail=this.stencilFail;n.stencilZFail=this.stencilZFail;n.stencilZPass=this.stencilZPass;if(this.rotation!==undefined&&this.rotation!==0)n.rotation=this.rotation;if(this.polygonOffset===true)n.polygonOffset=true;if(this.polygonOffsetFactor!==0)n.polygonOffsetFactor=this.polygonOffsetFactor;if(this.polygonOffsetUnits!==0)n.polygonOffsetUnits=this.polygonOffsetUnits;if(this.linewidth!==undefined&&this.linewidth!==1)n.linewidth=this.linewidth;if(this.dashSize!==undefined)n.dashSize=this.dashSize;if(this.gapSize!==undefined)n.gapSize=this.gapSize;if(this.scale!==undefined)n.scale=this.scale;if(this.dithering===true)n.dithering=true;if(this.alphaTest>0)n.alphaTest=this.alphaTest;if(this.alphaToCoverage===true)n.alphaToCoverage=this.alphaToCoverage;if(this.premultipliedAlpha===true)n.premultipliedAlpha=this.premultipliedAlpha;if(this.wireframe===true)n.wireframe=this.wireframe;if(this.wireframeLinewidth>1)n.wireframeLinewidth=this.wireframeLinewidth;if(this.wireframeLinecap!=="round")n.wireframeLinecap=this.wireframeLinecap;if(this.wireframeLinejoin!=="round")n.wireframeLinejoin=this.wireframeLinejoin;if(this.flatShading===true)n.flatShading=this.flatShading;if(this.visible===false)n.visible=false;if(this.toneMapped===false)n.toneMapped=false;if(JSON.stringify(this.userData)!=="{}")n.userData=this.userData;function i(t){const e=[];for(const n in t){const i=t[n];delete i.metadata;e.push(i)}return e}if(e){const e=i(t.textures);const r=i(t.images);if(e.length>0)n.textures=e;if(r.length>0)n.images=r}return n}clone(){return(new this.constructor).copy(this)}copy(t){this.name=t.name;this.fog=t.fog;this.blending=t.blending;this.side=t.side;this.vertexColors=t.vertexColors;this.opacity=t.opacity;this.transparent=t.transparent;this.blendSrc=t.blendSrc;this.blendDst=t.blendDst;this.blendEquation=t.blendEquation;this.blendSrcAlpha=t.blendSrcAlpha;this.blendDstAlpha=t.blendDstAlpha;this.blendEquationAlpha=t.blendEquationAlpha;this.depthFunc=t.depthFunc;this.depthTest=t.depthTest;this.depthWrite=t.depthWrite;this.stencilWriteMask=t.stencilWriteMask;this.stencilFunc=t.stencilFunc;this.stencilRef=t.stencilRef;this.stencilFuncMask=t.stencilFuncMask;this.stencilFail=t.stencilFail;this.stencilZFail=t.stencilZFail;this.stencilZPass=t.stencilZPass;this.stencilWrite=t.stencilWrite;const e=t.clippingPlanes;let n=null;if(e!==null){const t=e.length;n=new Array(t);for(let i=0;i!==t;++i){n[i]=e[i].clone()}}this.clippingPlanes=n;this.clipIntersection=t.clipIntersection;this.clipShadows=t.clipShadows;this.shadowSide=t.shadowSide;this.colorWrite=t.colorWrite;this.precision=t.precision;this.polygonOffset=t.polygonOffset;this.polygonOffsetFactor=t.polygonOffsetFactor;this.polygonOffsetUnits=t.polygonOffsetUnits;this.dithering=t.dithering;this.alphaTest=t.alphaTest;this.alphaToCoverage=t.alphaToCoverage;this.premultipliedAlpha=t.premultipliedAlpha;this.visible=t.visible;this.toneMapped=t.toneMapped;this.userData=JSON.parse(JSON.stringify(t.userData));return this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){if(t===true)this.version++}}Material.prototype.isMaterial=true;Material.fromType=function(){return null};class MeshBasicMaterial$1 extends Material{constructor(t){super();this.type="MeshBasicMaterial";this.color=new Color$1(16777215);this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.setValues(t)}copy(t){super.copy(t);this.color.copy(t.color);this.map=t.map;this.lightMap=t.lightMap;this.lightMapIntensity=t.lightMapIntensity;this.aoMap=t.aoMap;this.aoMapIntensity=t.aoMapIntensity;this.specularMap=t.specularMap;this.alphaMap=t.alphaMap;this.envMap=t.envMap;this.combine=t.combine;this.reflectivity=t.reflectivity;this.refractionRatio=t.refractionRatio;this.wireframe=t.wireframe;this.wireframeLinewidth=t.wireframeLinewidth;this.wireframeLinecap=t.wireframeLinecap;this.wireframeLinejoin=t.wireframeLinejoin;return this}}MeshBasicMaterial$1.prototype.isMeshBasicMaterial=true;const _vector$9=new Vector3$1;const _vector2$1=new Vector2;class BufferAttribute{constructor(t,e,n){if(Array.isArray(t)){throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.")}this.name="";this.array=t;this.itemSize=e;this.count=t!==undefined?t.length/e:0;this.normalized=n===true;this.usage=StaticDrawUsage;this.updateRange={offset:0,count:-1};this.version=0}onUploadCallback(){}set needsUpdate(t){if(t===true)this.version++}setUsage(t){this.usage=t;return this}copy(t){this.name=t.name;this.array=new t.array.constructor(t.array);this.itemSize=t.itemSize;this.count=t.count;this.normalized=t.normalized;this.usage=t.usage;return this}copyAt(t,e,n){t*=this.itemSize;n*=e.itemSize;for(let i=0,r=this.itemSize;i<r;i++){this.array[t+i]=e.array[n+i]}return this}copyArray(t){this.array.set(t);return this}copyColorsArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];if(r===undefined){console.warn("THREE.BufferAttribute.copyColorsArray(): color is undefined",i);r=new Color$1}e[n++]=r.r;e[n++]=r.g;e[n++]=r.b}return this}copyVector2sArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];if(r===undefined){console.warn("THREE.BufferAttribute.copyVector2sArray(): vector is undefined",i);r=new Vector2}e[n++]=r.x;e[n++]=r.y}return this}copyVector3sArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];if(r===undefined){console.warn("THREE.BufferAttribute.copyVector3sArray(): vector is undefined",i);r=new Vector3$1}e[n++]=r.x;e[n++]=r.y;e[n++]=r.z}return this}copyVector4sArray(t){const e=this.array;let n=0;for(let i=0,r=t.length;i<r;i++){let r=t[i];if(r===undefined){console.warn("THREE.BufferAttribute.copyVector4sArray(): vector is undefined",i);r=new Vector4}e[n++]=r.x;e[n++]=r.y;e[n++]=r.z;e[n++]=r.w}return this}applyMatrix3(t){if(this.itemSize===2){for(let e=0,n=this.count;e<n;e++){_vector2$1.fromBufferAttribute(this,e);_vector2$1.applyMatrix3(t);this.setXY(e,_vector2$1.x,_vector2$1.y)}}else if(this.itemSize===3){for(let e=0,n=this.count;e<n;e++){_vector$9.fromBufferAttribute(this,e);_vector$9.applyMatrix3(t);this.setXYZ(e,_vector$9.x,_vector$9.y,_vector$9.z)}}return this}applyMatrix4(t){for(let e=0,n=this.count;e<n;e++){_vector$9.x=this.getX(e);_vector$9.y=this.getY(e);_vector$9.z=this.getZ(e);_vector$9.applyMatrix4(t);this.setXYZ(e,_vector$9.x,_vector$9.y,_vector$9.z)}return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++){_vector$9.x=this.getX(e);_vector$9.y=this.getY(e);_vector$9.z=this.getZ(e);_vector$9.applyNormalMatrix(t);this.setXYZ(e,_vector$9.x,_vector$9.y,_vector$9.z)}return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++){_vector$9.x=this.getX(e);_vector$9.y=this.getY(e);_vector$9.z=this.getZ(e);_vector$9.transformDirection(t);this.setXYZ(e,_vector$9.x,_vector$9.y,_vector$9.z)}return this}set(t,e=0){this.array.set(t,e);return this}getX(t){return this.array[t*this.itemSize]}setX(t,e){this.array[t*this.itemSize]=e;return this}getY(t){return this.array[t*this.itemSize+1]}setY(t,e){this.array[t*this.itemSize+1]=e;return this}getZ(t){return this.array[t*this.itemSize+2]}setZ(t,e){this.array[t*this.itemSize+2]=e;return this}getW(t){return this.array[t*this.itemSize+3]}setW(t,e){this.array[t*this.itemSize+3]=e;return this}setXY(t,e,n){t*=this.itemSize;this.array[t+0]=e;this.array[t+1]=n;return this}setXYZ(t,e,n,i){t*=this.itemSize;this.array[t+0]=e;this.array[t+1]=n;this.array[t+2]=i;return this}setXYZW(t,e,n,i,r){t*=this.itemSize;this.array[t+0]=e;this.array[t+1]=n;this.array[t+2]=i;this.array[t+3]=r;return this}onUpload(t){this.onUploadCallback=t;return this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.prototype.slice.call(this.array),normalized:this.normalized};if(this.name!=="")t.name=this.name;if(this.usage!==StaticDrawUsage)t.usage=this.usage;if(this.updateRange.offset!==0||this.updateRange.count!==-1)t.updateRange=this.updateRange;return t}}BufferAttribute.prototype.isBufferAttribute=true;class Int8BufferAttribute extends BufferAttribute{constructor(t,e,n){super(new Int8Array(t),e,n)}}class Uint8BufferAttribute extends BufferAttribute{constructor(t,e,n){super(new Uint8Array(t),e,n)}}class Uint8ClampedBufferAttribute extends BufferAttribute{constructor(t,e,n){super(new Uint8ClampedArray(t),e,n)}}class Int16BufferAttribute extends BufferAttribute{constructor(t,e,n){super(new Int16Array(t),e,n)}}class Uint16BufferAttribute extends BufferAttribute{constructor(t,e,n){super(new Uint16Array(t),e,n)}}class Int32BufferAttribute extends BufferAttribute{constructor(t,e,n){super(new Int32Array(t),e,n)}}class Uint32BufferAttribute extends BufferAttribute{constructor(t,e,n){super(new Uint32Array(t),e,n)}}class Float16BufferAttribute extends BufferAttribute{constructor(t,e,n){super(new Uint16Array(t),e,n)}}Float16BufferAttribute.prototype.isFloat16BufferAttribute=true;class Float32BufferAttribute$1 extends BufferAttribute{constructor(t,e,n){super(new Float32Array(t),e,n)}}class Float64BufferAttribute extends BufferAttribute{constructor(t,e,n){super(new Float64Array(t),e,n)}}let _id$1=0;const _m1=new Matrix4$1;const _obj=new Object3D$1;const _offset=new Vector3$1;const _box$1=new Box3;const _boxMorphTargets=new Box3;const _vector$8=new Vector3$1;class BufferGeometry$1 extends EventDispatcher{constructor(){super();Object.defineProperty(this,"id",{value:_id$1++});this.uuid=generateUUID();this.name="";this.type="BufferGeometry";this.index=null;this.attributes={};this.morphAttributes={};this.morphTargetsRelative=false;this.groups=[];this.boundingBox=null;this.boundingSphere=null;this.drawRange={start:0,count:Infinity};this.userData={}}getIndex(){return this.index}setIndex(t){if(Array.isArray(t)){this.index=new(arrayNeedsUint32(t)?Uint32BufferAttribute:Uint16BufferAttribute)(t,1)}else{this.index=t}return this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){this.attributes[t]=e;return this}deleteAttribute(t){delete this.attributes[t];return this}hasAttribute(t){return this.attributes[t]!==undefined}addGroup(t,e,n=0){this.groups.push({start:t,count:e,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t;this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;if(e!==undefined){e.applyMatrix4(t);e.needsUpdate=true}const n=this.attributes.normal;if(n!==undefined){const e=(new Matrix3).getNormalMatrix(t);n.applyNormalMatrix(e);n.needsUpdate=true}const i=this.attributes.tangent;if(i!==undefined){i.transformDirection(t);i.needsUpdate=true}if(this.boundingBox!==null){this.computeBoundingBox()}if(this.boundingSphere!==null){this.computeBoundingSphere()}return this}applyQuaternion(t){_m1.makeRotationFromQuaternion(t);this.applyMatrix4(_m1);return this}rotateX(t){_m1.makeRotationX(t);this.applyMatrix4(_m1);return this}rotateY(t){_m1.makeRotationY(t);this.applyMatrix4(_m1);return this}rotateZ(t){_m1.makeRotationZ(t);this.applyMatrix4(_m1);return this}translate(t,e,n){_m1.makeTranslation(t,e,n);this.applyMatrix4(_m1);return this}scale(t,e,n){_m1.makeScale(t,e,n);this.applyMatrix4(_m1);return this}lookAt(t){_obj.lookAt(t);_obj.updateMatrix();this.applyMatrix4(_obj.matrix);return this}center(){this.computeBoundingBox();this.boundingBox.getCenter(_offset).negate();this.translate(_offset.x,_offset.y,_offset.z);return this}setFromPoints(t){const e=[];for(let n=0,i=t.length;n<i;n++){const i=t[n];e.push(i.x,i.y,i.z||0)}this.setAttribute("position",new Float32BufferAttribute$1(e,3));return this}computeBoundingBox(){if(this.boundingBox===null){this.boundingBox=new Box3}const t=this.attributes.position;const e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',this);this.boundingBox.set(new Vector3$1(-Infinity,-Infinity,-Infinity),new Vector3$1(+Infinity,+Infinity,+Infinity));return}if(t!==undefined){this.boundingBox.setFromBufferAttribute(t);if(e){for(let t=0,n=e.length;t<n;t++){const n=e[t];_box$1.setFromBufferAttribute(n);if(this.morphTargetsRelative){_vector$8.addVectors(this.boundingBox.min,_box$1.min);this.boundingBox.expandByPoint(_vector$8);_vector$8.addVectors(this.boundingBox.max,_box$1.max);this.boundingBox.expandByPoint(_vector$8)}else{this.boundingBox.expandByPoint(_box$1.min);this.boundingBox.expandByPoint(_box$1.max)}}}}else{this.boundingBox.makeEmpty()}if(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z)){console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}}computeBoundingSphere(){if(this.boundingSphere===null){this.boundingSphere=new Sphere}const t=this.attributes.position;const e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error('THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',this);this.boundingSphere.set(new Vector3$1,Infinity);return}if(t){const n=this.boundingSphere.center;_box$1.setFromBufferAttribute(t);if(e){for(let t=0,n=e.length;t<n;t++){const n=e[t];_boxMorphTargets.setFromBufferAttribute(n);if(this.morphTargetsRelative){_vector$8.addVectors(_box$1.min,_boxMorphTargets.min);_box$1.expandByPoint(_vector$8);_vector$8.addVectors(_box$1.max,_boxMorphTargets.max);_box$1.expandByPoint(_vector$8)}else{_box$1.expandByPoint(_boxMorphTargets.min);_box$1.expandByPoint(_boxMorphTargets.max)}}}_box$1.getCenter(n);let i=0;for(let e=0,r=t.count;e<r;e++){_vector$8.fromBufferAttribute(t,e);i=Math.max(i,n.distanceToSquared(_vector$8))}if(e){for(let r=0,a=e.length;r<a;r++){const a=e[r];const s=this.morphTargetsRelative;for(let e=0,r=a.count;e<r;e++){_vector$8.fromBufferAttribute(a,e);if(s){_offset.fromBufferAttribute(t,e);_vector$8.add(_offset)}i=Math.max(i,n.distanceToSquared(_vector$8))}}}this.boundingSphere.radius=Math.sqrt(i);if(isNaN(this.boundingSphere.radius)){console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}}computeTangents(){const t=this.index;const e=this.attributes;if(t===null||e.position===undefined||e.normal===undefined||e.uv===undefined){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const n=t.array;const i=e.position.array;const r=e.normal.array;const a=e.uv.array;const s=i.length/3;if(this.hasAttribute("tangent")===false){this.setAttribute("tangent",new BufferAttribute(new Float32Array(4*s),4))}const o=this.getAttribute("tangent").array;const l=[],c=[];for(let t=0;t<s;t++){l[t]=new Vector3$1;c[t]=new Vector3$1}const u=new Vector3$1,h=new Vector3$1,d=new Vector3$1,f=new Vector2,p=new Vector2,m=new Vector2,g=new Vector3$1,_=new Vector3$1;function y(t,e,n){u.fromArray(i,t*3);h.fromArray(i,e*3);d.fromArray(i,n*3);f.fromArray(a,t*2);p.fromArray(a,e*2);m.fromArray(a,n*2);h.sub(u);d.sub(u);p.sub(f);m.sub(f);const r=1/(p.x*m.y-m.x*p.y);if(!isFinite(r))return;g.copy(h).multiplyScalar(m.y).addScaledVector(d,-p.y).multiplyScalar(r);_.copy(d).multiplyScalar(p.x).addScaledVector(h,-m.x).multiplyScalar(r);l[t].add(g);l[e].add(g);l[n].add(g);c[t].add(_);c[e].add(_);c[n].add(_)}let x=this.groups;if(x.length===0){x=[{start:0,count:n.length}]}for(let t=0,e=x.length;t<e;++t){const e=x[t];const i=e.start;const r=e.count;for(let t=i,e=i+r;t<e;t+=3){y(n[t+0],n[t+1],n[t+2])}}const v=new Vector3$1,b=new Vector3$1;const M=new Vector3$1,w=new Vector3$1;function S(t){M.fromArray(r,t*3);w.copy(M);const e=l[t];v.copy(e);v.sub(M.multiplyScalar(M.dot(e))).normalize();b.crossVectors(w,e);const n=b.dot(c[t]);const i=n<0?-1:1;o[t*4]=v.x;o[t*4+1]=v.y;o[t*4+2]=v.z;o[t*4+3]=i}for(let t=0,e=x.length;t<e;++t){const e=x[t];const i=e.start;const r=e.count;for(let t=i,e=i+r;t<e;t+=3){S(n[t+0]);S(n[t+1]);S(n[t+2])}}}computeVertexNormals(){const t=this.index;const e=this.getAttribute("position");if(e!==undefined){let n=this.getAttribute("normal");if(n===undefined){n=new BufferAttribute(new Float32Array(e.count*3),3);this.setAttribute("normal",n)}else{for(let t=0,e=n.count;t<e;t++){n.setXYZ(t,0,0,0)}}const i=new Vector3$1,r=new Vector3$1,a=new Vector3$1;const s=new Vector3$1,o=new Vector3$1,l=new Vector3$1;const c=new Vector3$1,u=new Vector3$1;if(t){for(let h=0,d=t.count;h<d;h+=3){const d=t.getX(h+0);const f=t.getX(h+1);const p=t.getX(h+2);i.fromBufferAttribute(e,d);r.fromBufferAttribute(e,f);a.fromBufferAttribute(e,p);c.subVectors(a,r);u.subVectors(i,r);c.cross(u);s.fromBufferAttribute(n,d);o.fromBufferAttribute(n,f);l.fromBufferAttribute(n,p);s.add(c);o.add(c);l.add(c);n.setXYZ(d,s.x,s.y,s.z);n.setXYZ(f,o.x,o.y,o.z);n.setXYZ(p,l.x,l.y,l.z)}}else{for(let t=0,s=e.count;t<s;t+=3){i.fromBufferAttribute(e,t+0);r.fromBufferAttribute(e,t+1);a.fromBufferAttribute(e,t+2);c.subVectors(a,r);u.subVectors(i,r);c.cross(u);n.setXYZ(t+0,c.x,c.y,c.z);n.setXYZ(t+1,c.x,c.y,c.z);n.setXYZ(t+2,c.x,c.y,c.z)}}this.normalizeNormals();n.needsUpdate=true}}merge(t,e){if(!(t&&t.isBufferGeometry)){console.error("THREE.BufferGeometry.merge(): geometry not an instance of THREE.BufferGeometry.",t);return}if(e===undefined){e=0;console.warn("THREE.BufferGeometry.merge(): Overwriting original geometry, starting at offset=0. "+"Use BufferGeometryUtils.mergeBufferGeometries() for lossless merge.")}const n=this.attributes;for(const i in n){if(t.attributes[i]===undefined)continue;const r=n[i];const a=r.array;const s=t.attributes[i];const o=s.array;const l=s.itemSize*e;const c=Math.min(o.length,a.length-l);for(let t=0,e=l;t<c;t++,e++){a[e]=o[t]}}return this}normalizeNormals(){const t=this.attributes.normal;for(let e=0,n=t.count;e<n;e++){_vector$8.fromBufferAttribute(t,e);_vector$8.normalize();t.setXYZ(e,_vector$8.x,_vector$8.y,_vector$8.z)}}toNonIndexed(){function t(t,e){const n=t.array;const i=t.itemSize;const r=t.normalized;const a=new n.constructor(e.length*i);let s=0,o=0;for(let r=0,l=e.length;r<l;r++){if(t.isInterleavedBufferAttribute){s=e[r]*t.data.stride+t.offset}else{s=e[r]*i}for(let t=0;t<i;t++){a[o++]=n[s++]}}return new BufferAttribute(a,i,r)}if(this.index===null){console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.");return this}const e=new BufferGeometry$1;const n=this.index.array;const i=this.attributes;for(const r in i){const a=i[r];const s=t(a,n);e.setAttribute(r,s)}const r=this.morphAttributes;for(const i in r){const a=[];const s=r[i];for(let e=0,i=s.length;e<i;e++){const i=s[e];const r=t(i,n);a.push(r)}e.morphAttributes[i]=a}e.morphTargetsRelative=this.morphTargetsRelative;const a=this.groups;for(let t=0,n=a.length;t<n;t++){const n=a[t];e.addGroup(n.start,n.count,n.materialIndex)}return e}toJSON(){const t={metadata:{version:4.5,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};t.uuid=this.uuid;t.type=this.type;if(this.name!=="")t.name=this.name;if(Object.keys(this.userData).length>0)t.userData=this.userData;if(this.parameters!==undefined){const e=this.parameters;for(const n in e){if(e[n]!==undefined)t[n]=e[n]}return t}t.data={attributes:{}};const e=this.index;if(e!==null){t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)}}const n=this.attributes;for(const e in n){const i=n[e];t.data.attributes[e]=i.toJSON(t.data)}const i={};let r=false;for(const e in this.morphAttributes){const n=this.morphAttributes[e];const a=[];for(let e=0,i=n.length;e<i;e++){const i=n[e];a.push(i.toJSON(t.data))}if(a.length>0){i[e]=a;r=true}}if(r){t.data.morphAttributes=i;t.data.morphTargetsRelative=this.morphTargetsRelative}const a=this.groups;if(a.length>0){t.data.groups=JSON.parse(JSON.stringify(a))}const s=this.boundingSphere;if(s!==null){t.data.boundingSphere={center:s.center.toArray(),radius:s.radius}}return t}clone(){return(new this.constructor).copy(this)}copy(t){this.index=null;this.attributes={};this.morphAttributes={};this.groups=[];this.boundingBox=null;this.boundingSphere=null;const e={};this.name=t.name;const n=t.index;if(n!==null){this.setIndex(n.clone(e))}const i=t.attributes;for(const t in i){const n=i[t];this.setAttribute(t,n.clone(e))}const r=t.morphAttributes;for(const t in r){const n=[];const i=r[t];for(let t=0,r=i.length;t<r;t++){n.push(i[t].clone(e))}this.morphAttributes[t]=n}this.morphTargetsRelative=t.morphTargetsRelative;const a=t.groups;for(let t=0,e=a.length;t<e;t++){const e=a[t];this.addGroup(e.start,e.count,e.materialIndex)}const s=t.boundingBox;if(s!==null){this.boundingBox=s.clone()}const o=t.boundingSphere;if(o!==null){this.boundingSphere=o.clone()}this.drawRange.start=t.drawRange.start;this.drawRange.count=t.drawRange.count;this.userData=t.userData;if(t.parameters!==undefined)this.parameters=Object.assign({},t.parameters);return this}dispose(){this.dispatchEvent({type:"dispose"})}}BufferGeometry$1.prototype.isBufferGeometry=true;const _inverseMatrix$2=new Matrix4$1;const _ray$2=new Ray;const _sphere$3=new Sphere;const _vA$1=new Vector3$1;const _vB$1=new Vector3$1;const _vC$1=new Vector3$1;const _tempA=new Vector3$1;const _tempB=new Vector3$1;const _tempC=new Vector3$1;const _morphA=new Vector3$1;const _morphB=new Vector3$1;const _morphC=new Vector3$1;const _uvA$1=new Vector2;const _uvB$1=new Vector2;const _uvC$1=new Vector2;const _intersectionPoint=new Vector3$1;const _intersectionPointWorld=new Vector3$1;class Mesh$1 extends Object3D$1{constructor(t=new BufferGeometry$1,e=new MeshBasicMaterial$1){super();this.type="Mesh";this.geometry=t;this.material=e;this.updateMorphTargets()}copy(t){super.copy(t);if(t.morphTargetInfluences!==undefined){this.morphTargetInfluences=t.morphTargetInfluences.slice()}if(t.morphTargetDictionary!==undefined){this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)}this.material=t.material;this.geometry=t.geometry;return this}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes;const n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(t!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0);this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;if(e!==undefined&&e.length>0){console.error("THREE.Mesh.updateMorphTargets() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}}raycast(t,e){const n=this.geometry;const i=this.material;const r=this.matrixWorld;if(i===undefined)return;if(n.boundingSphere===null)n.computeBoundingSphere();_sphere$3.copy(n.boundingSphere);_sphere$3.applyMatrix4(r);if(t.ray.intersectsSphere(_sphere$3)===false)return;_inverseMatrix$2.copy(r).invert();_ray$2.copy(t.ray).applyMatrix4(_inverseMatrix$2);if(n.boundingBox!==null){if(_ray$2.intersectsBox(n.boundingBox)===false)return}let a;if(n.isBufferGeometry){const r=n.index;const s=n.attributes.position;const o=n.morphAttributes.position;const l=n.morphTargetsRelative;const c=n.attributes.uv;const u=n.attributes.uv2;const h=n.groups;const d=n.drawRange;if(r!==null){if(Array.isArray(i)){for(let n=0,f=h.length;n<f;n++){const f=h[n];const p=i[f.materialIndex];const m=Math.max(f.start,d.start);const g=Math.min(r.count,Math.min(f.start+f.count,d.start+d.count));for(let n=m,i=g;n<i;n+=3){const i=r.getX(n);const h=r.getX(n+1);const d=r.getX(n+2);a=checkBufferGeometryIntersection(this,p,t,_ray$2,s,o,l,c,u,i,h,d);if(a){a.faceIndex=Math.floor(n/3);a.face.materialIndex=f.materialIndex;e.push(a)}}}}else{const n=Math.max(0,d.start);const h=Math.min(r.count,d.start+d.count);for(let d=n,f=h;d<f;d+=3){const n=r.getX(d);const h=r.getX(d+1);const f=r.getX(d+2);a=checkBufferGeometryIntersection(this,i,t,_ray$2,s,o,l,c,u,n,h,f);if(a){a.faceIndex=Math.floor(d/3);e.push(a)}}}}else if(s!==undefined){if(Array.isArray(i)){for(let n=0,r=h.length;n<r;n++){const r=h[n];const f=i[r.materialIndex];const p=Math.max(r.start,d.start);const m=Math.min(s.count,Math.min(r.start+r.count,d.start+d.count));for(let n=p,i=m;n<i;n+=3){const i=n;const h=n+1;const d=n+2;a=checkBufferGeometryIntersection(this,f,t,_ray$2,s,o,l,c,u,i,h,d);if(a){a.faceIndex=Math.floor(n/3);a.face.materialIndex=r.materialIndex;e.push(a)}}}}else{const n=Math.max(0,d.start);const r=Math.min(s.count,d.start+d.count);for(let h=n,d=r;h<d;h+=3){const n=h;const r=h+1;const d=h+2;a=checkBufferGeometryIntersection(this,i,t,_ray$2,s,o,l,c,u,n,r,d);if(a){a.faceIndex=Math.floor(h/3);e.push(a)}}}}}else if(n.isGeometry){console.error("THREE.Mesh.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}}Mesh$1.prototype.isMesh=true;function checkIntersection(t,e,n,i,r,a,s,o){let l;if(e.side===BackSide){l=i.intersectTriangle(s,a,r,true,o)}else{l=i.intersectTriangle(r,a,s,e.side!==DoubleSide$1,o)}if(l===null)return null;_intersectionPointWorld.copy(o);_intersectionPointWorld.applyMatrix4(t.matrixWorld);const c=n.ray.origin.distanceTo(_intersectionPointWorld);if(c<n.near||c>n.far)return null;return{distance:c,point:_intersectionPointWorld.clone(),object:t}}function checkBufferGeometryIntersection(t,e,n,i,r,a,s,o,l,c,u,h){_vA$1.fromBufferAttribute(r,c);_vB$1.fromBufferAttribute(r,u);_vC$1.fromBufferAttribute(r,h);const d=t.morphTargetInfluences;if(a&&d){_morphA.set(0,0,0);_morphB.set(0,0,0);_morphC.set(0,0,0);for(let t=0,e=a.length;t<e;t++){const e=d[t];const n=a[t];if(e===0)continue;_tempA.fromBufferAttribute(n,c);_tempB.fromBufferAttribute(n,u);_tempC.fromBufferAttribute(n,h);if(s){_morphA.addScaledVector(_tempA,e);_morphB.addScaledVector(_tempB,e);_morphC.addScaledVector(_tempC,e)}else{_morphA.addScaledVector(_tempA.sub(_vA$1),e);_morphB.addScaledVector(_tempB.sub(_vB$1),e);_morphC.addScaledVector(_tempC.sub(_vC$1),e)}}_vA$1.add(_morphA);_vB$1.add(_morphB);_vC$1.add(_morphC)}if(t.isSkinnedMesh){t.boneTransform(c,_vA$1);t.boneTransform(u,_vB$1);t.boneTransform(h,_vC$1)}const f=checkIntersection(t,e,n,i,_vA$1,_vB$1,_vC$1,_intersectionPoint);if(f){if(o){_uvA$1.fromBufferAttribute(o,c);_uvB$1.fromBufferAttribute(o,u);_uvC$1.fromBufferAttribute(o,h);f.uv=Triangle.getUV(_intersectionPoint,_vA$1,_vB$1,_vC$1,_uvA$1,_uvB$1,_uvC$1,new Vector2)}if(l){_uvA$1.fromBufferAttribute(l,c);_uvB$1.fromBufferAttribute(l,u);_uvC$1.fromBufferAttribute(l,h);f.uv2=Triangle.getUV(_intersectionPoint,_vA$1,_vB$1,_vC$1,_uvA$1,_uvB$1,_uvC$1,new Vector2)}const t={a:c,b:u,c:h,normal:new Vector3$1,materialIndex:0};Triangle.getNormal(_vA$1,_vB$1,_vC$1,t.normal);f.face=t}return f}class BoxGeometry$1 extends BufferGeometry$1{constructor(t=1,e=1,n=1,i=1,r=1,a=1){super();this.type="BoxGeometry";this.parameters={width:t,height:e,depth:n,widthSegments:i,heightSegments:r,depthSegments:a};const s=this;i=Math.floor(i);r=Math.floor(r);a=Math.floor(a);const o=[];const l=[];const c=[];const u=[];let h=0;let d=0;f("z","y","x",-1,-1,n,e,t,a,r,0);f("z","y","x",1,-1,n,e,-t,a,r,1);f("x","z","y",1,1,t,n,e,i,a,2);f("x","z","y",1,-1,t,n,-e,i,a,3);f("x","y","z",1,-1,t,e,n,i,r,4);f("x","y","z",-1,-1,t,e,-n,i,r,5);this.setIndex(o);this.setAttribute("position",new Float32BufferAttribute$1(l,3));this.setAttribute("normal",new Float32BufferAttribute$1(c,3));this.setAttribute("uv",new Float32BufferAttribute$1(u,2));function f(t,e,n,i,r,a,f,p,m,g,_){const y=a/m;const x=f/g;const v=a/2;const b=f/2;const M=p/2;const w=m+1;const S=g+1;let A=0;let T=0;const E=new Vector3$1;for(let a=0;a<S;a++){const s=a*x-b;for(let o=0;o<w;o++){const h=o*y-v;E[t]=h*i;E[e]=s*r;E[n]=M;l.push(E.x,E.y,E.z);E[t]=0;E[e]=0;E[n]=p>0?1:-1;c.push(E.x,E.y,E.z);u.push(o/m);u.push(1-a/g);A+=1}}for(let t=0;t<g;t++){for(let e=0;e<m;e++){const n=h+e+w*t;const i=h+e+w*(t+1);const r=h+(e+1)+w*(t+1);const a=h+(e+1)+w*t;o.push(n,i,a);o.push(i,r,a);T+=6}}s.addGroup(d,T,_);d+=T;h+=A}}static fromJSON(t){return new BoxGeometry$1(t.width,t.height,t.depth,t.widthSegments,t.heightSegments,t.depthSegments)}}function cloneUniforms(t){const e={};for(const n in t){e[n]={};for(const i in t[n]){const r=t[n][i];if(r&&(r.isColor||r.isMatrix3||r.isMatrix4||r.isVector2||r.isVector3||r.isVector4||r.isTexture||r.isQuaternion)){e[n][i]=r.clone()}else if(Array.isArray(r)){e[n][i]=r.slice()}else{e[n][i]=r}}}return e}function mergeUniforms(t){const e={};for(let n=0;n<t.length;n++){const i=cloneUniforms(t[n]);for(const t in i){e[t]=i[t]}}return e}const UniformsUtils={clone:cloneUniforms,merge:mergeUniforms};var default_vertex="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";var default_fragment="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";class ShaderMaterial extends Material{constructor(t){super();this.type="ShaderMaterial";this.defines={};this.uniforms={};this.vertexShader=default_vertex;this.fragmentShader=default_fragment;this.linewidth=1;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;this.lights=false;this.clipping=false;this.extensions={derivatives:false,fragDepth:false,drawBuffers:false,shaderTextureLOD:false};this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv2:[0,0]};this.index0AttributeName=undefined;this.uniformsNeedUpdate=false;this.glslVersion=null;if(t!==undefined){if(t.attributes!==undefined){console.error("THREE.ShaderMaterial: attributes should now be defined in THREE.BufferGeometry instead.")}this.setValues(t)}}copy(t){super.copy(t);this.fragmentShader=t.fragmentShader;this.vertexShader=t.vertexShader;this.uniforms=cloneUniforms(t.uniforms);this.defines=Object.assign({},t.defines);this.wireframe=t.wireframe;this.wireframeLinewidth=t.wireframeLinewidth;this.lights=t.lights;this.clipping=t.clipping;this.extensions=Object.assign({},t.extensions);this.glslVersion=t.glslVersion;return this}toJSON(t){const e=super.toJSON(t);e.glslVersion=this.glslVersion;e.uniforms={};for(const n in this.uniforms){const i=this.uniforms[n];const r=i.value;if(r&&r.isTexture){e.uniforms[n]={type:"t",value:r.toJSON(t).uuid}}else if(r&&r.isColor){e.uniforms[n]={type:"c",value:r.getHex()}}else if(r&&r.isVector2){e.uniforms[n]={type:"v2",value:r.toArray()}}else if(r&&r.isVector3){e.uniforms[n]={type:"v3",value:r.toArray()}}else if(r&&r.isVector4){e.uniforms[n]={type:"v4",value:r.toArray()}}else if(r&&r.isMatrix3){e.uniforms[n]={type:"m3",value:r.toArray()}}else if(r&&r.isMatrix4){e.uniforms[n]={type:"m4",value:r.toArray()}}else{e.uniforms[n]={value:r}}}if(Object.keys(this.defines).length>0)e.defines=this.defines;e.vertexShader=this.vertexShader;e.fragmentShader=this.fragmentShader;const n={};for(const t in this.extensions){if(this.extensions[t]===true)n[t]=true}if(Object.keys(n).length>0)e.extensions=n;return e}}ShaderMaterial.prototype.isShaderMaterial=true;class Camera extends Object3D$1{constructor(){super();this.type="Camera";this.matrixWorldInverse=new Matrix4$1;this.projectionMatrix=new Matrix4$1;this.projectionMatrixInverse=new Matrix4$1}copy(t,e){super.copy(t,e);this.matrixWorldInverse.copy(t.matrixWorldInverse);this.projectionMatrix.copy(t.projectionMatrix);this.projectionMatrixInverse.copy(t.projectionMatrixInverse);return this}getWorldDirection(t){this.updateWorldMatrix(true,false);const e=this.matrixWorld.elements;return t.set(-e[8],-e[9],-e[10]).normalize()}updateMatrixWorld(t){super.updateMatrixWorld(t);this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e);this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}Camera.prototype.isCamera=true;class PerspectiveCamera extends Camera{constructor(t=50,e=1,n=.1,i=2e3){super();this.type="PerspectiveCamera";this.fov=t;this.zoom=1;this.near=n;this.far=i;this.focus=10;this.aspect=e;this.view=null;this.filmGauge=35;this.filmOffset=0;this.updateProjectionMatrix()}copy(t,e){super.copy(t,e);this.fov=t.fov;this.zoom=t.zoom;this.near=t.near;this.far=t.far;this.focus=t.focus;this.aspect=t.aspect;this.view=t.view===null?null:Object.assign({},t.view);this.filmGauge=t.filmGauge;this.filmOffset=t.filmOffset;return this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=RAD2DEG*2*Math.atan(e);this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(DEG2RAD*.5*this.fov);return.5*this.getFilmHeight()/t}getEffectiveFOV(){return RAD2DEG*2*Math.atan(Math.tan(DEG2RAD*.5*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}setViewOffset(t,e,n,i,r,a){this.aspect=t/e;if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}}this.view.enabled=true;this.view.fullWidth=t;this.view.fullHeight=e;this.view.offsetX=n;this.view.offsetY=i;this.view.width=r;this.view.height=a;this.updateProjectionMatrix()}clearViewOffset(){if(this.view!==null){this.view.enabled=false}this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(DEG2RAD*.5*this.fov)/this.zoom;let n=2*e;let i=this.aspect*n;let r=-.5*i;const a=this.view;if(this.view!==null&&this.view.enabled){const t=a.fullWidth,s=a.fullHeight;r+=a.offsetX*i/t;e-=a.offsetY*n/s;i*=a.width/t;n*=a.height/s}const s=this.filmOffset;if(s!==0)r+=t*s/this.getFilmWidth();this.projectionMatrix.makePerspective(r,r+i,e,e-n,t,this.far);this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);e.object.fov=this.fov;e.object.zoom=this.zoom;e.object.near=this.near;e.object.far=this.far;e.object.focus=this.focus;e.object.aspect=this.aspect;if(this.view!==null)e.object.view=Object.assign({},this.view);e.object.filmGauge=this.filmGauge;e.object.filmOffset=this.filmOffset;return e}}PerspectiveCamera.prototype.isPerspectiveCamera=true;const fov=90,aspect=1;class CubeCamera extends Object3D$1{constructor(t,e,n){super();this.type="CubeCamera";if(n.isWebGLCubeRenderTarget!==true){console.error("THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.");return}this.renderTarget=n;const i=new PerspectiveCamera(fov,aspect,t,e);i.layers=this.layers;i.up.set(0,-1,0);i.lookAt(new Vector3$1(1,0,0));this.add(i);const r=new PerspectiveCamera(fov,aspect,t,e);r.layers=this.layers;r.up.set(0,-1,0);r.lookAt(new Vector3$1(-1,0,0));this.add(r);const a=new PerspectiveCamera(fov,aspect,t,e);a.layers=this.layers;a.up.set(0,0,1);a.lookAt(new Vector3$1(0,1,0));this.add(a);const s=new PerspectiveCamera(fov,aspect,t,e);s.layers=this.layers;s.up.set(0,0,-1);s.lookAt(new Vector3$1(0,-1,0));this.add(s);const o=new PerspectiveCamera(fov,aspect,t,e);o.layers=this.layers;o.up.set(0,-1,0);o.lookAt(new Vector3$1(0,0,1));this.add(o);const l=new PerspectiveCamera(fov,aspect,t,e);l.layers=this.layers;l.up.set(0,-1,0);l.lookAt(new Vector3$1(0,0,-1));this.add(l)}update(t,e){if(this.parent===null)this.updateMatrixWorld();const n=this.renderTarget;const[i,r,a,s,o,l]=this.children;const c=t.xr.enabled;const u=t.getRenderTarget();t.xr.enabled=false;const h=n.texture.generateMipmaps;n.texture.generateMipmaps=false;t.setRenderTarget(n,0);t.render(e,i);t.setRenderTarget(n,1);t.render(e,r);t.setRenderTarget(n,2);t.render(e,a);t.setRenderTarget(n,3);t.render(e,s);t.setRenderTarget(n,4);t.render(e,o);n.texture.generateMipmaps=h;t.setRenderTarget(n,5);t.render(e,l);t.setRenderTarget(u);t.xr.enabled=c;n.texture.needsPMREMUpdate=true}}class CubeTexture extends Texture{constructor(t,e,n,i,r,a,s,o,l,c){t=t!==undefined?t:[];e=e!==undefined?e:CubeReflectionMapping;super(t,e,n,i,r,a,s,o,l,c);this.flipY=false}get images(){return this.image}set images(t){this.image=t}}CubeTexture.prototype.isCubeTexture=true;class WebGLCubeRenderTarget extends WebGLRenderTarget{constructor(t,e={}){super(t,t,e);const n={width:t,height:t,depth:1};const i=[n,n,n,n,n,n];this.texture=new CubeTexture(i,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.encoding);this.texture.isRenderTargetTexture=true;this.texture.generateMipmaps=e.generateMipmaps!==undefined?e.generateMipmaps:false;this.texture.minFilter=e.minFilter!==undefined?e.minFilter:LinearFilter}fromEquirectangularTexture(t,e){this.texture.type=e.type;this.texture.format=RGBAFormat;this.texture.encoding=e.encoding;this.texture.generateMipmaps=e.generateMipmaps;this.texture.minFilter=e.minFilter;this.texture.magFilter=e.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:`\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t`,fragmentShader:`\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t`};const i=new BoxGeometry$1(5,5,5);const r=new ShaderMaterial({name:"CubemapFromEquirect",uniforms:cloneUniforms(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:BackSide,blending:NoBlending});r.uniforms.tEquirect.value=e;const a=new Mesh$1(i,r);const s=e.minFilter;if(e.minFilter===LinearMipmapLinearFilter)e.minFilter=LinearFilter;const o=new CubeCamera(1,10,this);o.update(t,a);e.minFilter=s;a.geometry.dispose();a.material.dispose();return this}clear(t,e,n,i){const r=t.getRenderTarget();for(let r=0;r<6;r++){t.setRenderTarget(this,r);t.clear(e,n,i)}t.setRenderTarget(r)}}WebGLCubeRenderTarget.prototype.isWebGLCubeRenderTarget=true;const _vector1=new Vector3$1;const _vector2=new Vector3$1;const _normalMatrix=new Matrix3;class Plane{constructor(t=new Vector3$1(1,0,0),e=0){this.normal=t;this.constant=e}set(t,e){this.normal.copy(t);this.constant=e;return this}setComponents(t,e,n,i){this.normal.set(t,e,n);this.constant=i;return this}setFromNormalAndCoplanarPoint(t,e){this.normal.copy(t);this.constant=-e.dot(this.normal);return this}setFromCoplanarPoints(t,e,n){const i=_vector1.subVectors(n,e).cross(_vector2.subVectors(t,e)).normalize();this.setFromNormalAndCoplanarPoint(i,t);return this}copy(t){this.normal.copy(t.normal);this.constant=t.constant;return this}normalize(){const t=1/this.normal.length();this.normal.multiplyScalar(t);this.constant*=t;return this}negate(){this.constant*=-1;this.normal.negate();return this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(this.normal).multiplyScalar(-this.distanceToPoint(t)).add(t)}intersectLine(t,e){const n=t.delta(_vector1);const i=this.normal.dot(n);if(i===0){if(this.distanceToPoint(t.start)===0){return e.copy(t.start)}return null}const r=-(t.start.dot(this.normal)+this.constant)/i;if(r<0||r>1){return null}return e.copy(n).multiplyScalar(r).add(t.start)}intersectsLine(t){const e=this.distanceToPoint(t.start);const n=this.distanceToPoint(t.end);return e<0&&n>0||n<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||_normalMatrix.getNormalMatrix(t);const i=this.coplanarPoint(_vector1).applyMatrix4(t);const r=this.normal.applyMatrix3(n).normalize();this.constant=-i.dot(r);return this}translate(t){this.constant-=t.dot(this.normal);return this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return(new this.constructor).copy(this)}}Plane.prototype.isPlane=true;const _sphere$2=new Sphere;const _vector$7=new Vector3$1;class Frustum{constructor(t=new Plane,e=new Plane,n=new Plane,i=new Plane,r=new Plane,a=new Plane){this.planes=[t,e,n,i,r,a]}set(t,e,n,i,r,a){const s=this.planes;s[0].copy(t);s[1].copy(e);s[2].copy(n);s[3].copy(i);s[4].copy(r);s[5].copy(a);return this}copy(t){const e=this.planes;for(let n=0;n<6;n++){e[n].copy(t.planes[n])}return this}setFromProjectionMatrix(t){const e=this.planes;const n=t.elements;const i=n[0],r=n[1],a=n[2],s=n[3];const o=n[4],l=n[5],c=n[6],u=n[7];const h=n[8],d=n[9],f=n[10],p=n[11];const m=n[12],g=n[13],_=n[14],y=n[15];e[0].setComponents(s-i,u-o,p-h,y-m).normalize();e[1].setComponents(s+i,u+o,p+h,y+m).normalize();e[2].setComponents(s+r,u+l,p+d,y+g).normalize();e[3].setComponents(s-r,u-l,p-d,y-g).normalize();e[4].setComponents(s-a,u-c,p-f,y-_).normalize();e[5].setComponents(s+a,u+c,p+f,y+_).normalize();return this}intersectsObject(t){const e=t.geometry;if(e.boundingSphere===null)e.computeBoundingSphere();_sphere$2.copy(e.boundingSphere).applyMatrix4(t.matrixWorld);return this.intersectsSphere(_sphere$2)}intersectsSprite(t){_sphere$2.center.set(0,0,0);_sphere$2.radius=.7071067811865476;_sphere$2.applyMatrix4(t.matrixWorld);return this.intersectsSphere(_sphere$2)}intersectsSphere(t){const e=this.planes;const n=t.center;const i=-t.radius;for(let t=0;t<6;t++){const r=e[t].distanceToPoint(n);if(r<i){return false}}return true}intersectsBox(t){const e=this.planes;for(let n=0;n<6;n++){const i=e[n];_vector$7.x=i.normal.x>0?t.max.x:t.min.x;_vector$7.y=i.normal.y>0?t.max.y:t.min.y;_vector$7.z=i.normal.z>0?t.max.z:t.min.z;if(i.distanceToPoint(_vector$7)<0){return false}}return true}containsPoint(t){const e=this.planes;for(let n=0;n<6;n++){if(e[n].distanceToPoint(t)<0){return false}}return true}clone(){return(new this.constructor).copy(this)}}function WebGLAnimation(){let t=null;let e=false;let n=null;let i=null;function r(e,a){n(e,a);i=t.requestAnimationFrame(r)}return{start:function(){if(e===true)return;if(n===null)return;i=t.requestAnimationFrame(r);e=true},stop:function(){t.cancelAnimationFrame(i);e=false},setAnimationLoop:function(t){n=t},setContext:function(e){t=e}}}function WebGLAttributes(t,e){const n=e.isWebGL2;const i=new WeakMap;function r(e,i){const r=e.array;const a=e.usage;const s=t.createBuffer();t.bindBuffer(i,s);t.bufferData(i,r,a);e.onUploadCallback();let o;if(r instanceof Float32Array){o=5126}else if(r instanceof Uint16Array){if(e.isFloat16BufferAttribute){if(n){o=5131}else{throw new Error("THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.")}}else{o=5123}}else if(r instanceof Int16Array){o=5122}else if(r instanceof Uint32Array){o=5125}else if(r instanceof Int32Array){o=5124}else if(r instanceof Int8Array){o=5120}else if(r instanceof Uint8Array){o=5121}else if(r instanceof Uint8ClampedArray){o=5121}else{throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+r)}return{buffer:s,type:o,bytesPerElement:r.BYTES_PER_ELEMENT,version:e.version}}function a(e,i,r){const a=i.array;const s=i.updateRange;t.bindBuffer(r,e);if(s.count===-1){t.bufferSubData(r,0,a)}else{if(n){t.bufferSubData(r,s.offset*a.BYTES_PER_ELEMENT,a,s.offset,s.count)}else{t.bufferSubData(r,s.offset*a.BYTES_PER_ELEMENT,a.subarray(s.offset,s.offset+s.count))}s.count=-1}}function s(t){if(t.isInterleavedBufferAttribute)t=t.data;return i.get(t)}function o(e){if(e.isInterleavedBufferAttribute)e=e.data;const n=i.get(e);if(n){t.deleteBuffer(n.buffer);i.delete(e)}}function l(t,e){if(t.isGLBufferAttribute){const e=i.get(t);if(!e||e.version<t.version){i.set(t,{buffer:t.buffer,type:t.type,bytesPerElement:t.elementSize,version:t.version})}return}if(t.isInterleavedBufferAttribute)t=t.data;const n=i.get(t);if(n===undefined){i.set(t,r(t,e))}else if(n.version<t.version){a(n.buffer,t,e);n.version=t.version}}return{get:s,remove:o,update:l}}class PlaneGeometry$1 extends BufferGeometry$1{constructor(t=1,e=1,n=1,i=1){super();this.type="PlaneGeometry";this.parameters={width:t,height:e,widthSegments:n,heightSegments:i};const r=t/2;const a=e/2;const s=Math.floor(n);const o=Math.floor(i);const l=s+1;const c=o+1;const u=t/s;const h=e/o;const d=[];const f=[];const p=[];const m=[];for(let t=0;t<c;t++){const e=t*h-a;for(let n=0;n<l;n++){const i=n*u-r;f.push(i,-e,0);p.push(0,0,1);m.push(n/s);m.push(1-t/o)}}for(let t=0;t<o;t++){for(let e=0;e<s;e++){const n=e+l*t;const i=e+l*(t+1);const r=e+1+l*(t+1);const a=e+1+l*t;d.push(n,i,a);d.push(i,r,a)}}this.setIndex(d);this.setAttribute("position",new Float32BufferAttribute$1(f,3));this.setAttribute("normal",new Float32BufferAttribute$1(p,3));this.setAttribute("uv",new Float32BufferAttribute$1(m,2))}static fromJSON(t){return new PlaneGeometry$1(t.width,t.height,t.widthSegments,t.heightSegments)}}var alphamap_fragment="#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vUv ).g;\n#endif";var alphamap_pars_fragment="#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";var alphatest_fragment="#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif";var alphatest_pars_fragment="#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif";var aomap_fragment="#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif";var aomap_pars_fragment="#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";var begin_vertex="vec3 transformed = vec3( position );";var beginnormal_vertex="vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";var bsdfs="vec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 f0, const in float f90, const in float roughness ) {\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D = D_GGX( alpha, dotNH );\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif";var bumpmap_pars_fragment="#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vUv );\n\t\tvec2 dSTdy = dFdy( vUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY = vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";var clipping_planes_fragment="#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";var clipping_planes_pars_fragment="#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";var clipping_planes_pars_vertex="#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";var clipping_planes_vertex="#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";var color_fragment="#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif";var color_pars_fragment="#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif";var color_pars_vertex="#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif";var color_vertex="#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif";var common="#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights = vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}";var cube_uv_reflection_fragment="#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\tvec2 uv = getUV( direction, face ) * ( faceSize - 1.0 ) + 0.5;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= r1 ) {\n\t\t\tmip = ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness >= r4 ) {\n\t\t\tmip = ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness >= r5 ) {\n\t\t\tmip = ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness >= r6 ) {\n\t\t\tmip = ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";var defaultnormal_vertex="vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";var displacementmap_pars_vertex="#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";var displacementmap_vertex="#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif";var emissivemap_fragment="#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";var emissivemap_pars_fragment="#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";var encodings_fragment="gl_FragColor = linearToOutputTexel( gl_FragColor );";var encodings_pars_fragment="vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";var envmap_fragment="#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor = textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";var envmap_common_pars_fragment="#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";var envmap_pars_fragment="#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";var envmap_pars_vertex="#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";var envmap_vertex="#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";var fog_vertex="#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif";var fog_pars_vertex="#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif";var fog_fragment="#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";var fog_pars_fragment="#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";var gradientmap_pars_fragment="#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\treturn ( coord.x < 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}";var lightmap_fragment="#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tlightMapIrradiance *= PI;\n\t#endif\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";var lightmap_pars_fragment="#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";var lights_lambert_vertex="vec3 diffuse = vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position = mvPosition.xyz;\ngeometry.normal = normalize( transformedNormal );\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext backGeometry;\nbackGeometry.position = geometry.position;\nbackGeometry.normal = -geometry.normal;\nbackGeometry.viewDir = geometry.viewDir;\nvLightFront = vec3( 0.0 );\nvIndirectFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack = vec3( 0.0 );\n\tvIndirectBack = vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront += getAmbientLightIrradiance( ambientLightColor );\nvIndirectFront += getLightProbeIrradiance( lightProbe, geometry.normal );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack += getAmbientLightIrradiance( ambientLightColor );\n\tvIndirectBack += getLightProbeIrradiance( lightProbe, backGeometry.normal );\n#endif\n#if NUM_POINT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointLightInfo( pointLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotLightInfo( spotLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalLightInfo( directionalLights[ i ], geometry, directLight );\n\t\tdotNL = dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse = directLight.color;\n\t\tvLightFront += saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack += saturate( - dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack += getHemisphereLightIrradiance( hemisphereLights[ i ], backGeometry.normal );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif";var lights_pars_begin="uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#else\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif";var envmap_physical_pars_fragment="#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#if defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec3 reflectVec;\n\t\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\t\treflectVec = reflect( - viewDir, normal );\n\t\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\t#else\n\t\t\t\treflectVec = refract( - viewDir, normal, refractionRatio );\n\t\t\t#endif\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n#endif";var lights_toon_fragment="ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";var lights_toon_pars_fragment="varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)";var lights_phong_fragment="BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";var lights_phong_pars_fragment="varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)";var lights_physical_fragment="PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\t#ifdef SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULARINTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vUv ).a;\n\t\t#endif\n\t\t#ifdef USE_SPECULARCOLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vUv ).rgb;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vUv ).a;\n\t#endif\n#endif";var lights_physical_pars_fragment="struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\tvec3 FssEss = specularColor * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularF90, material.roughness );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";var lights_fragment_begin="\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";var lights_fragment_maps="#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *= PI;\n\t\t#endif\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif";var lights_fragment_end="#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";var logdepthbuf_fragment="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";var logdepthbuf_pars_fragment="#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";var logdepthbuf_pars_vertex="#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";var logdepthbuf_vertex="#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";var map_fragment="#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif";var map_pars_fragment="#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";var map_particle_fragment="#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";var map_particle_pars_fragment="#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";var metalnessmap_fragment="float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";var metalnessmap_pars_fragment="#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";var morphcolor_vertex="#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ]\n\t\t#endif\n\t}\n#endif";var morphnormal_vertex="#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif";var morphtarget_pars_vertex="#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform vec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tfloat texelIndex = float( vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset );\n\t\t\tfloat y = floor( texelIndex / morphTargetsTextureSize.x );\n\t\t\tfloat x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tvec3 morphUV = vec3( ( x + 0.5 ) / morphTargetsTextureSize.x, y / morphTargetsTextureSize.y, morphTargetIndex );\n\t\t\treturn texture( morphTargetsTexture, morphUV );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif";var morphtarget_vertex="#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif";var normal_fragment_begin="float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy = vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent = normalize( vTangent );\n\t\tvec3 bitangent = normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent = tangent * faceDirection;\n\t\t\tbitangent = bitangent * faceDirection;\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN = mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal = normal;";var normal_fragment_maps="#ifdef OBJECTSPACE_NORMALMAP\n\tnormal = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal = normalize( vTBN * mapN );\n\t#else\n\t\tnormal = perturbNormal2Arb( - vViewPosition, normal, mapN, faceDirection );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";var normal_pars_fragment="#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";var normal_pars_vertex="#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";var normal_vertex="#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif";var normalmap_pars_fragment="#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN, float faceDirection ) {\n\t\tvec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 = dFdx( vUv.st );\n\t\tvec2 st1 = dFdy( vUv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : faceDirection * inversesqrt( det );\n\t\treturn normalize( T * ( mapN.x * scale ) + B * ( mapN.y * scale ) + N * mapN.z );\n\t}\n#endif";var clearcoat_normal_fragment_begin="#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";var clearcoat_normal_fragment_maps="#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal = normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal = perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN, faceDirection );\n\t#endif\n#endif";var clearcoat_pars_fragment="#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif";var output_fragment="#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= transmissionAlpha + 0.1;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";var packing="vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}";var premultiplied_alpha_fragment="#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";var project_vertex="vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";var dithering_fragment="#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";var dithering_pars_fragment="#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";var roughnessmap_fragment="float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";var roughnessmap_pars_fragment="#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";var shadowmap_pars_fragment="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\n\t\tbool inFrustum = all( inFrustumVec );\n\t\tbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n\t\tbool frustumTest = all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";var shadowmap_pars_vertex="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";var shadowmap_vertex="#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0 || NUM_SPOT_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0\n\t\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] = spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif";var shadowmask_pars_fragment="float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";var skinbase_vertex="#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";var skinning_pars_vertex="#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j = i * 4.0;\n\t\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\t\ty = dy * ( y + 0.5 );\n\t\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone = boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif";var skinning_vertex="#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";var skinnormal_vertex="#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";var specularmap_fragment="float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";var specularmap_pars_fragment="#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";var tonemapping_fragment="#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";var tonemapping_pars_fragment="#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";var transmission_fragment="#ifdef USE_TRANSMISSION\n\tfloat transmissionAlpha = 1.0;\n\tfloat transmissionFactor = transmission;\n\tfloat thicknessFactor = thickness;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\ttransmissionFactor *= texture2D( transmissionMap, vUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tthicknessFactor *= texture2D( thicknessMap, vUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmission = getIBLVolumeRefraction(\n\t\tn, v, roughnessFactor, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, ior, thicknessFactor,\n\t\tattenuationColor, attenuationDistance );\n\ttotalDiffuse = mix( totalDiffuse, transmission.rgb, transmissionFactor );\n\ttransmissionAlpha = mix( transmissionAlpha, transmission.a, transmissionFactor );\n#endif";var transmission_pars_fragment="#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat framebufferLod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\t#ifdef texture2DLodEXT\n\t\t\treturn texture2DLodEXT( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#else\n\t\t\treturn texture2D( transmissionSamplerMap, fragCoord.xy, framebufferLod );\n\t\t#endif\n\t}\n\tvec3 applyVolumeAttenuation( const in vec3 radiance, const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( attenuationDistance == 0.0 ) {\n\t\t\treturn radiance;\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance * radiance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 attenuatedColor = applyVolumeAttenuation( transmittedLight.rgb, length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor * diffuseColor, transmittedLight.a );\n\t}\n#endif";var uv_pars_fragment="#if ( defined( USE_UV ) && ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif";var uv_pars_vertex="#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif";var uv_vertex="#ifdef USE_UV\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif";var uv2_pars_fragment="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif";var uv2_pars_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif";var uv2_vertex="#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 = ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif";var worldpos_vertex="#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION )\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";const vertex$g="varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";const fragment$g="uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tgl_FragColor = texture2D( t2D, vUv );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";const vertex$f="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";const fragment$f="#include <envmap_common_pars_fragment>\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\tvec3 vReflect = vWorldDirection;\n\t#include <envmap_fragment>\n\tgl_FragColor = envColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";const vertex$e="#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";const fragment$e="#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}";const vertex$d="#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";const fragment$d="#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";const vertex$c="varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";const fragment$c="uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n}";const vertex$b="uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";const fragment$b="uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";const vertex$a="#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";const fragment$a="uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel= texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const vertex$9="#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <envmap_pars_vertex>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <lights_lambert_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";const fragment$9="uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <fog_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <emissivemap_fragment>\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse += vIndirectFront;\n\t#endif\n\t#include <lightmap_fragment>\n\treflectedLight.indirectDiffuse *= BRDF_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse = vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *= BRDF_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const vertex$8="#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";const fragment$8="#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const vertex$7="#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";const fragment$7="#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}";const vertex$6="#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";const fragment$6="#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <cube_uv_reflection_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const vertex$5="#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}";const fragment$5="#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULARINTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n\t#ifdef USE_SPECULARCOLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEENCOLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEENROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <bsdfs>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const vertex$4="#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <uv2_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <uv2_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";const fragment$4="#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <uv2_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";const vertex$3="uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";const fragment$3="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";const vertex$2="#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";const fragment$2="uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";const vertex$1="uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";const fragment$1="uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <output_fragment>\n\t#include <tonemapping_fragment>\n\t#include <encodings_fragment>\n\t#include <fog_fragment>\n}";const ShaderChunk={alphamap_fragment:alphamap_fragment,alphamap_pars_fragment:alphamap_pars_fragment,alphatest_fragment:alphatest_fragment,alphatest_pars_fragment:alphatest_pars_fragment,aomap_fragment:aomap_fragment,aomap_pars_fragment:aomap_pars_fragment,begin_vertex:begin_vertex,beginnormal_vertex:beginnormal_vertex,bsdfs:bsdfs,bumpmap_pars_fragment:bumpmap_pars_fragment,clipping_planes_fragment:clipping_planes_fragment,clipping_planes_pars_fragment:clipping_planes_pars_fragment,clipping_planes_pars_vertex:clipping_planes_pars_vertex,clipping_planes_vertex:clipping_planes_vertex,color_fragment:color_fragment,color_pars_fragment:color_pars_fragment,color_pars_vertex:color_pars_vertex,color_vertex:color_vertex,common:common,cube_uv_reflection_fragment:cube_uv_reflection_fragment,defaultnormal_vertex:defaultnormal_vertex,displacementmap_pars_vertex:displacementmap_pars_vertex,displacementmap_vertex:displacementmap_vertex,emissivemap_fragment:emissivemap_fragment,emissivemap_pars_fragment:emissivemap_pars_fragment,encodings_fragment:encodings_fragment,encodings_pars_fragment:encodings_pars_fragment,envmap_fragment:envmap_fragment,envmap_common_pars_fragment:envmap_common_pars_fragment,envmap_pars_fragment:envmap_pars_fragment,envmap_pars_vertex:envmap_pars_vertex,envmap_physical_pars_fragment:envmap_physical_pars_fragment,envmap_vertex:envmap_vertex,fog_vertex:fog_vertex,fog_pars_vertex:fog_pars_vertex,fog_fragment:fog_fragment,fog_pars_fragment:fog_pars_fragment,gradientmap_pars_fragment:gradientmap_pars_fragment,lightmap_fragment:lightmap_fragment,lightmap_pars_fragment:lightmap_pars_fragment,lights_lambert_vertex:lights_lambert_vertex,lights_pars_begin:lights_pars_begin,lights_toon_fragment:lights_toon_fragment,lights_toon_pars_fragment:lights_toon_pars_fragment,lights_phong_fragment:lights_phong_fragment,lights_phong_pars_fragment:lights_phong_pars_fragment,lights_physical_fragment:lights_physical_fragment,lights_physical_pars_fragment:lights_physical_pars_fragment,lights_fragment_begin:lights_fragment_begin,lights_fragment_maps:lights_fragment_maps,lights_fragment_end:lights_fragment_end,logdepthbuf_fragment:logdepthbuf_fragment,logdepthbuf_pars_fragment:logdepthbuf_pars_fragment,logdepthbuf_pars_vertex:logdepthbuf_pars_vertex,logdepthbuf_vertex:logdepthbuf_vertex,map_fragment:map_fragment,map_pars_fragment:map_pars_fragment,map_particle_fragment:map_particle_fragment,map_particle_pars_fragment:map_particle_pars_fragment,metalnessmap_fragment:metalnessmap_fragment,metalnessmap_pars_fragment:metalnessmap_pars_fragment,morphcolor_vertex:morphcolor_vertex,morphnormal_vertex:morphnormal_vertex,morphtarget_pars_vertex:morphtarget_pars_vertex,morphtarget_vertex:morphtarget_vertex,normal_fragment_begin:normal_fragment_begin,normal_fragment_maps:normal_fragment_maps,normal_pars_fragment:normal_pars_fragment,normal_pars_vertex:normal_pars_vertex,normal_vertex:normal_vertex,normalmap_pars_fragment:normalmap_pars_fragment,clearcoat_normal_fragment_begin:clearcoat_normal_fragment_begin,clearcoat_normal_fragment_maps:clearcoat_normal_fragment_maps,clearcoat_pars_fragment:clearcoat_pars_fragment,output_fragment:output_fragment,packing:packing,premultiplied_alpha_fragment:premultiplied_alpha_fragment,project_vertex:project_vertex,dithering_fragment:dithering_fragment,dithering_pars_fragment:dithering_pars_fragment,roughnessmap_fragment:roughnessmap_fragment,roughnessmap_pars_fragment:roughnessmap_pars_fragment,shadowmap_pars_fragment:shadowmap_pars_fragment,shadowmap_pars_vertex:shadowmap_pars_vertex,shadowmap_vertex:shadowmap_vertex,shadowmask_pars_fragment:shadowmask_pars_fragment,skinbase_vertex:skinbase_vertex,skinning_pars_vertex:skinning_pars_vertex,skinning_vertex:skinning_vertex,skinnormal_vertex:skinnormal_vertex,specularmap_fragment:specularmap_fragment,specularmap_pars_fragment:specularmap_pars_fragment,tonemapping_fragment:tonemapping_fragment,tonemapping_pars_fragment:tonemapping_pars_fragment,transmission_fragment:transmission_fragment,transmission_pars_fragment:transmission_pars_fragment,uv_pars_fragment:uv_pars_fragment,uv_pars_vertex:uv_pars_vertex,uv_vertex:uv_vertex,uv2_pars_fragment:uv2_pars_fragment,uv2_pars_vertex:uv2_pars_vertex,uv2_vertex:uv2_vertex,worldpos_vertex:worldpos_vertex,background_vert:vertex$g,background_frag:fragment$g,cube_vert:vertex$f,cube_frag:fragment$f,depth_vert:vertex$e,depth_frag:fragment$e,distanceRGBA_vert:vertex$d,distanceRGBA_frag:fragment$d,equirect_vert:vertex$c,equirect_frag:fragment$c,linedashed_vert:vertex$b,linedashed_frag:fragment$b,meshbasic_vert:vertex$a,meshbasic_frag:fragment$a,meshlambert_vert:vertex$9,meshlambert_frag:fragment$9,meshmatcap_vert:vertex$8,meshmatcap_frag:fragment$8,meshnormal_vert:vertex$7,meshnormal_frag:fragment$7,meshphong_vert:vertex$6,meshphong_frag:fragment$6,meshphysical_vert:vertex$5,meshphysical_frag:fragment$5,meshtoon_vert:vertex$4,meshtoon_frag:fragment$4,points_vert:vertex$3,points_frag:fragment$3,shadow_vert:vertex$2,shadow_frag:fragment$2,sprite_vert:vertex$1,sprite_frag:fragment$1};const UniformsLib={common:{diffuse:{value:new Color$1(16777215)},opacity:{value:1},map:{value:null},uvTransform:{value:new Matrix3},uv2Transform:{value:new Matrix3},alphaMap:{value:null},alphaTest:{value:0}},specularmap:{specularMap:{value:null}},envmap:{envMap:{value:null},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1}},emissivemap:{emissiveMap:{value:null}},bumpmap:{bumpMap:{value:null},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalScale:{value:new Vector2(1,1)}},displacementmap:{displacementMap:{value:null},displacementScale:{value:1},displacementBias:{value:0}},roughnessmap:{roughnessMap:{value:null}},metalnessmap:{metalnessMap:{value:null}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new Color$1(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotShadowMap:{value:[]},spotShadowMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new Color$1(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new Matrix3}},sprite:{diffuse:{value:new Color$1(16777215)},opacity:{value:1},center:{value:new Vector2(.5,.5)},rotation:{value:0},map:{value:null},alphaMap:{value:null},alphaTest:{value:0},uvTransform:{value:new Matrix3}}};const ShaderLib={basic:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.fog]),vertexShader:ShaderChunk.meshbasic_vert,fragmentShader:ShaderChunk.meshbasic_frag},lambert:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color$1(0)}}]),vertexShader:ShaderChunk.meshlambert_vert,fragmentShader:ShaderChunk.meshlambert_frag},phong:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.specularmap,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color$1(0)},specular:{value:new Color$1(1118481)},shininess:{value:30}}]),vertexShader:ShaderChunk.meshphong_vert,fragmentShader:ShaderChunk.meshphong_frag},standard:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.envmap,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.roughnessmap,UniformsLib.metalnessmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color$1(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag},toon:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.aomap,UniformsLib.lightmap,UniformsLib.emissivemap,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.gradientmap,UniformsLib.fog,UniformsLib.lights,{emissive:{value:new Color$1(0)}}]),vertexShader:ShaderChunk.meshtoon_vert,fragmentShader:ShaderChunk.meshtoon_frag},matcap:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,UniformsLib.fog,{matcap:{value:null}}]),vertexShader:ShaderChunk.meshmatcap_vert,fragmentShader:ShaderChunk.meshmatcap_frag},points:{uniforms:mergeUniforms([UniformsLib.points,UniformsLib.fog]),vertexShader:ShaderChunk.points_vert,fragmentShader:ShaderChunk.points_frag},dashed:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:ShaderChunk.linedashed_vert,fragmentShader:ShaderChunk.linedashed_frag},depth:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.displacementmap]),vertexShader:ShaderChunk.depth_vert,fragmentShader:ShaderChunk.depth_frag},normal:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.bumpmap,UniformsLib.normalmap,UniformsLib.displacementmap,{opacity:{value:1}}]),vertexShader:ShaderChunk.meshnormal_vert,fragmentShader:ShaderChunk.meshnormal_frag},sprite:{uniforms:mergeUniforms([UniformsLib.sprite,UniformsLib.fog]),vertexShader:ShaderChunk.sprite_vert,fragmentShader:ShaderChunk.sprite_frag},background:{uniforms:{uvTransform:{value:new Matrix3},t2D:{value:null}},vertexShader:ShaderChunk.background_vert,fragmentShader:ShaderChunk.background_frag},cube:{uniforms:mergeUniforms([UniformsLib.envmap,{opacity:{value:1}}]),vertexShader:ShaderChunk.cube_vert,fragmentShader:ShaderChunk.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:ShaderChunk.equirect_vert,fragmentShader:ShaderChunk.equirect_frag},distanceRGBA:{uniforms:mergeUniforms([UniformsLib.common,UniformsLib.displacementmap,{referencePosition:{value:new Vector3$1},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:ShaderChunk.distanceRGBA_vert,fragmentShader:ShaderChunk.distanceRGBA_frag},shadow:{uniforms:mergeUniforms([UniformsLib.lights,UniformsLib.fog,{color:{value:new Color$1(0)},opacity:{value:1}}]),vertexShader:ShaderChunk.shadow_vert,fragmentShader:ShaderChunk.shadow_frag}};ShaderLib.physical={uniforms:mergeUniforms([ShaderLib.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatNormalScale:{value:new Vector2(1,1)},clearcoatNormalMap:{value:null},sheen:{value:0},sheenColor:{value:new Color$1(0)},sheenColorMap:{value:null},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},transmission:{value:0},transmissionMap:{value:null},transmissionSamplerSize:{value:new Vector2},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},attenuationDistance:{value:0},attenuationColor:{value:new Color$1(0)},specularIntensity:{value:1},specularIntensityMap:{value:null},specularColor:{value:new Color$1(1,1,1)},specularColorMap:{value:null}}]),vertexShader:ShaderChunk.meshphysical_vert,fragmentShader:ShaderChunk.meshphysical_frag};function WebGLBackground(t,e,n,i,r,a){const s=new Color$1(0);let o=r===true?0:1;let l;let c;let u=null;let h=0;let d=null;function f(n,r){let a=false;let f=r.isScene===true?r.background:null;if(f&&f.isTexture){f=e.get(f)}const m=t.xr;const g=m.getSession&&m.getSession();if(g&&g.environmentBlendMode==="additive"){f=null}if(f===null){p(s,o)}else if(f&&f.isColor){p(f,1);a=true}if(t.autoClear||a){t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil)}if(f&&(f.isCubeTexture||f.mapping===CubeUVReflectionMapping)){if(c===undefined){c=new Mesh$1(new BoxGeometry$1(1,1,1),new ShaderMaterial({name:"BackgroundCubeMaterial",uniforms:cloneUniforms(ShaderLib.cube.uniforms),vertexShader:ShaderLib.cube.vertexShader,fragmentShader:ShaderLib.cube.fragmentShader,side:BackSide,depthTest:false,depthWrite:false,fog:false}));c.geometry.deleteAttribute("normal");c.geometry.deleteAttribute("uv");c.onBeforeRender=function(t,e,n){this.matrixWorld.copyPosition(n.matrixWorld)};Object.defineProperty(c.material,"envMap",{get:function(){return this.uniforms.envMap.value}});i.update(c)}c.material.uniforms.envMap.value=f;c.material.uniforms.flipEnvMap.value=f.isCubeTexture&&f.isRenderTargetTexture===false?-1:1;if(u!==f||h!==f.version||d!==t.toneMapping){c.material.needsUpdate=true;u=f;h=f.version;d=t.toneMapping}n.unshift(c,c.geometry,c.material,0,0,null)}else if(f&&f.isTexture){if(l===undefined){l=new Mesh$1(new PlaneGeometry$1(2,2),new ShaderMaterial({name:"BackgroundMaterial",uniforms:cloneUniforms(ShaderLib.background.uniforms),vertexShader:ShaderLib.background.vertexShader,fragmentShader:ShaderLib.background.fragmentShader,side:FrontSide,depthTest:false,depthWrite:false,fog:false}));l.geometry.deleteAttribute("normal");Object.defineProperty(l.material,"map",{get:function(){return this.uniforms.t2D.value}});i.update(l)}l.material.uniforms.t2D.value=f;if(f.matrixAutoUpdate===true){f.updateMatrix()}l.material.uniforms.uvTransform.value.copy(f.matrix);if(u!==f||h!==f.version||d!==t.toneMapping){l.material.needsUpdate=true;u=f;h=f.version;d=t.toneMapping}n.unshift(l,l.geometry,l.material,0,0,null)}}function p(t,e){n.buffers.color.setClear(t.r,t.g,t.b,e,a)}return{getClearColor:function(){return s},setClearColor:function(t,e=1){s.set(t);o=e;p(s,o)},getClearAlpha:function(){return o},setClearAlpha:function(t){o=t;p(s,o)},render:f}}function WebGLBindingStates(t,e,n,i){const r=t.getParameter(34921);const a=i.isWebGL2?null:e.get("OES_vertex_array_object");const s=i.isWebGL2||a!==null;const o={};const l=m(null);let c=l;function u(e,i,r,a,o){let l=false;if(s){const t=p(a,r,i);if(c!==t){c=t;d(c.object)}l=g(a,o);if(l)_(a,o)}else{const t=i.wireframe===true;if(c.geometry!==a.id||c.program!==r.id||c.wireframe!==t){c.geometry=a.id;c.program=r.id;c.wireframe=t;l=true}}if(e.isInstancedMesh===true){l=true}if(o!==null){n.update(o,34963)}if(l){w(e,i,r,a);if(o!==null){t.bindBuffer(34963,n.get(o).buffer)}}}function h(){if(i.isWebGL2)return t.createVertexArray();return a.createVertexArrayOES()}function d(e){if(i.isWebGL2)return t.bindVertexArray(e);return a.bindVertexArrayOES(e)}function f(e){if(i.isWebGL2)return t.deleteVertexArray(e);return a.deleteVertexArrayOES(e)}function p(t,e,n){const i=n.wireframe===true;let r=o[t.id];if(r===undefined){r={};o[t.id]=r}let a=r[e.id];if(a===undefined){a={};r[e.id]=a}let s=a[i];if(s===undefined){s=m(h());a[i]=s}return s}function m(t){const e=[];const n=[];const i=[];for(let t=0;t<r;t++){e[t]=0;n[t]=0;i[t]=0}return{geometry:null,program:null,wireframe:false,newAttributes:e,enabledAttributes:n,attributeDivisors:i,object:t,attributes:{},index:null}}function g(t,e){const n=c.attributes;const i=t.attributes;let r=0;for(const t in i){const e=n[t];const a=i[t];if(e===undefined)return true;if(e.attribute!==a)return true;if(e.data!==a.data)return true;r++}if(c.attributesNum!==r)return true;if(c.index!==e)return true;return false}function _(t,e){const n={};const i=t.attributes;let r=0;for(const t in i){const e=i[t];const a={};a.attribute=e;if(e.data){a.data=e.data}n[t]=a;r++}c.attributes=n;c.attributesNum=r;c.index=e}function y(){const t=c.newAttributes;for(let e=0,n=t.length;e<n;e++){t[e]=0}}function x(t){v(t,0)}function v(n,r){const a=c.newAttributes;const s=c.enabledAttributes;const o=c.attributeDivisors;a[n]=1;if(s[n]===0){t.enableVertexAttribArray(n);s[n]=1}if(o[n]!==r){const a=i.isWebGL2?t:e.get("ANGLE_instanced_arrays");a[i.isWebGL2?"vertexAttribDivisor":"vertexAttribDivisorANGLE"](n,r);o[n]=r}}function b(){const e=c.newAttributes;const n=c.enabledAttributes;for(let i=0,r=n.length;i<r;i++){if(n[i]!==e[i]){t.disableVertexAttribArray(i);n[i]=0}}}function M(e,n,r,a,s,o){if(i.isWebGL2===true&&(r===5124||r===5125)){t.vertexAttribIPointer(e,n,r,s,o)}else{t.vertexAttribPointer(e,n,r,a,s,o)}}function w(r,a,s,o){if(i.isWebGL2===false&&(r.isInstancedMesh||o.isInstancedBufferGeometry)){if(e.get("ANGLE_instanced_arrays")===null)return}y();const l=o.attributes;const c=s.getAttributes();const u=a.defaultAttributeValues;for(const e in c){const i=c[e];if(i.location>=0){let a=l[e];if(a===undefined){if(e==="instanceMatrix"&&r.instanceMatrix)a=r.instanceMatrix;if(e==="instanceColor"&&r.instanceColor)a=r.instanceColor}if(a!==undefined){const e=a.normalized;const s=a.itemSize;const l=n.get(a);if(l===undefined)continue;const c=l.buffer;const u=l.type;const h=l.bytesPerElement;if(a.isInterleavedBufferAttribute){const n=a.data;const l=n.stride;const d=a.offset;if(n.isInstancedInterleavedBuffer){for(let t=0;t<i.locationSize;t++){v(i.location+t,n.meshPerAttribute)}if(r.isInstancedMesh!==true&&o._maxInstanceCount===undefined){o._maxInstanceCount=n.meshPerAttribute*n.count}}else{for(let t=0;t<i.locationSize;t++){x(i.location+t)}}t.bindBuffer(34962,c);for(let t=0;t<i.locationSize;t++){M(i.location+t,s/i.locationSize,u,e,l*h,(d+s/i.locationSize*t)*h)}}else{if(a.isInstancedBufferAttribute){for(let t=0;t<i.locationSize;t++){v(i.location+t,a.meshPerAttribute)}if(r.isInstancedMesh!==true&&o._maxInstanceCount===undefined){o._maxInstanceCount=a.meshPerAttribute*a.count}}else{for(let t=0;t<i.locationSize;t++){x(i.location+t)}}t.bindBuffer(34962,c);for(let t=0;t<i.locationSize;t++){M(i.location+t,s/i.locationSize,u,e,s*h,s/i.locationSize*t*h)}}}else if(u!==undefined){const n=u[e];if(n!==undefined){switch(n.length){case 2:t.vertexAttrib2fv(i.location,n);break;case 3:t.vertexAttrib3fv(i.location,n);break;case 4:t.vertexAttrib4fv(i.location,n);break;default:t.vertexAttrib1fv(i.location,n)}}}}}b()}function S(){E();for(const t in o){const e=o[t];for(const t in e){const n=e[t];for(const t in n){f(n[t].object);delete n[t]}delete e[t]}delete o[t]}}function A(t){if(o[t.id]===undefined)return;const e=o[t.id];for(const t in e){const n=e[t];for(const t in n){f(n[t].object);delete n[t]}delete e[t]}delete o[t.id]}function T(t){for(const e in o){const n=o[e];if(n[t.id]===undefined)continue;const i=n[t.id];for(const t in i){f(i[t].object);delete i[t]}delete n[t.id]}}function E(){L();if(c===l)return;c=l;d(c.object)}function L(){l.geometry=null;l.program=null;l.wireframe=false}return{setup:u,reset:E,resetDefaultState:L,dispose:S,releaseStatesOfGeometry:A,releaseStatesOfProgram:T,initAttributes:y,enableAttribute:x,disableUnusedAttributes:b}}function WebGLBufferRenderer(t,e,n,i){const r=i.isWebGL2;let a;function s(t){a=t}function o(e,i){t.drawArrays(a,e,i);n.update(i,a,1)}function l(i,s,o){if(o===0)return;let l,c;if(r){l=t;c="drawArraysInstanced"}else{l=e.get("ANGLE_instanced_arrays");c="drawArraysInstancedANGLE";if(l===null){console.error("THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}}l[c](a,i,s,o);n.update(s,a,o)}this.setMode=s;this.render=o;this.renderInstances=l}function WebGLCapabilities(t,e,n){let i;function r(){if(i!==undefined)return i;if(e.has("EXT_texture_filter_anisotropic")===true){const n=e.get("EXT_texture_filter_anisotropic");i=t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else{i=0}return i}function a(e){if(e==="highp"){if(t.getShaderPrecisionFormat(35633,36338).precision>0&&t.getShaderPrecisionFormat(35632,36338).precision>0){return"highp"}e="mediump"}if(e==="mediump"){if(t.getShaderPrecisionFormat(35633,36337).precision>0&&t.getShaderPrecisionFormat(35632,36337).precision>0){return"mediump"}}return"lowp"}const s=typeof WebGL2RenderingContext!=="undefined"&&t instanceof WebGL2RenderingContext||typeof WebGL2ComputeRenderingContext!=="undefined"&&t instanceof WebGL2ComputeRenderingContext;let o=n.precision!==undefined?n.precision:"highp";const l=a(o);if(l!==o){console.warn("THREE.WebGLRenderer:",o,"not supported, using",l,"instead.");o=l}const c=s||e.has("WEBGL_draw_buffers");const u=n.logarithmicDepthBuffer===true;const h=t.getParameter(34930);const d=t.getParameter(35660);const f=t.getParameter(3379);const p=t.getParameter(34076);const m=t.getParameter(34921);const g=t.getParameter(36347);const _=t.getParameter(36348);const y=t.getParameter(36349);const x=d>0;const v=s||e.has("OES_texture_float");const b=x&&v;const M=s?t.getParameter(36183):0;return{isWebGL2:s,drawBuffers:c,getMaxAnisotropy:r,getMaxPrecision:a,precision:o,logarithmicDepthBuffer:u,maxTextures:h,maxVertexTextures:d,maxTextureSize:f,maxCubemapSize:p,maxAttributes:m,maxVertexUniforms:g,maxVaryings:_,maxFragmentUniforms:y,vertexTextures:x,floatFragmentTextures:v,floatVertexTextures:b,maxSamples:M}}function WebGLClipping(t){const e=this;let n=null,i=0,r=false,a=false;const s=new Plane,o=new Matrix3,l={value:null,needsUpdate:false};this.uniform=l;this.numPlanes=0;this.numIntersection=0;this.init=function(t,e,a){const s=t.length!==0||e||i!==0||r;r=e;n=u(t,a,0);i=t.length;return s};this.beginShadows=function(){a=true;u(null)};this.endShadows=function(){a=false;c()};this.setState=function(e,s,o){const h=e.clippingPlanes,d=e.clipIntersection,f=e.clipShadows;const p=t.get(e);if(!r||h===null||h.length===0||a&&!f){if(a){u(null)}else{c()}}else{const t=a?0:i,e=t*4;let r=p.clippingState||null;l.value=r;r=u(h,s,e,o);for(let t=0;t!==e;++t){r[t]=n[t]}p.clippingState=r;this.numIntersection=d?this.numPlanes:0;this.numPlanes+=t}};function c(){if(l.value!==n){l.value=n;l.needsUpdate=i>0}e.numPlanes=i;e.numIntersection=0}function u(t,n,i,r){const a=t!==null?t.length:0;let c=null;if(a!==0){c=l.value;if(r!==true||c===null){const e=i+a*4,r=n.matrixWorldInverse;o.getNormalMatrix(r);if(c===null||c.length<e){c=new Float32Array(e)}for(let e=0,n=i;e!==a;++e,n+=4){s.copy(t[e]).applyMatrix4(r,o);s.normal.toArray(c,n);c[n+3]=s.constant}}l.value=c;l.needsUpdate=true}e.numPlanes=a;e.numIntersection=0;return c}}function WebGLCubeMaps(t){let e=new WeakMap;function n(t,e){if(e===EquirectangularReflectionMapping){t.mapping=CubeReflectionMapping}else if(e===EquirectangularRefractionMapping){t.mapping=CubeRefractionMapping}return t}function i(i){if(i&&i.isTexture&&i.isRenderTargetTexture===false){const a=i.mapping;if(a===EquirectangularReflectionMapping||a===EquirectangularRefractionMapping){if(e.has(i)){const t=e.get(i).texture;return n(t,i.mapping)}else{const a=i.image;if(a&&a.height>0){const s=new WebGLCubeRenderTarget(a.height/2);s.fromEquirectangularTexture(t,i);e.set(i,s);i.addEventListener("dispose",r);return n(s.texture,i.mapping)}else{return null}}}}return i}function r(t){const n=t.target;n.removeEventListener("dispose",r);const i=e.get(n);if(i!==undefined){e.delete(n);i.dispose()}}function a(){e=new WeakMap}return{get:i,dispose:a}}class OrthographicCamera extends Camera{constructor(t=-1,e=1,n=1,i=-1,r=.1,a=2e3){super();this.type="OrthographicCamera";this.zoom=1;this.view=null;this.left=t;this.right=e;this.top=n;this.bottom=i;this.near=r;this.far=a;this.updateProjectionMatrix()}copy(t,e){super.copy(t,e);this.left=t.left;this.right=t.right;this.top=t.top;this.bottom=t.bottom;this.near=t.near;this.far=t.far;this.zoom=t.zoom;this.view=t.view===null?null:Object.assign({},t.view);return this}setViewOffset(t,e,n,i,r,a){if(this.view===null){this.view={enabled:true,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}}this.view.enabled=true;this.view.fullWidth=t;this.view.fullHeight=e;this.view.offsetX=n;this.view.offsetY=i;this.view.width=r;this.view.height=a;this.updateProjectionMatrix()}clearViewOffset(){if(this.view!==null){this.view.enabled=false}this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom);const e=(this.top-this.bottom)/(2*this.zoom);const n=(this.right+this.left)/2;const i=(this.top+this.bottom)/2;let r=n-t;let a=n+t;let s=i+e;let o=i-e;if(this.view!==null&&this.view.enabled){const t=(this.right-this.left)/this.view.fullWidth/this.zoom;const e=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=t*this.view.offsetX;a=r+t*this.view.width;s-=e*this.view.offsetY;o=s-e*this.view.height}this.projectionMatrix.makeOrthographic(r,a,s,o,this.near,this.far);this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const e=super.toJSON(t);e.object.zoom=this.zoom;e.object.left=this.left;e.object.right=this.right;e.object.top=this.top;e.object.bottom=this.bottom;e.object.near=this.near;e.object.far=this.far;if(this.view!==null)e.object.view=Object.assign({},this.view);return e}}OrthographicCamera.prototype.isOrthographicCamera=true;const LOD_MIN=4;const EXTRA_LOD_SIGMA=[.125,.215,.35,.446,.526,.582];const MAX_SAMPLES=20;const _flatCamera=new OrthographicCamera;const _clearColor=new Color$1;let _oldTarget=null;const PHI=(1+Math.sqrt(5))/2;const INV_PHI=1/PHI;const _axisDirections=[new Vector3$1(1,1,1),new Vector3$1(-1,1,1),new Vector3$1(1,1,-1),new Vector3$1(-1,1,-1),new Vector3$1(0,PHI,INV_PHI),new Vector3$1(0,PHI,-INV_PHI),new Vector3$1(INV_PHI,0,PHI),new Vector3$1(-INV_PHI,0,PHI),new Vector3$1(PHI,INV_PHI,0),new Vector3$1(-PHI,INV_PHI,0)];class PMREMGenerator{constructor(t){this._renderer=t;this._pingPongRenderTarget=null;this._lodMax=0;this._cubeSize=0;this._lodPlanes=[];this._sizeLods=[];this._sigmas=[];this._blurMaterial=null;this._cubemapMaterial=null;this._equirectMaterial=null;this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,n=.1,i=100){_oldTarget=this._renderer.getRenderTarget();this._setSize(256);const r=this._allocateTargets();r.depthBuffer=true;this._sceneToCubeUV(t,n,i,r);if(e>0){this._blur(r,0,0,e)}this._applyPMREM(r);this._cleanup(r);return r}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}compileCubemapShader(){if(this._cubemapMaterial===null){this._cubemapMaterial=_getCubemapMaterial();this._compileMaterial(this._cubemapMaterial)}}compileEquirectangularShader(){if(this._equirectMaterial===null){this._equirectMaterial=_getEquirectMaterial();this._compileMaterial(this._equirectMaterial)}}dispose(){this._dispose();if(this._cubemapMaterial!==null)this._cubemapMaterial.dispose();if(this._equirectMaterial!==null)this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t));this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){this._blurMaterial.dispose();if(this._pingPongRenderTarget!==null)this._pingPongRenderTarget.dispose();for(let t=0;t<this._lodPlanes.length;t++){this._lodPlanes[t].dispose()}}_cleanup(t){this._renderer.setRenderTarget(_oldTarget);t.scissorTest=false;_setViewport(t,0,0,t.width,t.height)}_fromTexture(t,e){if(t.mapping===CubeReflectionMapping||t.mapping===CubeRefractionMapping){this._setSize(t.image.length===0?16:t.image[0].width||t.image[0].image.width)}else{this._setSize(t.image.width/4)}_oldTarget=this._renderer.getRenderTarget();const n=e||this._allocateTargets();this._textureToCubeUV(t,n);this._applyPMREM(n);this._cleanup(n);return n}_allocateTargets(){const t=3*Math.max(this._cubeSize,16*7);const e=4*this._cubeSize-32;const n={magFilter:LinearFilter,minFilter:LinearFilter,generateMipmaps:false,type:HalfFloatType,format:RGBAFormat,encoding:LinearEncoding,depthBuffer:false};const i=_createRenderTarget(t,e,n);if(this._pingPongRenderTarget===null||this._pingPongRenderTarget.width!==t){if(this._pingPongRenderTarget!==null){this._dispose()}this._pingPongRenderTarget=_createRenderTarget(t,e,n);const{_lodMax:i}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=_createPlanes(i));this._blurMaterial=_getBlurShader(i,t,e)}return i}_compileMaterial(t){const e=new Mesh$1(this._lodPlanes[0],t);this._renderer.compile(e,_flatCamera)}_sceneToCubeUV(t,e,n,i){const r=90;const a=1;const s=new PerspectiveCamera(r,a,e,n);const o=[1,-1,1,1,1,1];const l=[1,1,1,-1,-1,-1];const c=this._renderer;const u=c.autoClear;const h=c.toneMapping;c.getClearColor(_clearColor);c.toneMapping=NoToneMapping;c.autoClear=false;const d=new MeshBasicMaterial$1({name:"PMREM.Background",side:BackSide,depthWrite:false,depthTest:false});const f=new Mesh$1(new BoxGeometry$1,d);let p=false;const m=t.background;if(m){if(m.isColor){d.color.copy(m);t.background=null;p=true}}else{d.color.copy(_clearColor);p=true}for(let e=0;e<6;e++){const n=e%3;if(n===0){s.up.set(0,o[e],0);s.lookAt(l[e],0,0)}else if(n===1){s.up.set(0,0,o[e]);s.lookAt(0,l[e],0)}else{s.up.set(0,o[e],0);s.lookAt(0,0,l[e])}const r=this._cubeSize;_setViewport(i,n*r,e>2?r:0,r,r);c.setRenderTarget(i);if(p){c.render(f,s)}c.render(t,s)}f.geometry.dispose();f.material.dispose();c.toneMapping=h;c.autoClear=u;t.background=m}_textureToCubeUV(t,e){const n=this._renderer;const i=t.mapping===CubeReflectionMapping||t.mapping===CubeRefractionMapping;if(i){if(this._cubemapMaterial===null){this._cubemapMaterial=_getCubemapMaterial()}this._cubemapMaterial.uniforms.flipEnvMap.value=t.isRenderTargetTexture===false?-1:1}else{if(this._equirectMaterial===null){this._equirectMaterial=_getEquirectMaterial()}}const r=i?this._cubemapMaterial:this._equirectMaterial;const a=new Mesh$1(this._lodPlanes[0],r);const s=r.uniforms;s["envMap"].value=t;const o=this._cubeSize;_setViewport(e,0,0,3*o,2*o);n.setRenderTarget(e);n.render(a,_flatCamera)}_applyPMREM(t){const e=this._renderer;const n=e.autoClear;e.autoClear=false;for(let e=1;e<this._lodPlanes.length;e++){const n=Math.sqrt(this._sigmas[e]*this._sigmas[e]-this._sigmas[e-1]*this._sigmas[e-1]);const i=_axisDirections[(e-1)%_axisDirections.length];this._blur(t,e-1,e,n,i)}e.autoClear=n}_blur(t,e,n,i,r){const a=this._pingPongRenderTarget;this._halfBlur(t,a,e,n,i,"latitudinal",r);this._halfBlur(a,t,n,n,i,"longitudinal",r)}_halfBlur(t,e,n,i,r,a,s){const o=this._renderer;const l=this._blurMaterial;if(a!=="latitudinal"&&a!=="longitudinal"){console.error("blur direction must be either latitudinal or longitudinal!")}const c=3;const u=new Mesh$1(this._lodPlanes[i],l);const h=l.uniforms;const d=this._sizeLods[n]-1;const f=isFinite(r)?Math.PI/(2*d):2*Math.PI/(2*MAX_SAMPLES-1);const p=r/f;const m=isFinite(r)?1+Math.floor(c*p):MAX_SAMPLES;if(m>MAX_SAMPLES){console.warn(`sigmaRadians, ${r}, is too large and will clip, as it requested ${m} samples when the maximum is set to ${MAX_SAMPLES}`)}const g=[];let _=0;for(let t=0;t<MAX_SAMPLES;++t){const e=t/p;const n=Math.exp(-e*e/2);g.push(n);if(t===0){_+=n}else if(t<m){_+=2*n}}for(let t=0;t<g.length;t++){g[t]=g[t]/_}h["envMap"].value=t.texture;h["samples"].value=m;h["weights"].value=g;h["latitudinal"].value=a==="latitudinal";if(s){h["poleAxis"].value=s}const{_lodMax:y}=this;h["dTheta"].value=f;h["mipInt"].value=y-n;const x=this._sizeLods[i];const v=3*x*(i>y-LOD_MIN?i-y+LOD_MIN:0);const b=4*(this._cubeSize-x);_setViewport(e,v,b,3*x,2*x);o.setRenderTarget(e);o.render(u,_flatCamera)}}function _createPlanes(t){const e=[];const n=[];const i=[];let r=t;const a=t-LOD_MIN+1+EXTRA_LOD_SIGMA.length;for(let s=0;s<a;s++){const a=Math.pow(2,r);n.push(a);let o=1/a;if(s>t-LOD_MIN){o=EXTRA_LOD_SIGMA[s-t+LOD_MIN-1]}else if(s===0){o=0}i.push(o);const l=1/(a-1);const c=-l/2;const u=1+l/2;const h=[c,c,u,c,u,u,c,c,u,u,c,u];const d=6;const f=6;const p=3;const m=2;const g=1;const _=new Float32Array(p*f*d);const y=new Float32Array(m*f*d);const x=new Float32Array(g*f*d);for(let t=0;t<d;t++){const e=t%3*2/3-1;const n=t>2?0:-1;const i=[e,n,0,e+2/3,n,0,e+2/3,n+1,0,e,n,0,e+2/3,n+1,0,e,n+1,0];_.set(i,p*f*t);y.set(h,m*f*t);const r=[t,t,t,t,t,t];x.set(r,g*f*t)}const v=new BufferGeometry$1;v.setAttribute("position",new BufferAttribute(_,p));v.setAttribute("uv",new BufferAttribute(y,m));v.setAttribute("faceIndex",new BufferAttribute(x,g));e.push(v);if(r>LOD_MIN){r--}}return{lodPlanes:e,sizeLods:n,sigmas:i}}function _createRenderTarget(t,e,n){const i=new WebGLRenderTarget(t,e,n);i.texture.mapping=CubeUVReflectionMapping;i.texture.name="PMREM.cubeUv";i.scissorTest=true;return i}function _setViewport(t,e,n,i,r){t.viewport.set(e,n,i,r);t.scissor.set(e,n,i,r)}function _getBlurShader(t,e,n){const i=new Float32Array(MAX_SAMPLES);const r=new Vector3$1(0,1,0);const a=new ShaderMaterial({name:"SphericalGaussianBlur",defines:{n:MAX_SAMPLES,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/n,CUBEUV_MAX_MIP:`${t}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:i},latitudinal:{value:false},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:r}},vertexShader:_getCommonVertexShader(),fragmentShader:`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t`,blending:NoBlending,depthTest:false,depthWrite:false});return a}function _getEquirectMaterial(){return new ShaderMaterial({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:_getCommonVertexShader(),fragmentShader:`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t`,blending:NoBlending,depthTest:false,depthWrite:false})}function _getCubemapMaterial(){return new ShaderMaterial({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:_getCommonVertexShader(),fragmentShader:`\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t`,blending:NoBlending,depthTest:false,depthWrite:false})}function _getCommonVertexShader(){return`\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t`}function WebGLCubeUVMaps(t){let e=new WeakMap;let n=null;function i(i){if(i&&i.isTexture){const s=i.mapping;const o=s===EquirectangularReflectionMapping||s===EquirectangularRefractionMapping;const l=s===CubeReflectionMapping||s===CubeRefractionMapping;if(o||l){if(i.isRenderTargetTexture&&i.needsPMREMUpdate===true){i.needsPMREMUpdate=false;let r=e.get(i);if(n===null)n=new PMREMGenerator(t);r=o?n.fromEquirectangular(i,r):n.fromCubemap(i,r);e.set(i,r);return r.texture}else{if(e.has(i)){return e.get(i).texture}else{const s=i.image;if(o&&s&&s.height>0||l&&s&&r(s)){if(n===null)n=new PMREMGenerator(t);const r=o?n.fromEquirectangular(i):n.fromCubemap(i);e.set(i,r);i.addEventListener("dispose",a);return r.texture}else{return null}}}}}return i}function r(t){let e=0;const n=6;for(let i=0;i<n;i++){if(t[i]!==undefined)e++}return e===n}function a(t){const n=t.target;n.removeEventListener("dispose",a);const i=e.get(n);if(i!==undefined){e.delete(n);i.dispose()}}function s(){e=new WeakMap;if(n!==null){n.dispose();n=null}}return{get:i,dispose:s}}function WebGLExtensions(t){const e={};function n(n){if(e[n]!==undefined){return e[n]}let i;switch(n){case"WEBGL_depth_texture":i=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||t.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":i=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":i=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":i=t.getExtension("WEBGL_compressed_texture_pvrtc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:i=t.getExtension(n)}e[n]=i;return i}return{has:function(t){return n(t)!==null},init:function(t){if(t.isWebGL2){n("EXT_color_buffer_float")}else{n("WEBGL_depth_texture");n("OES_texture_float");n("OES_texture_half_float");n("OES_texture_half_float_linear");n("OES_standard_derivatives");n("OES_element_index_uint");n("OES_vertex_array_object");n("ANGLE_instanced_arrays")}n("OES_texture_float_linear");n("EXT_color_buffer_half_float");n("WEBGL_multisampled_render_to_texture")},get:function(t){const e=n(t);if(e===null){console.warn("THREE.WebGLRenderer: "+t+" extension not supported.")}return e}}}function WebGLGeometries(t,e,n,i){const r={};const a=new WeakMap;function s(t){const o=t.target;if(o.index!==null){e.remove(o.index)}for(const t in o.attributes){e.remove(o.attributes[t])}o.removeEventListener("dispose",s);delete r[o.id];const l=a.get(o);if(l){e.remove(l);a.delete(o)}i.releaseStatesOfGeometry(o);if(o.isInstancedBufferGeometry===true){delete o._maxInstanceCount}n.memory.geometries--}function o(t,e){if(r[e.id]===true)return e;e.addEventListener("dispose",s);r[e.id]=true;n.memory.geometries++;return e}function l(t){const n=t.attributes;for(const t in n){e.update(n[t],34962)}const i=t.morphAttributes;for(const t in i){const n=i[t];for(let t=0,i=n.length;t<i;t++){e.update(n[t],34962)}}}function c(t){const n=[];const i=t.index;const r=t.attributes.position;let s=0;if(i!==null){const t=i.array;s=i.version;for(let e=0,i=t.length;e<i;e+=3){const i=t[e+0];const r=t[e+1];const a=t[e+2];n.push(i,r,r,a,a,i)}}else{const t=r.array;s=r.version;for(let e=0,i=t.length/3-1;e<i;e+=3){const t=e+0;const i=e+1;const r=e+2;n.push(t,i,i,r,r,t)}}const o=new(arrayNeedsUint32(n)?Uint32BufferAttribute:Uint16BufferAttribute)(n,1);o.version=s;const l=a.get(t);if(l)e.remove(l);a.set(t,o)}function u(t){const e=a.get(t);if(e){const n=t.index;if(n!==null){if(e.version<n.version){c(t)}}}else{c(t)}return a.get(t)}return{get:o,update:l,getWireframeAttribute:u}}function WebGLIndexedBufferRenderer(t,e,n,i){const r=i.isWebGL2;let a;function s(t){a=t}let o,l;function c(t){o=t.type;l=t.bytesPerElement}function u(e,i){t.drawElements(a,i,o,e*l);n.update(i,a,1)}function h(i,s,c){if(c===0)return;let u,h;if(r){u=t;h="drawElementsInstanced"}else{u=e.get("ANGLE_instanced_arrays");h="drawElementsInstancedANGLE";if(u===null){console.error("THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.");return}}u[h](a,s,o,i*l,c);n.update(s,a,c)}this.setMode=s;this.setIndex=c;this.render=u;this.renderInstances=h}function WebGLInfo(t){const e={geometries:0,textures:0};const n={frame:0,calls:0,triangles:0,points:0,lines:0};function i(t,e,i){n.calls++;switch(e){case 4:n.triangles+=i*(t/3);break;case 1:n.lines+=i*(t/2);break;case 3:n.lines+=i*(t-1);break;case 2:n.lines+=i*t;break;case 0:n.points+=i*t;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",e);break}}function r(){n.frame++;n.calls=0;n.triangles=0;n.points=0;n.lines=0}return{memory:e,render:n,programs:null,autoReset:true,reset:r,update:i}}function numericalSort(t,e){return t[0]-e[0]}function absNumericalSort(t,e){return Math.abs(e[1])-Math.abs(t[1])}function denormalize(t,e){let n=1;const i=e.isInterleavedBufferAttribute?e.data.array:e.array;if(i instanceof Int8Array)n=127;else if(i instanceof Int16Array)n=32767;else if(i instanceof Int32Array)n=2147483647;else console.error("THREE.WebGLMorphtargets: Unsupported morph attribute data type: ",i);t.divideScalar(n)}function WebGLMorphtargets(t,e,n){const i={};const r=new Float32Array(8);const a=new WeakMap;const s=new Vector4;const o=[];for(let t=0;t<8;t++){o[t]=[t,0]}function l(l,c,u,h){const d=l.morphTargetInfluences;if(e.isWebGL2===true){const p=c.morphAttributes.position||c.morphAttributes.normal||c.morphAttributes.color;const m=p!==undefined?p.length:0;let g=a.get(c);if(g===undefined||g.count!==m){if(g!==undefined)g.texture.dispose();const x=c.morphAttributes.position!==undefined;const v=c.morphAttributes.normal!==undefined;const b=c.morphAttributes.color!==undefined;const M=c.morphAttributes.position||[];const w=c.morphAttributes.normal||[];const S=c.morphAttributes.color||[];let A=0;if(x===true)A=1;if(v===true)A=2;if(b===true)A=3;let T=c.attributes.position.count*A;let E=1;if(T>e.maxTextureSize){E=Math.ceil(T/e.maxTextureSize);T=e.maxTextureSize}const L=new Float32Array(T*E*4*m);const C=new DataArrayTexture(L,T,E,m);C.format=RGBAFormat;C.type=FloatType;C.needsUpdate=true;const P=A*4;for(let R=0;R<m;R++){const F=M[R];const I=w[R];const B=S[R];const D=T*E*4*R;for(let N=0;N<F.count;N++){const U=N*P;if(x===true){s.fromBufferAttribute(F,N);if(F.normalized===true)denormalize(s,F);L[D+U+0]=s.x;L[D+U+1]=s.y;L[D+U+2]=s.z;L[D+U+3]=0}if(v===true){s.fromBufferAttribute(I,N);if(I.normalized===true)denormalize(s,I);L[D+U+4]=s.x;L[D+U+5]=s.y;L[D+U+6]=s.z;L[D+U+7]=0}if(b===true){s.fromBufferAttribute(B,N);if(B.normalized===true)denormalize(s,I);L[D+U+8]=s.x;L[D+U+9]=s.y;L[D+U+10]=s.z;L[D+U+11]=B.itemSize===4?s.w:1}}}g={count:m,texture:C,size:new Vector2(T,E)};a.set(c,g);function f(){C.dispose();a.delete(c);c.removeEventListener("dispose",f)}c.addEventListener("dispose",f)}let _=0;for(let V=0;V<d.length;V++){_+=d[V]}const y=c.morphTargetsRelative?1:1-_;h.getUniforms().setValue(t,"morphTargetBaseInfluence",y);h.getUniforms().setValue(t,"morphTargetInfluences",d);h.getUniforms().setValue(t,"morphTargetsTexture",g.texture,n);h.getUniforms().setValue(t,"morphTargetsTextureSize",g.size)}else{const G=d===undefined?0:d.length;let O=i[c.id];if(O===undefined||O.length!==G){O=[];for(let W=0;W<G;W++){O[W]=[W,0]}i[c.id]=O}for(let j=0;j<G;j++){const X=O[j];X[0]=j;X[1]=d[j]}O.sort(absNumericalSort);for(let Y=0;Y<8;Y++){if(Y<G&&O[Y][1]){o[Y][0]=O[Y][0];o[Y][1]=O[Y][1]}else{o[Y][0]=Number.MAX_SAFE_INTEGER;o[Y][1]=0}}o.sort(numericalSort);const z=c.morphAttributes.position;const $=c.morphAttributes.normal;let H=0;for(let Q=0;Q<8;Q++){const q=o[Q];const J=q[0];const Z=q[1];if(J!==Number.MAX_SAFE_INTEGER&&Z){if(z&&c.getAttribute("morphTarget"+Q)!==z[J]){c.setAttribute("morphTarget"+Q,z[J])}if($&&c.getAttribute("morphNormal"+Q)!==$[J]){c.setAttribute("morphNormal"+Q,$[J])}r[Q]=Z;H+=Z}else{if(z&&c.hasAttribute("morphTarget"+Q)===true){c.deleteAttribute("morphTarget"+Q)}if($&&c.hasAttribute("morphNormal"+Q)===true){c.deleteAttribute("morphNormal"+Q)}r[Q]=0}}const k=c.morphTargetsRelative?1:1-H;h.getUniforms().setValue(t,"morphTargetBaseInfluence",k);h.getUniforms().setValue(t,"morphTargetInfluences",r)}}return{update:l}}function WebGLObjects(t,e,n,i){let r=new WeakMap;function a(t){const a=i.render.frame;const s=t.geometry;const l=e.get(t,s);if(r.get(l)!==a){e.update(l);r.set(l,a)}if(t.isInstancedMesh){if(t.hasEventListener("dispose",o)===false){t.addEventListener("dispose",o)}n.update(t.instanceMatrix,34962);if(t.instanceColor!==null){n.update(t.instanceColor,34962)}}return l}function s(){r=new WeakMap}function o(t){const e=t.target;e.removeEventListener("dispose",o);n.remove(e.instanceMatrix);if(e.instanceColor!==null)n.remove(e.instanceColor)}return{update:a,dispose:s}}const emptyTexture=new Texture;const emptyArrayTexture=new DataArrayTexture;const empty3dTexture=new Data3DTexture;const emptyCubeTexture=new CubeTexture;const arrayCacheF32=[];const arrayCacheI32=[];const mat4array=new Float32Array(16);const mat3array=new Float32Array(9);const mat2array=new Float32Array(4);function flatten(t,e,n){const i=t[0];if(i<=0||i>0)return t;const r=e*n;let a=arrayCacheF32[r];if(a===undefined){a=new Float32Array(r);arrayCacheF32[r]=a}if(e!==0){i.toArray(a,0);for(let i=1,r=0;i!==e;++i){r+=n;t[i].toArray(a,r)}}return a}function arraysEqual(t,e){if(t.length!==e.length)return false;for(let n=0,i=t.length;n<i;n++){if(t[n]!==e[n])return false}return true}function copyArray(t,e){for(let n=0,i=e.length;n<i;n++){t[n]=e[n]}}function allocTexUnits(t,e){let n=arrayCacheI32[e];if(n===undefined){n=new Int32Array(e);arrayCacheI32[e]=n}for(let i=0;i!==e;++i){n[i]=t.allocateTextureUnit()}return n}function setValueV1f(t,e){const n=this.cache;if(n[0]===e)return;t.uniform1f(this.addr,e);n[0]=e}function setValueV2f(t,e){const n=this.cache;if(e.x!==undefined){if(n[0]!==e.x||n[1]!==e.y){t.uniform2f(this.addr,e.x,e.y);n[0]=e.x;n[1]=e.y}}else{if(arraysEqual(n,e))return;t.uniform2fv(this.addr,e);copyArray(n,e)}}function setValueV3f(t,e){const n=this.cache;if(e.x!==undefined){if(n[0]!==e.x||n[1]!==e.y||n[2]!==e.z){t.uniform3f(this.addr,e.x,e.y,e.z);n[0]=e.x;n[1]=e.y;n[2]=e.z}}else if(e.r!==undefined){if(n[0]!==e.r||n[1]!==e.g||n[2]!==e.b){t.uniform3f(this.addr,e.r,e.g,e.b);n[0]=e.r;n[1]=e.g;n[2]=e.b}}else{if(arraysEqual(n,e))return;t.uniform3fv(this.addr,e);copyArray(n,e)}}function setValueV4f(t,e){const n=this.cache;if(e.x!==undefined){if(n[0]!==e.x||n[1]!==e.y||n[2]!==e.z||n[3]!==e.w){t.uniform4f(this.addr,e.x,e.y,e.z,e.w);n[0]=e.x;n[1]=e.y;n[2]=e.z;n[3]=e.w}}else{if(arraysEqual(n,e))return;t.uniform4fv(this.addr,e);copyArray(n,e)}}function setValueM2(t,e){const n=this.cache;const i=e.elements;if(i===undefined){if(arraysEqual(n,e))return;t.uniformMatrix2fv(this.addr,false,e);copyArray(n,e)}else{if(arraysEqual(n,i))return;mat2array.set(i);t.uniformMatrix2fv(this.addr,false,mat2array);copyArray(n,i)}}function setValueM3(t,e){const n=this.cache;const i=e.elements;if(i===undefined){if(arraysEqual(n,e))return;t.uniformMatrix3fv(this.addr,false,e);copyArray(n,e)}else{if(arraysEqual(n,i))return;mat3array.set(i);t.uniformMatrix3fv(this.addr,false,mat3array);copyArray(n,i)}}function setValueM4(t,e){const n=this.cache;const i=e.elements;if(i===undefined){if(arraysEqual(n,e))return;t.uniformMatrix4fv(this.addr,false,e);copyArray(n,e)}else{if(arraysEqual(n,i))return;mat4array.set(i);t.uniformMatrix4fv(this.addr,false,mat4array);copyArray(n,i)}}function setValueV1i(t,e){const n=this.cache;if(n[0]===e)return;t.uniform1i(this.addr,e);n[0]=e}function setValueV2i(t,e){const n=this.cache;if(arraysEqual(n,e))return;t.uniform2iv(this.addr,e);copyArray(n,e)}function setValueV3i(t,e){const n=this.cache;if(arraysEqual(n,e))return;t.uniform3iv(this.addr,e);copyArray(n,e)}function setValueV4i(t,e){const n=this.cache;if(arraysEqual(n,e))return;t.uniform4iv(this.addr,e);copyArray(n,e)}function setValueV1ui(t,e){const n=this.cache;if(n[0]===e)return;t.uniform1ui(this.addr,e);n[0]=e}function setValueV2ui(t,e){const n=this.cache;if(arraysEqual(n,e))return;t.uniform2uiv(this.addr,e);copyArray(n,e)}function setValueV3ui(t,e){const n=this.cache;if(arraysEqual(n,e))return;t.uniform3uiv(this.addr,e);copyArray(n,e)}function setValueV4ui(t,e){const n=this.cache;if(arraysEqual(n,e))return;t.uniform4uiv(this.addr,e);copyArray(n,e)}function setValueT1(t,e,n){const i=this.cache;const r=n.allocateTextureUnit();if(i[0]!==r){t.uniform1i(this.addr,r);i[0]=r}n.setTexture2D(e||emptyTexture,r)}function setValueT3D1(t,e,n){const i=this.cache;const r=n.allocateTextureUnit();if(i[0]!==r){t.uniform1i(this.addr,r);i[0]=r}n.setTexture3D(e||empty3dTexture,r)}function setValueT6(t,e,n){const i=this.cache;const r=n.allocateTextureUnit();if(i[0]!==r){t.uniform1i(this.addr,r);i[0]=r}n.setTextureCube(e||emptyCubeTexture,r)}function setValueT2DArray1(t,e,n){const i=this.cache;const r=n.allocateTextureUnit();if(i[0]!==r){t.uniform1i(this.addr,r);i[0]=r}n.setTexture2DArray(e||emptyArrayTexture,r)}function getSingularSetter(t){switch(t){case 5126:return setValueV1f;case 35664:return setValueV2f;case 35665:return setValueV3f;case 35666:return setValueV4f;case 35674:return setValueM2;case 35675:return setValueM3;case 35676:return setValueM4;case 5124:case 35670:return setValueV1i;case 35667:case 35671:return setValueV2i;case 35668:case 35672:return setValueV3i;case 35669:case 35673:return setValueV4i;case 5125:return setValueV1ui;case 36294:return setValueV2ui;case 36295:return setValueV3ui;case 36296:return setValueV4ui;case 35678:case 36198:case 36298:case 36306:case 35682:return setValueT1;case 35679:case 36299:case 36307:return setValueT3D1;case 35680:case 36300:case 36308:case 36293:return setValueT6;case 36289:case 36303:case 36311:case 36292:return setValueT2DArray1}}function setValueV1fArray(t,e){t.uniform1fv(this.addr,e)}function setValueV2fArray(t,e){const n=flatten(e,this.size,2);t.uniform2fv(this.addr,n)}function setValueV3fArray(t,e){const n=flatten(e,this.size,3);t.uniform3fv(this.addr,n)}function setValueV4fArray(t,e){const n=flatten(e,this.size,4);t.uniform4fv(this.addr,n)}function setValueM2Array(t,e){const n=flatten(e,this.size,4);t.uniformMatrix2fv(this.addr,false,n)}function setValueM3Array(t,e){const n=flatten(e,this.size,9);t.uniformMatrix3fv(this.addr,false,n)}function setValueM4Array(t,e){const n=flatten(e,this.size,16);t.uniformMatrix4fv(this.addr,false,n)}function setValueV1iArray(t,e){t.uniform1iv(this.addr,e)}function setValueV2iArray(t,e){t.uniform2iv(this.addr,e)}function setValueV3iArray(t,e){t.uniform3iv(this.addr,e)}function setValueV4iArray(t,e){t.uniform4iv(this.addr,e)}function setValueV1uiArray(t,e){t.uniform1uiv(this.addr,e)}function setValueV2uiArray(t,e){t.uniform2uiv(this.addr,e)}function setValueV3uiArray(t,e){t.uniform3uiv(this.addr,e)}function setValueV4uiArray(t,e){t.uniform4uiv(this.addr,e)}function setValueT1Array(t,e,n){const i=e.length;const r=allocTexUnits(n,i);t.uniform1iv(this.addr,r);for(let t=0;t!==i;++t){n.setTexture2D(e[t]||emptyTexture,r[t])}}function setValueT3DArray(t,e,n){const i=e.length;const r=allocTexUnits(n,i);t.uniform1iv(this.addr,r);for(let t=0;t!==i;++t){n.setTexture3D(e[t]||empty3dTexture,r[t])}}function setValueT6Array(t,e,n){const i=e.length;const r=allocTexUnits(n,i);t.uniform1iv(this.addr,r);for(let t=0;t!==i;++t){n.setTextureCube(e[t]||emptyCubeTexture,r[t])}}function setValueT2DArrayArray(t,e,n){const i=e.length;const r=allocTexUnits(n,i);t.uniform1iv(this.addr,r);for(let t=0;t!==i;++t){n.setTexture2DArray(e[t]||emptyArrayTexture,r[t])}}function getPureArraySetter(t){switch(t){case 5126:return setValueV1fArray;case 35664:return setValueV2fArray;case 35665:return setValueV3fArray;case 35666:return setValueV4fArray;case 35674:return setValueM2Array;case 35675:return setValueM3Array;case 35676:return setValueM4Array;case 5124:case 35670:return setValueV1iArray;case 35667:case 35671:return setValueV2iArray;case 35668:case 35672:return setValueV3iArray;case 35669:case 35673:return setValueV4iArray;case 5125:return setValueV1uiArray;case 36294:return setValueV2uiArray;case 36295:return setValueV3uiArray;case 36296:return setValueV4uiArray;case 35678:case 36198:case 36298:case 36306:case 35682:return setValueT1Array;case 35679:case 36299:case 36307:return setValueT3DArray;case 35680:case 36300:case 36308:case 36293:return setValueT6Array;case 36289:case 36303:case 36311:case 36292:return setValueT2DArrayArray}}function SingleUniform(t,e,n){this.id=t;this.addr=n;this.cache=[];this.setValue=getSingularSetter(e.type)}function PureArrayUniform(t,e,n){this.id=t;this.addr=n;this.cache=[];this.size=e.size;this.setValue=getPureArraySetter(e.type)}PureArrayUniform.prototype.updateCache=function(t){const e=this.cache;if(t instanceof Float32Array&&e.length!==t.length){this.cache=new Float32Array(t.length)}copyArray(e,t)};function StructuredUniform(t){this.id=t;this.seq=[];this.map={}}StructuredUniform.prototype.setValue=function(t,e,n){const i=this.seq;for(let r=0,a=i.length;r!==a;++r){const a=i[r];a.setValue(t,e[a.id],n)}};const RePathPart=/(\w+)(\])?(\[|\.)?/g;function addUniform(t,e){t.seq.push(e);t.map[e.id]=e}function parseUniform(t,e,n){const i=t.name,r=i.length;RePathPart.lastIndex=0;while(true){const a=RePathPart.exec(i),s=RePathPart.lastIndex;let o=a[1];const l=a[2]==="]",c=a[3];if(l)o=o|0;if(c===undefined||c==="["&&s+2===r){addUniform(n,c===undefined?new SingleUniform(o,t,e):new PureArrayUniform(o,t,e));break}else{const t=n.map;let e=t[o];if(e===undefined){e=new StructuredUniform(o);addUniform(n,e)}n=e}}}function WebGLUniforms(t,e){this.seq=[];this.map={};const n=t.getProgramParameter(e,35718);for(let i=0;i<n;++i){const n=t.getActiveUniform(e,i),r=t.getUniformLocation(e,n.name);parseUniform(n,r,this)}}WebGLUniforms.prototype.setValue=function(t,e,n,i){const r=this.map[e];if(r!==undefined)r.setValue(t,n,i)};WebGLUniforms.prototype.setOptional=function(t,e,n){const i=e[n];if(i!==undefined)this.setValue(t,n,i)};WebGLUniforms.upload=function(t,e,n,i){for(let r=0,a=e.length;r!==a;++r){const a=e[r],s=n[a.id];if(s.needsUpdate!==false){a.setValue(t,s.value,i)}}};WebGLUniforms.seqWithValue=function(t,e){const n=[];for(let i=0,r=t.length;i!==r;++i){const r=t[i];if(r.id in e)n.push(r)}return n};function WebGLShader(t,e,n){const i=t.createShader(e);t.shaderSource(i,n);t.compileShader(i);return i}let programIdCount=0;function addLineNumbers(t){const e=t.split("\n");for(let t=0;t<e.length;t++){e[t]=t+1+": "+e[t]}return e.join("\n")}function getEncodingComponents(t){switch(t){case LinearEncoding:return["Linear","( value )"];case sRGBEncoding:return["sRGB","( value )"];default:console.warn("THREE.WebGLProgram: Unsupported encoding:",t);return["Linear","( value )"]}}function getShaderErrors(t,e,n){const i=t.getShaderParameter(e,35713);const r=t.getShaderInfoLog(e).trim();if(i&&r==="")return"";return n.toUpperCase()+"\n\n"+r+"\n\n"+addLineNumbers(t.getShaderSource(e))}function getTexelEncodingFunction(t,e){const n=getEncodingComponents(e);return"vec4 "+t+"( vec4 value ) { return LinearTo"+n[0]+n[1]+"; }"}function getToneMappingFunction(t,e){let n;switch(e){case LinearToneMapping:n="Linear";break;case ReinhardToneMapping:n="Reinhard";break;case CineonToneMapping:n="OptimizedCineon";break;case ACESFilmicToneMapping:n="ACESFilmic";break;case CustomToneMapping:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e);n="Linear"}return"vec3 "+t+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}function generateExtensions(t){const e=[t.extensionDerivatives||!!t.envMapCubeUVHeight||t.bumpMap||t.tangentSpaceNormalMap||t.clearcoatNormalMap||t.flatShading||t.shaderID==="physical"?"#extension GL_OES_standard_derivatives : enable":"",(t.extensionFragDepth||t.logarithmicDepthBuffer)&&t.rendererExtensionFragDepth?"#extension GL_EXT_frag_depth : enable":"",t.extensionDrawBuffers&&t.rendererExtensionDrawBuffers?"#extension GL_EXT_draw_buffers : require":"",(t.extensionShaderTextureLOD||t.envMap||t.transmission)&&t.rendererExtensionShaderTextureLod?"#extension GL_EXT_shader_texture_lod : enable":""];return e.filter(filterEmptyLine).join("\n")}function generateDefines(t){const e=[];for(const n in t){const i=t[n];if(i===false)continue;e.push("#define "+n+" "+i)}return e.join("\n")}function fetchAttributeLocations(t,e){const n={};const i=t.getProgramParameter(e,35721);for(let r=0;r<i;r++){const i=t.getActiveAttrib(e,r);const a=i.name;let s=1;if(i.type===35674)s=2;if(i.type===35675)s=3;if(i.type===35676)s=4;n[a]={type:i.type,location:t.getAttribLocation(e,a),locationSize:s}}return n}function filterEmptyLine(t){return t!==""}function replaceLightNums(t,e){return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function replaceClippingPlaneNums(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const includePattern=/^[ \t]*#include +<([\w\d./]+)>/gm;function resolveIncludes(t){return t.replace(includePattern,includeReplacer)}function includeReplacer(t,e){const n=ShaderChunk[e];if(n===undefined){throw new Error("Can not resolve #include <"+e+">")}return resolveIncludes(n)}const deprecatedUnrollLoopPattern=/#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g;const unrollLoopPattern=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function unrollLoops(t){return t.replace(unrollLoopPattern,loopReplacer).replace(deprecatedUnrollLoopPattern,deprecatedLoopReplacer)}function deprecatedLoopReplacer(t,e,n,i){console.warn("WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.");return loopReplacer(t,e,n,i)}function loopReplacer(t,e,n,i){let r="";for(let t=parseInt(e);t<parseInt(n);t++){r+=i.replace(/\[\s*i\s*\]/g,"[ "+t+" ]").replace(/UNROLLED_LOOP_INDEX/g,t)}return r}function generatePrecision(t){let e="precision "+t.precision+" float;\nprecision "+t.precision+" int;";if(t.precision==="highp"){e+="\n#define HIGH_PRECISION"}else if(t.precision==="mediump"){e+="\n#define MEDIUM_PRECISION"}else if(t.precision==="lowp"){e+="\n#define LOW_PRECISION"}return e}function generateShadowMapTypeDefine(t){let e="SHADOWMAP_TYPE_BASIC";if(t.shadowMapType===PCFShadowMap){e="SHADOWMAP_TYPE_PCF"}else if(t.shadowMapType===PCFSoftShadowMap){e="SHADOWMAP_TYPE_PCF_SOFT"}else if(t.shadowMapType===VSMShadowMap){e="SHADOWMAP_TYPE_VSM"}return e}function generateEnvMapTypeDefine(t){let e="ENVMAP_TYPE_CUBE";if(t.envMap){switch(t.envMapMode){case CubeReflectionMapping:case CubeRefractionMapping:e="ENVMAP_TYPE_CUBE";break;case CubeUVReflectionMapping:case CubeUVRefractionMapping:e="ENVMAP_TYPE_CUBE_UV";break}}return e}function generateEnvMapModeDefine(t){let e="ENVMAP_MODE_REFLECTION";if(t.envMap){switch(t.envMapMode){case CubeRefractionMapping:case CubeUVRefractionMapping:e="ENVMAP_MODE_REFRACTION";break}}return e}function generateEnvMapBlendingDefine(t){let e="ENVMAP_BLENDING_NONE";if(t.envMap){switch(t.combine){case MultiplyOperation:e="ENVMAP_BLENDING_MULTIPLY";break;case MixOperation:e="ENVMAP_BLENDING_MIX";break;case AddOperation:e="ENVMAP_BLENDING_ADD";break}}return e}function generateCubeUVSize(t){const e=t.envMapCubeUVHeight;if(e===null)return null;const n=Math.log2(e/32+1)+3;const i=1/e;const r=1/(3*Math.max(Math.pow(2,n),7*16));return{texelWidth:r,texelHeight:i,maxMip:n}}function WebGLProgram(t,e,n,i){const r=t.getContext();const a=n.defines;let s=n.vertexShader;let o=n.fragmentShader;const l=generateShadowMapTypeDefine(n);const c=generateEnvMapTypeDefine(n);const u=generateEnvMapModeDefine(n);const h=generateEnvMapBlendingDefine(n);const d=generateCubeUVSize(n);const f=n.isWebGL2?"":generateExtensions(n);const p=generateDefines(a);const m=r.createProgram();let g,_;let y=n.glslVersion?"#version "+n.glslVersion+"\n":"";if(n.isRawShaderMaterial){g=[p].filter(filterEmptyLine).join("\n");if(g.length>0){g+="\n"}_=[f,p].filter(filterEmptyLine).join("\n");if(_.length>0){_+="\n"}}else{g=[generatePrecision(n),"#define SHADER_NAME "+n.shaderName,p,n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.supportsVertexTextures?"#define VERTEX_TEXTURES":"","#define MAX_BONES "+n.maxBones,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+u:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.displacementMap&&n.supportsVertexTextures?"#define USE_DISPLACEMENTMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",n.specularColorMap?"#define USE_SPECULARCOLORMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.sheenColorMap?"#define USE_SHEENCOLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.useVertexTexture?"#define BONE_TEXTURE":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&n.flatShading===false?"#define USE_MORPHNORMALS":"",n.morphColors&&n.isWebGL2?"#define USE_MORPHCOLORS":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE":"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_TEXTURE_STRIDE "+n.morphTextureStride:"",n.morphTargetsCount>0&&n.isWebGL2?"#define MORPHTARGETS_COUNT "+n.morphTargetsCount:"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )","\tattribute vec3 morphTarget0;","\tattribute vec3 morphTarget1;","\tattribute vec3 morphTarget2;","\tattribute vec3 morphTarget3;","\t#ifdef USE_MORPHNORMALS","\t\tattribute vec3 morphNormal0;","\t\tattribute vec3 morphNormal1;","\t\tattribute vec3 morphNormal2;","\t\tattribute vec3 morphNormal3;","\t#else","\t\tattribute vec3 morphTarget4;","\t\tattribute vec3 morphTarget5;","\t\tattribute vec3 morphTarget6;","\t\tattribute vec3 morphTarget7;","\t#endif","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(filterEmptyLine).join("\n");_=[f,generatePrecision(n),"#define SHADER_NAME "+n.shaderName,p,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+c:"",n.envMap?"#define "+u:"",n.envMap?"#define "+h:"",d?"#define CUBEUV_TEXEL_WIDTH "+d.texelWidth:"",d?"#define CUBEUV_TEXEL_HEIGHT "+d.texelHeight:"",d?"#define CUBEUV_MAX_MIP "+d.maxMip+".0":"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMap&&n.objectSpaceNormalMap?"#define OBJECTSPACE_NORMALMAP":"",n.normalMap&&n.tangentSpaceNormalMap?"#define TANGENTSPACE_NORMALMAP":"",n.clearcoat?"#define USE_CLEARCOAT":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularIntensityMap?"#define USE_SPECULARINTENSITYMAP":"",n.specularColorMap?"#define USE_SPECULARCOLORMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaTest?"#define USE_ALPHATEST":"",n.sheen?"#define USE_SHEEN":"",n.sheenColorMap?"#define USE_SHEENCOLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEENROUGHNESSMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",n.vertexTangents?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUvs?"#define USE_UV":"",n.uvsVertexOnly?"#define UVS_VERTEX_ONLY":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+l:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.physicallyCorrectLights?"#define PHYSICALLY_CORRECT_LIGHTS":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.logarithmicDepthBuffer&&n.rendererExtensionFragDepth?"#define USE_LOGDEPTHBUF_EXT":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",n.toneMapping!==NoToneMapping?"#define TONE_MAPPING":"",n.toneMapping!==NoToneMapping?ShaderChunk["tonemapping_pars_fragment"]:"",n.toneMapping!==NoToneMapping?getToneMappingFunction("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.opaque?"#define OPAQUE":"",ShaderChunk["encodings_pars_fragment"],getTexelEncodingFunction("linearToOutputTexel",n.outputEncoding),n.depthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(filterEmptyLine).join("\n")}s=resolveIncludes(s);s=replaceLightNums(s,n);s=replaceClippingPlaneNums(s,n);o=resolveIncludes(o);o=replaceLightNums(o,n);o=replaceClippingPlaneNums(o,n);s=unrollLoops(s);o=unrollLoops(o);if(n.isWebGL2&&n.isRawShaderMaterial!==true){y="#version 300 es\n";g=["precision mediump sampler2DArray;","#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+g;_=["#define varying in",n.glslVersion===GLSL3?"":"layout(location = 0) out highp vec4 pc_fragColor;",n.glslVersion===GLSL3?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+_}const x=y+g+s;const v=y+_+o;const b=WebGLShader(r,35633,x);const M=WebGLShader(r,35632,v);r.attachShader(m,b);r.attachShader(m,M);if(n.index0AttributeName!==undefined){r.bindAttribLocation(m,0,n.index0AttributeName)}else if(n.morphTargets===true){r.bindAttribLocation(m,0,"position")}r.linkProgram(m);if(t.debug.checkShaderErrors){const t=r.getProgramInfoLog(m).trim();const e=r.getShaderInfoLog(b).trim();const n=r.getShaderInfoLog(M).trim();let i=true;let a=true;if(r.getProgramParameter(m,35714)===false){i=false;const e=getShaderErrors(r,b,"vertex");const n=getShaderErrors(r,M,"fragment");console.error("THREE.WebGLProgram: Shader Error "+r.getError()+" - "+"VALIDATE_STATUS "+r.getProgramParameter(m,35715)+"\n\n"+"Program Info Log: "+t+"\n"+e+"\n"+n)}else if(t!==""){console.warn("THREE.WebGLProgram: Program Info Log:",t)}else if(e===""||n===""){a=false}if(a){this.diagnostics={runnable:i,programLog:t,vertexShader:{log:e,prefix:g},fragmentShader:{log:n,prefix:_}}}}r.deleteShader(b);r.deleteShader(M);let w;this.getUniforms=function(){if(w===undefined){w=new WebGLUniforms(r,m)}return w};let S;this.getAttributes=function(){if(S===undefined){S=fetchAttributeLocations(r,m)}return S};this.destroy=function(){i.releaseStatesOfProgram(this);r.deleteProgram(m);this.program=undefined};this.name=n.shaderName;this.id=programIdCount++;this.cacheKey=e;this.usedTimes=1;this.program=m;this.vertexShader=b;this.fragmentShader=M;return this}let _id=0;class WebGLShaderCache{constructor(){this.shaderCache=new Map;this.materialCache=new Map}update(t){const e=t.vertexShader;const n=t.fragmentShader;const i=this._getShaderStage(e);const r=this._getShaderStage(n);const a=this._getShaderCacheForMaterial(t);if(a.has(i)===false){a.add(i);i.usedTimes++}if(a.has(r)===false){a.add(r);r.usedTimes++}return this}remove(t){const e=this.materialCache.get(t);for(const t of e){t.usedTimes--;if(t.usedTimes===0)this.shaderCache.delete(t)}this.materialCache.delete(t);return this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear();this.materialCache.clear()}_getShaderCacheForMaterial(t){const e=this.materialCache;if(e.has(t)===false){e.set(t,new Set)}return e.get(t)}_getShaderStage(t){const e=this.shaderCache;if(e.has(t)===false){const n=new WebGLShaderStage;e.set(t,n)}return e.get(t)}}class WebGLShaderStage{constructor(){this.id=_id++;this.usedTimes=0}}function WebGLPrograms(t,e,n,i,r,a,s){const o=new Layers;const l=new WebGLShaderCache;const c=[];const u=r.isWebGL2;const h=r.logarithmicDepthBuffer;const d=r.floatVertexTextures;const f=r.maxVertexUniforms;const p=r.vertexTextures;let m=r.precision;const g={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function _(t){const e=t.skeleton;const n=e.bones;if(d){return 1024}else{const t=f;const e=Math.floor((t-20)/4);const i=Math.min(e,n.length);if(i<n.length){console.warn("THREE.WebGLRenderer: Skeleton has "+n.length+" bones. This GPU supports "+i+".");return 0}return i}}function y(a,o,c,f,y){const x=f.fog;const v=y.geometry;const b=a.isMeshStandardMaterial?f.environment:null;const M=(a.isMeshStandardMaterial?n:e).get(a.envMap||b);const w=!!M&&(M.mapping===CubeUVReflectionMapping||M.mapping===CubeUVRefractionMapping)?M.image.height:null;const S=g[a.type];const A=y.isSkinnedMesh?_(y):0;if(a.precision!==null){m=r.getMaxPrecision(a.precision);if(m!==a.precision){console.warn("THREE.WebGLProgram.getParameters:",a.precision,"not supported, using",m,"instead.")}}const T=v.morphAttributes.position||v.morphAttributes.normal||v.morphAttributes.color;const E=T!==undefined?T.length:0;let L=0;if(v.morphAttributes.position!==undefined)L=1;if(v.morphAttributes.normal!==undefined)L=2;if(v.morphAttributes.color!==undefined)L=3;let C,P;let R,F;if(S){const t=ShaderLib[S];C=t.vertexShader;P=t.fragmentShader}else{C=a.vertexShader;P=a.fragmentShader;l.update(a);R=l.getVertexShaderID(a);F=l.getFragmentShaderID(a)}const I=t.getRenderTarget();const B=a.alphaTest>0;const D=a.clearcoat>0;const N={isWebGL2:u,shaderID:S,shaderName:a.type,vertexShader:C,fragmentShader:P,defines:a.defines,customVertexShaderID:R,customFragmentShaderID:F,isRawShaderMaterial:a.isRawShaderMaterial===true,glslVersion:a.glslVersion,precision:m,instancing:y.isInstancedMesh===true,instancingColor:y.isInstancedMesh===true&&y.instanceColor!==null,supportsVertexTextures:p,outputEncoding:I===null?t.outputEncoding:I.isXRRenderTarget===true?I.texture.encoding:LinearEncoding,map:!!a.map,matcap:!!a.matcap,envMap:!!M,envMapMode:M&&M.mapping,envMapCubeUVHeight:w,lightMap:!!a.lightMap,aoMap:!!a.aoMap,emissiveMap:!!a.emissiveMap,bumpMap:!!a.bumpMap,normalMap:!!a.normalMap,objectSpaceNormalMap:a.normalMapType===ObjectSpaceNormalMap,tangentSpaceNormalMap:a.normalMapType===TangentSpaceNormalMap,decodeVideoTexture:!!a.map&&a.map.isVideoTexture===true&&a.map.encoding===sRGBEncoding,clearcoat:D,clearcoatMap:D&&!!a.clearcoatMap,clearcoatRoughnessMap:D&&!!a.clearcoatRoughnessMap,clearcoatNormalMap:D&&!!a.clearcoatNormalMap,displacementMap:!!a.displacementMap,roughnessMap:!!a.roughnessMap,metalnessMap:!!a.metalnessMap,specularMap:!!a.specularMap,specularIntensityMap:!!a.specularIntensityMap,specularColorMap:!!a.specularColorMap,opaque:a.transparent===false&&a.blending===NormalBlending,alphaMap:!!a.alphaMap,alphaTest:B,gradientMap:!!a.gradientMap,sheen:a.sheen>0,sheenColorMap:!!a.sheenColorMap,sheenRoughnessMap:!!a.sheenRoughnessMap,transmission:a.transmission>0,transmissionMap:!!a.transmissionMap,thicknessMap:!!a.thicknessMap,combine:a.combine,vertexTangents:!!a.normalMap&&!!v.attributes.tangent,vertexColors:a.vertexColors,vertexAlphas:a.vertexColors===true&&!!v.attributes.color&&v.attributes.color.itemSize===4,vertexUvs:!!a.map||!!a.bumpMap||!!a.normalMap||!!a.specularMap||!!a.alphaMap||!!a.emissiveMap||!!a.roughnessMap||!!a.metalnessMap||!!a.clearcoatMap||!!a.clearcoatRoughnessMap||!!a.clearcoatNormalMap||!!a.displacementMap||!!a.transmissionMap||!!a.thicknessMap||!!a.specularIntensityMap||!!a.specularColorMap||!!a.sheenColorMap||!!a.sheenRoughnessMap,uvsVertexOnly:!(!!a.map||!!a.bumpMap||!!a.normalMap||!!a.specularMap||!!a.alphaMap||!!a.emissiveMap||!!a.roughnessMap||!!a.metalnessMap||!!a.clearcoatNormalMap||a.transmission>0||!!a.transmissionMap||!!a.thicknessMap||!!a.specularIntensityMap||!!a.specularColorMap||a.sheen>0||!!a.sheenColorMap||!!a.sheenRoughnessMap)&&!!a.displacementMap,fog:!!x,useFog:a.fog,fogExp2:x&&x.isFogExp2,flatShading:!!a.flatShading,sizeAttenuation:a.sizeAttenuation,logarithmicDepthBuffer:h,skinning:y.isSkinnedMesh===true&&A>0,maxBones:A,useVertexTexture:d,morphTargets:v.morphAttributes.position!==undefined,morphNormals:v.morphAttributes.normal!==undefined,morphColors:v.morphAttributes.color!==undefined,morphTargetsCount:E,morphTextureStride:L,numDirLights:o.directional.length,numPointLights:o.point.length,numSpotLights:o.spot.length,numRectAreaLights:o.rectArea.length,numHemiLights:o.hemi.length,numDirLightShadows:o.directionalShadowMap.length,numPointLightShadows:o.pointShadowMap.length,numSpotLightShadows:o.spotShadowMap.length,numClippingPlanes:s.numPlanes,numClipIntersection:s.numIntersection,dithering:a.dithering,shadowMapEnabled:t.shadowMap.enabled&&c.length>0,shadowMapType:t.shadowMap.type,toneMapping:a.toneMapped?t.toneMapping:NoToneMapping,physicallyCorrectLights:t.physicallyCorrectLights,premultipliedAlpha:a.premultipliedAlpha,doubleSided:a.side===DoubleSide$1,flipSided:a.side===BackSide,depthPacking:a.depthPacking!==undefined?a.depthPacking:false,index0AttributeName:a.index0AttributeName,extensionDerivatives:a.extensions&&a.extensions.derivatives,extensionFragDepth:a.extensions&&a.extensions.fragDepth,extensionDrawBuffers:a.extensions&&a.extensions.drawBuffers,extensionShaderTextureLOD:a.extensions&&a.extensions.shaderTextureLOD,rendererExtensionFragDepth:u||i.has("EXT_frag_depth"),rendererExtensionDrawBuffers:u||i.has("WEBGL_draw_buffers"),rendererExtensionShaderTextureLod:u||i.has("EXT_shader_texture_lod"),customProgramCacheKey:a.customProgramCacheKey()};return N}function x(e){const n=[];if(e.shaderID){n.push(e.shaderID)}else{n.push(e.customVertexShaderID);n.push(e.customFragmentShaderID)}if(e.defines!==undefined){for(const t in e.defines){n.push(t);n.push(e.defines[t])}}if(e.isRawShaderMaterial===false){v(n,e);b(n,e);n.push(t.outputEncoding)}n.push(e.customProgramCacheKey);return n.join()}function v(t,e){t.push(e.precision);t.push(e.outputEncoding);t.push(e.envMapMode);t.push(e.envMapCubeUVHeight);t.push(e.combine);t.push(e.vertexUvs);t.push(e.fogExp2);t.push(e.sizeAttenuation);t.push(e.maxBones);t.push(e.morphTargetsCount);t.push(e.morphAttributeCount);t.push(e.numDirLights);t.push(e.numPointLights);t.push(e.numSpotLights);t.push(e.numHemiLights);t.push(e.numRectAreaLights);t.push(e.numDirLightShadows);t.push(e.numPointLightShadows);t.push(e.numSpotLightShadows);t.push(e.shadowMapType);t.push(e.toneMapping);t.push(e.numClippingPlanes);t.push(e.numClipIntersection)}function b(t,e){o.disableAll();if(e.isWebGL2)o.enable(0);if(e.supportsVertexTextures)o.enable(1);if(e.instancing)o.enable(2);if(e.instancingColor)o.enable(3);if(e.map)o.enable(4);if(e.matcap)o.enable(5);if(e.envMap)o.enable(6);if(e.lightMap)o.enable(7);if(e.aoMap)o.enable(8);if(e.emissiveMap)o.enable(9);if(e.bumpMap)o.enable(10);if(e.normalMap)o.enable(11);if(e.objectSpaceNormalMap)o.enable(12);if(e.tangentSpaceNormalMap)o.enable(13);if(e.clearcoat)o.enable(14);if(e.clearcoatMap)o.enable(15);if(e.clearcoatRoughnessMap)o.enable(16);if(e.clearcoatNormalMap)o.enable(17);if(e.displacementMap)o.enable(18);if(e.specularMap)o.enable(19);if(e.roughnessMap)o.enable(20);if(e.metalnessMap)o.enable(21);if(e.gradientMap)o.enable(22);if(e.alphaMap)o.enable(23);if(e.alphaTest)o.enable(24);if(e.vertexColors)o.enable(25);if(e.vertexAlphas)o.enable(26);if(e.vertexUvs)o.enable(27);if(e.vertexTangents)o.enable(28);if(e.uvsVertexOnly)o.enable(29);if(e.fog)o.enable(30);t.push(o.mask);o.disableAll();if(e.useFog)o.enable(0);if(e.flatShading)o.enable(1);if(e.logarithmicDepthBuffer)o.enable(2);if(e.skinning)o.enable(3);if(e.useVertexTexture)o.enable(4);if(e.morphTargets)o.enable(5);if(e.morphNormals)o.enable(6);if(e.morphColors)o.enable(7);if(e.premultipliedAlpha)o.enable(8);if(e.shadowMapEnabled)o.enable(9);if(e.physicallyCorrectLights)o.enable(10);if(e.doubleSided)o.enable(11);if(e.flipSided)o.enable(12);if(e.depthPacking)o.enable(13);if(e.dithering)o.enable(14);if(e.specularIntensityMap)o.enable(15);if(e.specularColorMap)o.enable(16);if(e.transmission)o.enable(17);if(e.transmissionMap)o.enable(18);if(e.thicknessMap)o.enable(19);if(e.sheen)o.enable(20);if(e.sheenColorMap)o.enable(21);if(e.sheenRoughnessMap)o.enable(22);if(e.decodeVideoTexture)o.enable(23);if(e.opaque)o.enable(24);t.push(o.mask)}function M(t){const e=g[t.type];let n;if(e){const t=ShaderLib[e];n=UniformsUtils.clone(t.uniforms)}else{n=t.uniforms}return n}function w(e,n){let i;for(let t=0,e=c.length;t<e;t++){const e=c[t];if(e.cacheKey===n){i=e;++i.usedTimes;break}}if(i===undefined){i=new WebGLProgram(t,n,e,a);c.push(i)}return i}function S(t){if(--t.usedTimes===0){const e=c.indexOf(t);c[e]=c[c.length-1];c.pop();t.destroy()}}function A(t){l.remove(t)}function T(){l.dispose()}return{getParameters:y,getProgramCacheKey:x,getUniforms:M,acquireProgram:w,releaseProgram:S,releaseShaderCache:A,programs:c,dispose:T}}function WebGLProperties(){let t=new WeakMap;function e(e){let n=t.get(e);if(n===undefined){n={};t.set(e,n)}return n}function n(e){t.delete(e)}function i(e,n,i){t.get(e)[n]=i}function r(){t=new WeakMap}return{get:e,remove:n,update:i,dispose:r}}function painterSortStable(t,e){if(t.groupOrder!==e.groupOrder){return t.groupOrder-e.groupOrder}else if(t.renderOrder!==e.renderOrder){return t.renderOrder-e.renderOrder}else if(t.material.id!==e.material.id){return t.material.id-e.material.id}else if(t.z!==e.z){return t.z-e.z}else{return t.id-e.id}}function reversePainterSortStable(t,e){if(t.groupOrder!==e.groupOrder){return t.groupOrder-e.groupOrder}else if(t.renderOrder!==e.renderOrder){return t.renderOrder-e.renderOrder}else if(t.z!==e.z){return e.z-t.z}else{return t.id-e.id}}function WebGLRenderList(){const t=[];let e=0;const n=[];const i=[];const r=[];function a(){e=0;n.length=0;i.length=0;r.length=0}function s(n,i,r,a,s,o){let l=t[e];if(l===undefined){l={id:n.id,object:n,geometry:i,material:r,groupOrder:a,renderOrder:n.renderOrder,z:s,group:o};t[e]=l}else{l.id=n.id;l.object=n;l.geometry=i;l.material=r;l.groupOrder=a;l.renderOrder=n.renderOrder;l.z=s;l.group=o}e++;return l}function o(t,e,a,o,l,c){const u=s(t,e,a,o,l,c);if(a.transmission>0){i.push(u)}else if(a.transparent===true){r.push(u)}else{n.push(u)}}function l(t,e,a,o,l,c){const u=s(t,e,a,o,l,c);if(a.transmission>0){i.unshift(u)}else if(a.transparent===true){r.unshift(u)}else{n.unshift(u)}}function c(t,e){if(n.length>1)n.sort(t||painterSortStable);if(i.length>1)i.sort(e||reversePainterSortStable);if(r.length>1)r.sort(e||reversePainterSortStable)}function u(){for(let n=e,i=t.length;n<i;n++){const e=t[n];if(e.id===null)break;e.id=null;e.object=null;e.geometry=null;e.material=null;e.group=null}}return{opaque:n,transmissive:i,transparent:r,init:a,push:o,unshift:l,finish:u,sort:c}}function WebGLRenderLists(){let t=new WeakMap;function e(e,n){let i;if(t.has(e)===false){i=new WebGLRenderList;t.set(e,[i])}else{if(n>=t.get(e).length){i=new WebGLRenderList;t.get(e).push(i)}else{i=t.get(e)[n]}}return i}function n(){t=new WeakMap}return{get:e,dispose:n}}function UniformsCache(){const t={};return{get:function(e){if(t[e.id]!==undefined){return t[e.id]}let n;switch(e.type){case"DirectionalLight":n={direction:new Vector3$1,color:new Color$1};break;case"SpotLight":n={position:new Vector3$1,direction:new Vector3$1,color:new Color$1,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new Vector3$1,color:new Color$1,distance:0,decay:0};break;case"HemisphereLight":n={direction:new Vector3$1,skyColor:new Color$1,groundColor:new Color$1};break;case"RectAreaLight":n={color:new Color$1,position:new Vector3$1,halfWidth:new Vector3$1,halfHeight:new Vector3$1};break}t[e.id]=n;return n}}}function ShadowUniformsCache(){const t={};return{get:function(e){if(t[e.id]!==undefined){return t[e.id]}let n;switch(e.type){case"DirectionalLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2};break;case"SpotLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2};break;case"PointLight":n={shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new Vector2,shadowCameraNear:1,shadowCameraFar:1e3};break}t[e.id]=n;return n}}}let nextVersion=0;function shadowCastingLightsFirst(t,e){return(e.castShadow?1:0)-(t.castShadow?1:0)}function WebGLLights(t,e){const n=new UniformsCache;const i=ShadowUniformsCache();const r={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotShadow:[],spotShadowMap:[],spotShadowMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[]};for(let t=0;t<9;t++)r.probe.push(new Vector3$1);const a=new Vector3$1;const s=new Matrix4$1;const o=new Matrix4$1;function l(a,s){let o=0,l=0,c=0;for(let t=0;t<9;t++)r.probe[t].set(0,0,0);let u=0;let h=0;let d=0;let f=0;let p=0;let m=0;let g=0;let _=0;a.sort(shadowCastingLightsFirst);const y=s!==true?Math.PI:1;for(let t=0,e=a.length;t<e;t++){const e=a[t];const s=e.color;const x=e.intensity;const v=e.distance;const b=e.shadow&&e.shadow.map?e.shadow.map.texture:null;if(e.isAmbientLight){o+=s.r*x*y;l+=s.g*x*y;c+=s.b*x*y}else if(e.isLightProbe){for(let t=0;t<9;t++){r.probe[t].addScaledVector(e.sh.coefficients[t],x)}}else if(e.isDirectionalLight){const t=n.get(e);t.color.copy(e.color).multiplyScalar(e.intensity*y);if(e.castShadow){const t=e.shadow;const n=i.get(e);n.shadowBias=t.bias;n.shadowNormalBias=t.normalBias;n.shadowRadius=t.radius;n.shadowMapSize=t.mapSize;r.directionalShadow[u]=n;r.directionalShadowMap[u]=b;r.directionalShadowMatrix[u]=e.shadow.matrix;m++}r.directional[u]=t;u++}else if(e.isSpotLight){const t=n.get(e);t.position.setFromMatrixPosition(e.matrixWorld);t.color.copy(s).multiplyScalar(x*y);t.distance=v;t.coneCos=Math.cos(e.angle);t.penumbraCos=Math.cos(e.angle*(1-e.penumbra));t.decay=e.decay;if(e.castShadow){const t=e.shadow;const n=i.get(e);n.shadowBias=t.bias;n.shadowNormalBias=t.normalBias;n.shadowRadius=t.radius;n.shadowMapSize=t.mapSize;r.spotShadow[d]=n;r.spotShadowMap[d]=b;r.spotShadowMatrix[d]=e.shadow.matrix;_++}r.spot[d]=t;d++}else if(e.isRectAreaLight){const t=n.get(e);t.color.copy(s).multiplyScalar(x);t.halfWidth.set(e.width*.5,0,0);t.halfHeight.set(0,e.height*.5,0);r.rectArea[f]=t;f++}else if(e.isPointLight){const t=n.get(e);t.color.copy(e.color).multiplyScalar(e.intensity*y);t.distance=e.distance;t.decay=e.decay;if(e.castShadow){const t=e.shadow;const n=i.get(e);n.shadowBias=t.bias;n.shadowNormalBias=t.normalBias;n.shadowRadius=t.radius;n.shadowMapSize=t.mapSize;n.shadowCameraNear=t.camera.near;n.shadowCameraFar=t.camera.far;r.pointShadow[h]=n;r.pointShadowMap[h]=b;r.pointShadowMatrix[h]=e.shadow.matrix;g++}r.point[h]=t;h++}else if(e.isHemisphereLight){const t=n.get(e);t.skyColor.copy(e.color).multiplyScalar(x*y);t.groundColor.copy(e.groundColor).multiplyScalar(x*y);r.hemi[p]=t;p++}}if(f>0){if(e.isWebGL2){r.rectAreaLTC1=UniformsLib.LTC_FLOAT_1;r.rectAreaLTC2=UniformsLib.LTC_FLOAT_2}else{if(t.has("OES_texture_float_linear")===true){r.rectAreaLTC1=UniformsLib.LTC_FLOAT_1;r.rectAreaLTC2=UniformsLib.LTC_FLOAT_2}else if(t.has("OES_texture_half_float_linear")===true){r.rectAreaLTC1=UniformsLib.LTC_HALF_1;r.rectAreaLTC2=UniformsLib.LTC_HALF_2}else{console.error("THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.")}}}r.ambient[0]=o;r.ambient[1]=l;r.ambient[2]=c;const x=r.hash;if(x.directionalLength!==u||x.pointLength!==h||x.spotLength!==d||x.rectAreaLength!==f||x.hemiLength!==p||x.numDirectionalShadows!==m||x.numPointShadows!==g||x.numSpotShadows!==_){r.directional.length=u;r.spot.length=d;r.rectArea.length=f;r.point.length=h;r.hemi.length=p;r.directionalShadow.length=m;r.directionalShadowMap.length=m;r.pointShadow.length=g;r.pointShadowMap.length=g;r.spotShadow.length=_;r.spotShadowMap.length=_;r.directionalShadowMatrix.length=m;r.pointShadowMatrix.length=g;r.spotShadowMatrix.length=_;x.directionalLength=u;x.pointLength=h;x.spotLength=d;x.rectAreaLength=f;x.hemiLength=p;x.numDirectionalShadows=m;x.numPointShadows=g;x.numSpotShadows=_;r.version=nextVersion++}}function c(t,e){let n=0;let i=0;let l=0;let c=0;let u=0;const h=e.matrixWorldInverse;for(let e=0,d=t.length;e<d;e++){const d=t[e];if(d.isDirectionalLight){const t=r.directional[n];t.direction.setFromMatrixPosition(d.matrixWorld);a.setFromMatrixPosition(d.target.matrixWorld);t.direction.sub(a);t.direction.transformDirection(h);n++}else if(d.isSpotLight){const t=r.spot[l];t.position.setFromMatrixPosition(d.matrixWorld);t.position.applyMatrix4(h);t.direction.setFromMatrixPosition(d.matrixWorld);a.setFromMatrixPosition(d.target.matrixWorld);t.direction.sub(a);t.direction.transformDirection(h);l++}else if(d.isRectAreaLight){const t=r.rectArea[c];t.position.setFromMatrixPosition(d.matrixWorld);t.position.applyMatrix4(h);o.identity();s.copy(d.matrixWorld);s.premultiply(h);o.extractRotation(s);t.halfWidth.set(d.width*.5,0,0);t.halfHeight.set(0,d.height*.5,0);t.halfWidth.applyMatrix4(o);t.halfHeight.applyMatrix4(o);c++}else if(d.isPointLight){const t=r.point[i];t.position.setFromMatrixPosition(d.matrixWorld);t.position.applyMatrix4(h);i++}else if(d.isHemisphereLight){const t=r.hemi[u];t.direction.setFromMatrixPosition(d.matrixWorld);t.direction.transformDirection(h);t.direction.normalize();u++}}}return{setup:l,setupView:c,state:r}}function WebGLRenderState(t,e){const n=new WebGLLights(t,e);const i=[];const r=[];function a(){i.length=0;r.length=0}function s(t){i.push(t)}function o(t){r.push(t)}function l(t){n.setup(i,t)}function c(t){n.setupView(i,t)}const u={lightsArray:i,shadowsArray:r,lights:n};return{init:a,state:u,setupLights:l,setupLightsView:c,pushLight:s,pushShadow:o}}function WebGLRenderStates(t,e){let n=new WeakMap;function i(i,r=0){let a;if(n.has(i)===false){a=new WebGLRenderState(t,e);n.set(i,[a])}else{if(r>=n.get(i).length){a=new WebGLRenderState(t,e);n.get(i).push(a)}else{a=n.get(i)[r]}}return a}function r(){n=new WeakMap}return{get:i,dispose:r}}class MeshDepthMaterial extends Material{constructor(t){super();this.type="MeshDepthMaterial";this.depthPacking=BasicDepthPacking;this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;this.setValues(t)}copy(t){super.copy(t);this.depthPacking=t.depthPacking;this.map=t.map;this.alphaMap=t.alphaMap;this.displacementMap=t.displacementMap;this.displacementScale=t.displacementScale;this.displacementBias=t.displacementBias;this.wireframe=t.wireframe;this.wireframeLinewidth=t.wireframeLinewidth;return this}}MeshDepthMaterial.prototype.isMeshDepthMaterial=true;class MeshDistanceMaterial extends Material{constructor(t){super();this.type="MeshDistanceMaterial";this.referencePosition=new Vector3$1;this.nearDistance=1;this.farDistance=1e3;this.map=null;this.alphaMap=null;this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.fog=false;this.setValues(t)}copy(t){super.copy(t);this.referencePosition.copy(t.referencePosition);this.nearDistance=t.nearDistance;this.farDistance=t.farDistance;this.map=t.map;this.alphaMap=t.alphaMap;this.displacementMap=t.displacementMap;this.displacementScale=t.displacementScale;this.displacementBias=t.displacementBias;return this}}MeshDistanceMaterial.prototype.isMeshDistanceMaterial=true;const vertex="void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";const fragment="uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";function WebGLShadowMap(t,e,n){let i=new Frustum;const r=new Vector2,a=new Vector2,s=new Vector4,o=new MeshDepthMaterial({depthPacking:RGBADepthPacking}),l=new MeshDistanceMaterial,c={},u=n.maxTextureSize;const h={0:BackSide,1:FrontSide,2:DoubleSide$1};const d=new ShaderMaterial({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new Vector2},radius:{value:4}},vertexShader:vertex,fragmentShader:fragment});const f=d.clone();f.defines.HORIZONTAL_PASS=1;const p=new BufferGeometry$1;p.setAttribute("position",new BufferAttribute(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const m=new Mesh$1(p,d);const g=this;this.enabled=false;this.autoUpdate=true;this.needsUpdate=false;this.type=PCFShadowMap;this.render=function(e,n,o){if(g.enabled===false)return;if(g.autoUpdate===false&&g.needsUpdate===false)return;if(e.length===0)return;const l=t.getRenderTarget();const c=t.getActiveCubeFace();const h=t.getActiveMipmapLevel();const d=t.state;d.setBlending(NoBlending);d.buffers.color.setClear(1,1,1,1);d.buffers.depth.setTest(true);d.setScissorTest(false);for(let l=0,c=e.length;l<c;l++){const c=e[l];const h=c.shadow;if(h===undefined){console.warn("THREE.WebGLShadowMap:",c,"has no shadow.");continue}if(h.autoUpdate===false&&h.needsUpdate===false)continue;r.copy(h.mapSize);const f=h.getFrameExtents();r.multiply(f);a.copy(h.mapSize);if(r.x>u||r.y>u){if(r.x>u){a.x=Math.floor(u/f.x);r.x=a.x*f.x;h.mapSize.x=a.x}if(r.y>u){a.y=Math.floor(u/f.y);r.y=a.y*f.y;h.mapSize.y=a.y}}if(h.map===null&&!h.isPointLightShadow&&this.type===VSMShadowMap){const t={minFilter:LinearFilter,magFilter:LinearFilter,format:RGBAFormat};h.map=new WebGLRenderTarget(r.x,r.y,t);h.map.texture.name=c.name+".shadowMap";h.mapPass=new WebGLRenderTarget(r.x,r.y,t);h.camera.updateProjectionMatrix()}if(h.map===null){const t={minFilter:NearestFilter,magFilter:NearestFilter,format:RGBAFormat};h.map=new WebGLRenderTarget(r.x,r.y,t);h.map.texture.name=c.name+".shadowMap";h.camera.updateProjectionMatrix()}t.setRenderTarget(h.map);t.clear();const p=h.getViewportCount();for(let t=0;t<p;t++){const e=h.getViewport(t);s.set(a.x*e.x,a.y*e.y,a.x*e.z,a.y*e.w);d.viewport(s);h.updateMatrices(c,t);i=h.getFrustum();x(n,o,h.camera,c,this.type)}if(!h.isPointLightShadow&&this.type===VSMShadowMap){_(h,o)}h.needsUpdate=false}g.needsUpdate=false;t.setRenderTarget(l,c,h)};function _(n,i){const r=e.update(m);if(d.defines.VSM_SAMPLES!==n.blurSamples){d.defines.VSM_SAMPLES=n.blurSamples;f.defines.VSM_SAMPLES=n.blurSamples;d.needsUpdate=true;f.needsUpdate=true}d.uniforms.shadow_pass.value=n.map.texture;d.uniforms.resolution.value=n.mapSize;d.uniforms.radius.value=n.radius;t.setRenderTarget(n.mapPass);t.clear();t.renderBufferDirect(i,null,r,d,m,null);f.uniforms.shadow_pass.value=n.mapPass.texture;f.uniforms.resolution.value=n.mapSize;f.uniforms.radius.value=n.radius;t.setRenderTarget(n.map);t.clear();t.renderBufferDirect(i,null,r,f,m,null)}function y(e,n,i,r,a,s){let u=null;const d=i.isPointLight===true?e.customDistanceMaterial:e.customDepthMaterial;if(d!==undefined){u=d}else{u=i.isPointLight===true?l:o}if(t.localClippingEnabled&&n.clipShadows===true&&n.clippingPlanes.length!==0||n.displacementMap&&n.displacementScale!==0||n.alphaMap&&n.alphaTest>0){const t=u.uuid,e=n.uuid;let i=c[t];if(i===undefined){i={};c[t]=i}let r=i[e];if(r===undefined){r=u.clone();i[e]=r}u=r}u.visible=n.visible;u.wireframe=n.wireframe;if(s===VSMShadowMap){u.side=n.shadowSide!==null?n.shadowSide:n.side}else{u.side=n.shadowSide!==null?n.shadowSide:h[n.side]}u.alphaMap=n.alphaMap;u.alphaTest=n.alphaTest;u.clipShadows=n.clipShadows;u.clippingPlanes=n.clippingPlanes;u.clipIntersection=n.clipIntersection;u.displacementMap=n.displacementMap;u.displacementScale=n.displacementScale;u.displacementBias=n.displacementBias;u.wireframeLinewidth=n.wireframeLinewidth;u.linewidth=n.linewidth;if(i.isPointLight===true&&u.isMeshDistanceMaterial===true){u.referencePosition.setFromMatrixPosition(i.matrixWorld);u.nearDistance=r;u.farDistance=a}return u}function x(n,r,a,s,o){if(n.visible===false)return;const l=n.layers.test(r.layers);if(l&&(n.isMesh||n.isLine||n.isPoints)){if((n.castShadow||n.receiveShadow&&o===VSMShadowMap)&&(!n.frustumCulled||i.intersectsObject(n))){n.modelViewMatrix.multiplyMatrices(a.matrixWorldInverse,n.matrixWorld);const i=e.update(n);const r=n.material;if(Array.isArray(r)){const e=i.groups;for(let l=0,c=e.length;l<c;l++){const c=e[l];const u=r[c.materialIndex];if(u&&u.visible){const e=y(n,u,s,a.near,a.far,o);t.renderBufferDirect(a,null,i,e,n,c)}}}else if(r.visible){const e=y(n,r,s,a.near,a.far,o);t.renderBufferDirect(a,null,i,e,n,null)}}}const c=n.children;for(let t=0,e=c.length;t<e;t++){x(c[t],r,a,s,o)}}}function WebGLState(t,e,n){const i=n.isWebGL2;function r(){let e=false;const n=new Vector4;let i=null;const r=new Vector4(0,0,0,0);return{setMask:function(n){if(i!==n&&!e){t.colorMask(n,n,n,n);i=n}},setLocked:function(t){e=t},setClear:function(e,i,a,s,o){if(o===true){e*=s;i*=s;a*=s}n.set(e,i,a,s);if(r.equals(n)===false){t.clearColor(e,i,a,s);r.copy(n)}},reset:function(){e=false;i=null;r.set(-1,0,0,0)}}}function a(){let e=false;let n=null;let i=null;let r=null;return{setTest:function(t){if(t){z(2929)}else{$(2929)}},setMask:function(i){if(n!==i&&!e){t.depthMask(i);n=i}},setFunc:function(e){if(i!==e){if(e){switch(e){case NeverDepth:t.depthFunc(512);break;case AlwaysDepth:t.depthFunc(519);break;case LessDepth:t.depthFunc(513);break;case LessEqualDepth:t.depthFunc(515);break;case EqualDepth:t.depthFunc(514);break;case GreaterEqualDepth:t.depthFunc(518);break;case GreaterDepth:t.depthFunc(516);break;case NotEqualDepth:t.depthFunc(517);break;default:t.depthFunc(515)}}else{t.depthFunc(515)}i=e}},setLocked:function(t){e=t},setClear:function(e){if(r!==e){t.clearDepth(e);r=e}},reset:function(){e=false;n=null;i=null;r=null}}}function s(){let e=false;let n=null;let i=null;let r=null;let a=null;let s=null;let o=null;let l=null;let c=null;return{setTest:function(t){if(!e){if(t){z(2960)}else{$(2960)}}},setMask:function(i){if(n!==i&&!e){t.stencilMask(i);n=i}},setFunc:function(e,n,s){if(i!==e||r!==n||a!==s){t.stencilFunc(e,n,s);i=e;r=n;a=s}},setOp:function(e,n,i){if(s!==e||o!==n||l!==i){t.stencilOp(e,n,i);s=e;o=n;l=i}},setLocked:function(t){e=t},setClear:function(e){if(c!==e){t.clearStencil(e);c=e}},reset:function(){e=false;n=null;i=null;r=null;a=null;s=null;o=null;l=null;c=null}}}const o=new r;const l=new a;const c=new s;let u={};let h={};let d=new WeakMap;let f=[];let p=null;let m=false;let g=null;let _=null;let y=null;let x=null;let v=null;let b=null;let M=null;let w=false;let S=null;let A=null;let T=null;let E=null;let L=null;const C=t.getParameter(35661);let P=false;let R=0;const F=t.getParameter(7938);if(F.indexOf("WebGL")!==-1){R=parseFloat(/^WebGL (\d)/.exec(F)[1]);P=R>=1}else if(F.indexOf("OpenGL ES")!==-1){R=parseFloat(/^OpenGL ES (\d)/.exec(F)[1]);P=R>=2}let I=null;let B={};const D=t.getParameter(3088);const N=t.getParameter(2978);const U=(new Vector4).fromArray(D);const V=(new Vector4).fromArray(N);function G(e,n,i){const r=new Uint8Array(4);const a=t.createTexture();t.bindTexture(e,a);t.texParameteri(e,10241,9728);t.texParameteri(e,10240,9728);for(let e=0;e<i;e++){t.texImage2D(n+e,0,6408,1,1,0,6408,5121,r)}return a}const O={};O[3553]=G(3553,3553,1);O[34067]=G(34067,34069,6);o.setClear(0,0,0,1);l.setClear(1);c.setClear(0);z(2929);l.setFunc(LessEqualDepth);q(false);J(CullFaceBack);z(2884);Y(NoBlending);function z(e){if(u[e]!==true){t.enable(e);u[e]=true}}function $(e){if(u[e]!==false){t.disable(e);u[e]=false}}function H(e,n){if(h[e]!==n){t.bindFramebuffer(e,n);h[e]=n;if(i){if(e===36009){h[36160]=n}if(e===36160){h[36009]=n}}return true}return false}function k(i,r){let a=f;let s=false;if(i){a=d.get(r);if(a===undefined){a=[];d.set(r,a)}if(i.isWebGLMultipleRenderTargets){const t=i.texture;if(a.length!==t.length||a[0]!==36064){for(let e=0,n=t.length;e<n;e++){a[e]=36064+e}a.length=t.length;s=true}}else{if(a[0]!==36064){a[0]=36064;s=true}}}else{if(a[0]!==1029){a[0]=1029;s=true}}if(s){if(n.isWebGL2){t.drawBuffers(a)}else{e.get("WEBGL_draw_buffers").drawBuffersWEBGL(a)}}}function W(e){if(p!==e){t.useProgram(e);p=e;return true}return false}const j={[AddEquation]:32774,[SubtractEquation]:32778,[ReverseSubtractEquation]:32779};if(i){j[MinEquation]=32775;j[MaxEquation]=32776}else{const t=e.get("EXT_blend_minmax");if(t!==null){j[MinEquation]=t.MIN_EXT;j[MaxEquation]=t.MAX_EXT}}const X={[ZeroFactor]:0,[OneFactor]:1,[SrcColorFactor]:768,[SrcAlphaFactor]:770,[SrcAlphaSaturateFactor]:776,[DstColorFactor]:774,[DstAlphaFactor]:772,[OneMinusSrcColorFactor]:769,[OneMinusSrcAlphaFactor]:771,[OneMinusDstColorFactor]:775,[OneMinusDstAlphaFactor]:773};function Y(e,n,i,r,a,s,o,l){if(e===NoBlending){if(m===true){$(3042);m=false}return}if(m===false){z(3042);m=true}if(e!==CustomBlending){if(e!==g||l!==w){if(_!==AddEquation||v!==AddEquation){t.blendEquation(32774);_=AddEquation;v=AddEquation}if(l){switch(e){case NormalBlending:t.blendFuncSeparate(1,771,1,771);break;case AdditiveBlending:t.blendFunc(1,1);break;case SubtractiveBlending:t.blendFuncSeparate(0,769,0,1);break;case MultiplyBlending:t.blendFuncSeparate(0,768,0,770);break;default:console.error("THREE.WebGLState: Invalid blending: ",e);break}}else{switch(e){case NormalBlending:t.blendFuncSeparate(770,771,1,771);break;case AdditiveBlending:t.blendFunc(770,1);break;case SubtractiveBlending:t.blendFuncSeparate(0,769,0,1);break;case MultiplyBlending:t.blendFunc(0,768);break;default:console.error("THREE.WebGLState: Invalid blending: ",e);break}}y=null;x=null;b=null;M=null;g=e;w=l}return}a=a||n;s=s||i;o=o||r;if(n!==_||a!==v){t.blendEquationSeparate(j[n],j[a]);_=n;v=a}if(i!==y||r!==x||s!==b||o!==M){t.blendFuncSeparate(X[i],X[r],X[s],X[o]);y=i;x=r;b=s;M=o}g=e;w=null}function Q(t,e){t.side===DoubleSide$1?$(2884):z(2884);let n=t.side===BackSide;if(e)n=!n;q(n);t.blending===NormalBlending&&t.transparent===false?Y(NoBlending):Y(t.blending,t.blendEquation,t.blendSrc,t.blendDst,t.blendEquationAlpha,t.blendSrcAlpha,t.blendDstAlpha,t.premultipliedAlpha);l.setFunc(t.depthFunc);l.setTest(t.depthTest);l.setMask(t.depthWrite);o.setMask(t.colorWrite);const i=t.stencilWrite;c.setTest(i);if(i){c.setMask(t.stencilWriteMask);c.setFunc(t.stencilFunc,t.stencilRef,t.stencilFuncMask);c.setOp(t.stencilFail,t.stencilZFail,t.stencilZPass)}K(t.polygonOffset,t.polygonOffsetFactor,t.polygonOffsetUnits);t.alphaToCoverage===true?z(32926):$(32926)}function q(e){if(S!==e){if(e){t.frontFace(2304)}else{t.frontFace(2305)}S=e}}function J(e){if(e!==CullFaceNone){z(2884);if(e!==A){if(e===CullFaceBack){t.cullFace(1029)}else if(e===CullFaceFront){t.cullFace(1028)}else{t.cullFace(1032)}}}else{$(2884)}A=e}function Z(e){if(e!==T){if(P)t.lineWidth(e);T=e}}function K(e,n,i){if(e){z(32823);if(E!==n||L!==i){t.polygonOffset(n,i);E=n;L=i}}else{$(32823)}}function tt(t){if(t){z(3089)}else{$(3089)}}function et(e){if(e===undefined)e=33984+C-1;if(I!==e){t.activeTexture(e);I=e}}function nt(e,n){if(I===null){et()}let i=B[I];if(i===undefined){i={type:undefined,texture:undefined};B[I]=i}if(i.type!==e||i.texture!==n){t.bindTexture(e,n||O[e]);i.type=e;i.texture=n}}function it(){const e=B[I];if(e!==undefined&&e.type!==undefined){t.bindTexture(e.type,null);e.type=undefined;e.texture=undefined}}function rt(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}}function at(){try{t.texSubImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}}function st(){try{t.texSubImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}}function ot(){try{t.compressedTexSubImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}}function lt(){try{t.texStorage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}}function ct(){try{t.texStorage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}}function ut(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}}function ht(){try{t.texImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}}function dt(e){if(U.equals(e)===false){t.scissor(e.x,e.y,e.z,e.w);U.copy(e)}}function ft(e){if(V.equals(e)===false){t.viewport(e.x,e.y,e.z,e.w);V.copy(e)}}function pt(){t.disable(3042);t.disable(2884);t.disable(2929);t.disable(32823);t.disable(3089);t.disable(2960);t.disable(32926);t.blendEquation(32774);t.blendFunc(1,0);t.blendFuncSeparate(1,0,1,0);t.colorMask(true,true,true,true);t.clearColor(0,0,0,0);t.depthMask(true);t.depthFunc(513);t.clearDepth(1);t.stencilMask(4294967295);t.stencilFunc(519,0,4294967295);t.stencilOp(7680,7680,7680);t.clearStencil(0);t.cullFace(1029);t.frontFace(2305);t.polygonOffset(0,0);t.activeTexture(33984);t.bindFramebuffer(36160,null);if(i===true){t.bindFramebuffer(36009,null);t.bindFramebuffer(36008,null)}t.useProgram(null);t.lineWidth(1);t.scissor(0,0,t.canvas.width,t.canvas.height);t.viewport(0,0,t.canvas.width,t.canvas.height);u={};I=null;B={};h={};d=new WeakMap;f=[];p=null;m=false;g=null;_=null;y=null;x=null;v=null;b=null;M=null;w=false;S=null;A=null;T=null;E=null;L=null;U.set(0,0,t.canvas.width,t.canvas.height);V.set(0,0,t.canvas.width,t.canvas.height);o.reset();l.reset();c.reset()}return{buffers:{color:o,depth:l,stencil:c},enable:z,disable:$,bindFramebuffer:H,drawBuffers:k,useProgram:W,setBlending:Y,setMaterial:Q,setFlipSided:q,setCullFace:J,setLineWidth:Z,setPolygonOffset:K,setScissorTest:tt,activeTexture:et,bindTexture:nt,unbindTexture:it,compressedTexImage2D:rt,texImage2D:ut,texImage3D:ht,texStorage2D:lt,texStorage3D:ct,texSubImage2D:at,texSubImage3D:st,compressedTexSubImage2D:ot,scissor:dt,viewport:ft,reset:pt}}function WebGLTextures(t,e,n,i,r,a,s){const o=r.isWebGL2;const l=r.maxTextures;const c=r.maxCubemapSize;const u=r.maxTextureSize;const h=r.maxSamples;const d=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null;const f=new WeakMap;let p;const m=new WeakMap;let g=false;try{g=typeof OffscreenCanvas!=="undefined"&&new OffscreenCanvas(1,1).getContext("2d")!==null}catch(t){}function _(t,e){return g?new OffscreenCanvas(t,e):createElementNS("canvas")}function y(t,e,n,i){let r=1;if(t.width>i||t.height>i){r=i/Math.max(t.width,t.height)}if(r<1||e===true){if(typeof HTMLImageElement!=="undefined"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement!=="undefined"&&t instanceof HTMLCanvasElement||typeof ImageBitmap!=="undefined"&&t instanceof ImageBitmap){const i=e?floorPowerOfTwo:Math.floor;const a=i(r*t.width);const s=i(r*t.height);if(p===undefined)p=_(a,s);const o=n?_(a,s):p;o.width=a;o.height=s;const l=o.getContext("2d");l.drawImage(t,0,0,a,s);console.warn("THREE.WebGLRenderer: Texture has been resized from ("+t.width+"x"+t.height+") to ("+a+"x"+s+").");return o}else{if("data"in t){console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+t.width+"x"+t.height+").")}return t}}return t}function x(t){return isPowerOfTwo(t.width)&&isPowerOfTwo(t.height)}function v(t){if(o)return false;return t.wrapS!==ClampToEdgeWrapping||t.wrapT!==ClampToEdgeWrapping||t.minFilter!==NearestFilter&&t.minFilter!==LinearFilter}function b(t,e){return t.generateMipmaps&&e&&t.minFilter!==NearestFilter&&t.minFilter!==LinearFilter}function M(e){t.generateMipmap(e)}function w(n,i,r,a,s=false){if(o===false)return i;if(n!==null){if(t[n]!==undefined)return t[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'")}let l=i;if(i===6403){if(r===5126)l=33326;if(r===5131)l=33325;if(r===5121)l=33321}if(i===33319){if(r===5126)l=33328;if(r===5131)l=33327;if(r===5121)l=33323}if(i===6408){if(r===5126)l=34836;if(r===5131)l=34842;if(r===5121)l=a===sRGBEncoding&&s===false?35907:32856;if(r===32819)l=32854;if(r===32820)l=32855}if(l===33325||l===33326||l===33327||l===33328||l===34842||l===34836){e.get("EXT_color_buffer_float")}return l}function S(t,e,n){if(b(t,n)===true||t.isFramebufferTexture&&t.minFilter!==NearestFilter&&t.minFilter!==LinearFilter){return Math.log2(Math.max(e.width,e.height))+1}else if(t.mipmaps!==undefined&&t.mipmaps.length>0){return t.mipmaps.length}else if(t.isCompressedTexture&&Array.isArray(t.image)){return e.mipmaps.length}else{return 1}}function A(t){if(t===NearestFilter||t===NearestMipmapNearestFilter||t===NearestMipmapLinearFilter){return 9728}return 9729}function T(t){const e=t.target;e.removeEventListener("dispose",T);L(e);if(e.isVideoTexture){f.delete(e)}}function E(t){const e=t.target;e.removeEventListener("dispose",E);P(e)}function L(t){const e=i.get(t);if(e.__webglInit===undefined)return;const n=t.source;const r=m.get(n);if(r){const i=r[e.__cacheKey];i.usedTimes--;if(i.usedTimes===0){C(t)}if(Object.keys(r).length===0){m.delete(n)}}i.remove(t)}function C(e){const n=i.get(e);t.deleteTexture(n.__webglTexture);const r=e.source;const a=m.get(r);delete a[n.__cacheKey];s.memory.textures--}function P(e){const n=e.texture;const r=i.get(e);const a=i.get(n);if(a.__webglTexture!==undefined){t.deleteTexture(a.__webglTexture);s.memory.textures--}if(e.depthTexture){e.depthTexture.dispose()}if(e.isWebGLCubeRenderTarget){for(let e=0;e<6;e++){t.deleteFramebuffer(r.__webglFramebuffer[e]);if(r.__webglDepthbuffer)t.deleteRenderbuffer(r.__webglDepthbuffer[e])}}else{t.deleteFramebuffer(r.__webglFramebuffer);if(r.__webglDepthbuffer)t.deleteRenderbuffer(r.__webglDepthbuffer);if(r.__webglMultisampledFramebuffer)t.deleteFramebuffer(r.__webglMultisampledFramebuffer);if(r.__webglColorRenderbuffer)t.deleteRenderbuffer(r.__webglColorRenderbuffer);if(r.__webglDepthRenderbuffer)t.deleteRenderbuffer(r.__webglDepthRenderbuffer)}if(e.isWebGLMultipleRenderTargets){for(let e=0,r=n.length;e<r;e++){const r=i.get(n[e]);if(r.__webglTexture){t.deleteTexture(r.__webglTexture);s.memory.textures--}i.remove(n[e])}}i.remove(n);i.remove(e)}let R=0;function F(){R=0}function I(){const t=R;if(t>=l){console.warn("THREE.WebGLTextures: Trying to use "+t+" texture units while this GPU supports only "+l)}R+=1;return t}function B(t){const e=[];e.push(t.wrapS);e.push(t.wrapT);e.push(t.magFilter);e.push(t.minFilter);e.push(t.anisotropy);e.push(t.internalFormat);e.push(t.format);e.push(t.type);e.push(t.generateMipmaps);e.push(t.premultiplyAlpha);e.push(t.flipY);e.push(t.unpackAlignment);e.push(t.encoding);return e.join()}function D(t,e){const r=i.get(t);if(t.isVideoTexture)et(t);if(t.isRenderTargetTexture===false&&t.version>0&&r.__version!==t.version){const n=t.image;if(n===null){console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.")}else if(n.complete===false){console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}else{H(r,t,e);return}}n.activeTexture(33984+e);n.bindTexture(3553,r.__webglTexture)}function N(t,e){const r=i.get(t);if(t.version>0&&r.__version!==t.version){H(r,t,e);return}n.activeTexture(33984+e);n.bindTexture(35866,r.__webglTexture)}function U(t,e){const r=i.get(t);if(t.version>0&&r.__version!==t.version){H(r,t,e);return}n.activeTexture(33984+e);n.bindTexture(32879,r.__webglTexture)}function V(t,e){const r=i.get(t);if(t.version>0&&r.__version!==t.version){k(r,t,e);return}n.activeTexture(33984+e);n.bindTexture(34067,r.__webglTexture)}const G={[RepeatWrapping]:10497,[ClampToEdgeWrapping]:33071,[MirroredRepeatWrapping]:33648};const O={[NearestFilter]:9728,[NearestMipmapNearestFilter]:9984,[NearestMipmapLinearFilter]:9986,[LinearFilter]:9729,[LinearMipmapNearestFilter]:9985,[LinearMipmapLinearFilter]:9987};function z(n,a,s){if(s){t.texParameteri(n,10242,G[a.wrapS]);t.texParameteri(n,10243,G[a.wrapT]);if(n===32879||n===35866){t.texParameteri(n,32882,G[a.wrapR])}t.texParameteri(n,10240,O[a.magFilter]);t.texParameteri(n,10241,O[a.minFilter])}else{t.texParameteri(n,10242,33071);t.texParameteri(n,10243,33071);if(n===32879||n===35866){t.texParameteri(n,32882,33071)}if(a.wrapS!==ClampToEdgeWrapping||a.wrapT!==ClampToEdgeWrapping){console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.")}t.texParameteri(n,10240,A(a.magFilter));t.texParameteri(n,10241,A(a.minFilter));if(a.minFilter!==NearestFilter&&a.minFilter!==LinearFilter){console.warn("THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.")}}if(e.has("EXT_texture_filter_anisotropic")===true){const s=e.get("EXT_texture_filter_anisotropic");if(a.type===FloatType&&e.has("OES_texture_float_linear")===false)return;if(o===false&&(a.type===HalfFloatType&&e.has("OES_texture_half_float_linear")===false))return;if(a.anisotropy>1||i.get(a).__currentAnisotropy){t.texParameterf(n,s.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(a.anisotropy,r.getMaxAnisotropy()));i.get(a).__currentAnisotropy=a.anisotropy}}}function $(e,n){let i=false;if(e.__webglInit===undefined){e.__webglInit=true;n.addEventListener("dispose",T)}const r=n.source;let a=m.get(r);if(a===undefined){a={};m.set(r,a)}const o=B(n);if(o!==e.__cacheKey){if(a[o]===undefined){a[o]={texture:t.createTexture(),usedTimes:0};s.memory.textures++;i=true}a[o].usedTimes++;const r=a[e.__cacheKey];if(r!==undefined){a[e.__cacheKey].usedTimes--;if(r.usedTimes===0){C(n)}}e.__cacheKey=o;e.__webglTexture=a[o].texture}return i}function H(e,i,r){let s=3553;if(i.isDataArrayTexture)s=35866;if(i.isData3DTexture)s=32879;const l=$(e,i);const c=i.source;n.activeTexture(33984+r);n.bindTexture(s,e.__webglTexture);if(c.version!==c.__currentVersion||l===true){t.pixelStorei(37440,i.flipY);t.pixelStorei(37441,i.premultiplyAlpha);t.pixelStorei(3317,i.unpackAlignment);t.pixelStorei(37443,0);const r=v(i)&&x(i.image)===false;let l=y(i.image,r,false,u);l=nt(i,l);const h=x(l)||o,d=a.convert(i.format,i.encoding);let f=a.convert(i.type),p=w(i.internalFormat,d,f,i.encoding,i.isVideoTexture);z(s,i,h);let m;const g=i.mipmaps;const _=o&&i.isVideoTexture!==true;const A=e.__version===undefined;const T=S(i,l,h);if(i.isDepthTexture){p=6402;if(o){if(i.type===FloatType){p=36012}else if(i.type===UnsignedIntType){p=33190}else if(i.type===UnsignedInt248Type){p=35056}else{p=33189}}else{if(i.type===FloatType){console.error("WebGLRenderer: Floating point depth texture requires WebGL2.")}}if(i.format===DepthFormat&&p===6402){if(i.type!==UnsignedShortType&&i.type!==UnsignedIntType){console.warn("THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.");i.type=UnsignedShortType;f=a.convert(i.type)}}if(i.format===DepthStencilFormat&&p===6402){p=34041;if(i.type!==UnsignedInt248Type){console.warn("THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.");i.type=UnsignedInt248Type;f=a.convert(i.type)}}if(_&&A){n.texStorage2D(3553,1,p,l.width,l.height)}else{n.texImage2D(3553,0,p,l.width,l.height,0,d,f,null)}}else if(i.isDataTexture){if(g.length>0&&h){if(_&&A){n.texStorage2D(3553,T,p,g[0].width,g[0].height)}for(let t=0,e=g.length;t<e;t++){m=g[t];if(_){n.texSubImage2D(3553,t,0,0,m.width,m.height,d,f,m.data)}else{n.texImage2D(3553,t,p,m.width,m.height,0,d,f,m.data)}}i.generateMipmaps=false}else{if(_){if(A){n.texStorage2D(3553,T,p,l.width,l.height)}n.texSubImage2D(3553,0,0,0,l.width,l.height,d,f,l.data)}else{n.texImage2D(3553,0,p,l.width,l.height,0,d,f,l.data)}}}else if(i.isCompressedTexture){if(_&&A){n.texStorage2D(3553,T,p,g[0].width,g[0].height)}for(let t=0,e=g.length;t<e;t++){m=g[t];if(i.format!==RGBAFormat){if(d!==null){if(_){n.compressedTexSubImage2D(3553,t,0,0,m.width,m.height,d,m.data)}else{n.compressedTexImage2D(3553,t,p,m.width,m.height,0,m.data)}}else{console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()")}}else{if(_){n.texSubImage2D(3553,t,0,0,m.width,m.height,d,f,m.data)}else{n.texImage2D(3553,t,p,m.width,m.height,0,d,f,m.data)}}}}else if(i.isDataArrayTexture){if(_){if(A){n.texStorage3D(35866,T,p,l.width,l.height,l.depth)}n.texSubImage3D(35866,0,0,0,0,l.width,l.height,l.depth,d,f,l.data)}else{n.texImage3D(35866,0,p,l.width,l.height,l.depth,0,d,f,l.data)}}else if(i.isData3DTexture){if(_){if(A){n.texStorage3D(32879,T,p,l.width,l.height,l.depth)}n.texSubImage3D(32879,0,0,0,0,l.width,l.height,l.depth,d,f,l.data)}else{n.texImage3D(32879,0,p,l.width,l.height,l.depth,0,d,f,l.data)}}else if(i.isFramebufferTexture){if(_&&A){n.texStorage2D(3553,T,p,l.width,l.height)}else{n.texImage2D(3553,0,p,l.width,l.height,0,d,f,null)}}else{if(g.length>0&&h){if(_&&A){n.texStorage2D(3553,T,p,g[0].width,g[0].height)}for(let t=0,e=g.length;t<e;t++){m=g[t];if(_){n.texSubImage2D(3553,t,0,0,d,f,m)}else{n.texImage2D(3553,t,p,d,f,m)}}i.generateMipmaps=false}else{if(_){if(A){n.texStorage2D(3553,T,p,l.width,l.height)}n.texSubImage2D(3553,0,0,0,d,f,l)}else{n.texImage2D(3553,0,p,d,f,l)}}}if(b(i,h)){M(s)}c.__currentVersion=c.version;if(i.onUpdate)i.onUpdate(i)}e.__version=i.version}function k(e,i,r){if(i.image.length!==6)return;const s=$(e,i);const l=i.source;n.activeTexture(33984+r);n.bindTexture(34067,e.__webglTexture);if(l.version!==l.__currentVersion||s===true){t.pixelStorei(37440,i.flipY);t.pixelStorei(37441,i.premultiplyAlpha);t.pixelStorei(3317,i.unpackAlignment);t.pixelStorei(37443,0);const r=i.isCompressedTexture||i.image[0].isCompressedTexture;const s=i.image[0]&&i.image[0].isDataTexture;const u=[];for(let t=0;t<6;t++){if(!r&&!s){u[t]=y(i.image[t],false,true,c)}else{u[t]=s?i.image[t].image:i.image[t]}u[t]=nt(i,u[t])}const h=u[0],d=x(h)||o,f=a.convert(i.format,i.encoding),p=a.convert(i.type),m=w(i.internalFormat,f,p,i.encoding);const g=o&&i.isVideoTexture!==true;const _=e.__version===undefined;let v=S(i,h,d);z(34067,i,d);let A;if(r){if(g&&_){n.texStorage2D(34067,v,m,h.width,h.height)}for(let t=0;t<6;t++){A=u[t].mipmaps;for(let e=0;e<A.length;e++){const r=A[e];if(i.format!==RGBAFormat){if(f!==null){if(g){n.compressedTexSubImage2D(34069+t,e,0,0,r.width,r.height,f,r.data)}else{n.compressedTexImage2D(34069+t,e,m,r.width,r.height,0,r.data)}}else{console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()")}}else{if(g){n.texSubImage2D(34069+t,e,0,0,r.width,r.height,f,p,r.data)}else{n.texImage2D(34069+t,e,m,r.width,r.height,0,f,p,r.data)}}}}}else{A=i.mipmaps;if(g&&_){if(A.length>0)v++;n.texStorage2D(34067,v,m,u[0].width,u[0].height)}for(let t=0;t<6;t++){if(s){if(g){n.texSubImage2D(34069+t,0,0,0,u[t].width,u[t].height,f,p,u[t].data)}else{n.texImage2D(34069+t,0,m,u[t].width,u[t].height,0,f,p,u[t].data)}for(let e=0;e<A.length;e++){const i=A[e];const r=i.image[t].image;if(g){n.texSubImage2D(34069+t,e+1,0,0,r.width,r.height,f,p,r.data)}else{n.texImage2D(34069+t,e+1,m,r.width,r.height,0,f,p,r.data)}}}else{if(g){n.texSubImage2D(34069+t,0,0,0,f,p,u[t])}else{n.texImage2D(34069+t,0,m,f,p,u[t])}for(let e=0;e<A.length;e++){const i=A[e];if(g){n.texSubImage2D(34069+t,e+1,0,0,f,p,i.image[t])}else{n.texImage2D(34069+t,e+1,m,f,p,i.image[t])}}}}}if(b(i,d)){M(34067)}l.__currentVersion=l.version;if(i.onUpdate)i.onUpdate(i)}e.__version=i.version}function W(e,r,s,o,l){const c=a.convert(s.format,s.encoding);const u=a.convert(s.type);const h=w(s.internalFormat,c,u,s.encoding);const f=i.get(r);if(!f.__hasExternalTextures){if(l===32879||l===35866){n.texImage3D(l,0,h,r.width,r.height,r.depth,0,c,u,null)}else{n.texImage2D(l,0,h,r.width,r.height,0,c,u,null)}}n.bindFramebuffer(36160,e);if(tt(r)){d.framebufferTexture2DMultisampleEXT(36160,o,l,i.get(s).__webglTexture,0,K(r))}else{t.framebufferTexture2D(36160,o,l,i.get(s).__webglTexture,0)}n.bindFramebuffer(36160,null)}function j(e,n,i){t.bindRenderbuffer(36161,e);if(n.depthBuffer&&!n.stencilBuffer){let r=33189;if(i||tt(n)){const e=n.depthTexture;if(e&&e.isDepthTexture){if(e.type===FloatType){r=36012}else if(e.type===UnsignedIntType){r=33190}}const i=K(n);if(tt(n)){d.renderbufferStorageMultisampleEXT(36161,i,r,n.width,n.height)}else{t.renderbufferStorageMultisample(36161,i,r,n.width,n.height)}}else{t.renderbufferStorage(36161,r,n.width,n.height)}t.framebufferRenderbuffer(36160,36096,36161,e)}else if(n.depthBuffer&&n.stencilBuffer){const r=K(n);if(i&&tt(n)===false){t.renderbufferStorageMultisample(36161,r,35056,n.width,n.height)}else if(tt(n)){d.renderbufferStorageMultisampleEXT(36161,r,35056,n.width,n.height)}else{t.renderbufferStorage(36161,34041,n.width,n.height)}t.framebufferRenderbuffer(36160,33306,36161,e)}else{const e=n.isWebGLMultipleRenderTargets===true?n.texture[0]:n.texture;const r=a.convert(e.format,e.encoding);const s=a.convert(e.type);const o=w(e.internalFormat,r,s,e.encoding);const l=K(n);if(i&&tt(n)===false){t.renderbufferStorageMultisample(36161,l,o,n.width,n.height)}else if(tt(n)){d.renderbufferStorageMultisampleEXT(36161,l,o,n.width,n.height)}else{t.renderbufferStorage(36161,o,n.width,n.height)}}t.bindRenderbuffer(36161,null)}function X(e,r){const a=r&&r.isWebGLCubeRenderTarget;if(a)throw new Error("Depth Texture with cube render targets is not supported");n.bindFramebuffer(36160,e);if(!(r.depthTexture&&r.depthTexture.isDepthTexture)){throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture")}if(!i.get(r.depthTexture).__webglTexture||r.depthTexture.image.width!==r.width||r.depthTexture.image.height!==r.height){r.depthTexture.image.width=r.width;r.depthTexture.image.height=r.height;r.depthTexture.needsUpdate=true}D(r.depthTexture,0);const s=i.get(r.depthTexture).__webglTexture;const o=K(r);if(r.depthTexture.format===DepthFormat){if(tt(r)){d.framebufferTexture2DMultisampleEXT(36160,36096,3553,s,0,o)}else{t.framebufferTexture2D(36160,36096,3553,s,0)}}else if(r.depthTexture.format===DepthStencilFormat){if(tt(r)){d.framebufferTexture2DMultisampleEXT(36160,33306,3553,s,0,o)}else{t.framebufferTexture2D(36160,33306,3553,s,0)}}else{throw new Error("Unknown depthTexture format")}}function Y(e){const r=i.get(e);const a=e.isWebGLCubeRenderTarget===true;if(e.depthTexture&&!r.__autoAllocateDepthBuffer){if(a)throw new Error("target.depthTexture not supported in Cube render targets");X(r.__webglFramebuffer,e)}else{if(a){r.__webglDepthbuffer=[];for(let i=0;i<6;i++){n.bindFramebuffer(36160,r.__webglFramebuffer[i]);r.__webglDepthbuffer[i]=t.createRenderbuffer();j(r.__webglDepthbuffer[i],e,false)}}else{n.bindFramebuffer(36160,r.__webglFramebuffer);r.__webglDepthbuffer=t.createRenderbuffer();j(r.__webglDepthbuffer,e,false)}}n.bindFramebuffer(36160,null)}function Q(t,e,n){const r=i.get(t);if(e!==undefined){W(r.__webglFramebuffer,t,t.texture,36064,3553)}if(n!==undefined){Y(t)}}function q(e){const l=e.texture;const c=i.get(e);const u=i.get(l);e.addEventListener("dispose",E);if(e.isWebGLMultipleRenderTargets!==true){if(u.__webglTexture===undefined){u.__webglTexture=t.createTexture()}u.__version=l.version;s.memory.textures++}const h=e.isWebGLCubeRenderTarget===true;const d=e.isWebGLMultipleRenderTargets===true;const f=x(e)||o;if(h){c.__webglFramebuffer=[];for(let e=0;e<6;e++){c.__webglFramebuffer[e]=t.createFramebuffer()}}else{c.__webglFramebuffer=t.createFramebuffer();if(d){if(r.drawBuffers){const n=e.texture;for(let e=0,r=n.length;e<r;e++){const r=i.get(n[e]);if(r.__webglTexture===undefined){r.__webglTexture=t.createTexture();s.memory.textures++}}}else{console.warn("THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.")}}else if(o&&e.samples>0&&tt(e)===false){c.__webglMultisampledFramebuffer=t.createFramebuffer();c.__webglColorRenderbuffer=t.createRenderbuffer();t.bindRenderbuffer(36161,c.__webglColorRenderbuffer);const i=a.convert(l.format,l.encoding);const r=a.convert(l.type);const s=w(l.internalFormat,i,r,l.encoding);const o=K(e);t.renderbufferStorageMultisample(36161,o,s,e.width,e.height);n.bindFramebuffer(36160,c.__webglMultisampledFramebuffer);t.framebufferRenderbuffer(36160,36064,36161,c.__webglColorRenderbuffer);t.bindRenderbuffer(36161,null);if(e.depthBuffer){c.__webglDepthRenderbuffer=t.createRenderbuffer();j(c.__webglDepthRenderbuffer,e,true)}n.bindFramebuffer(36160,null)}}if(h){n.bindTexture(34067,u.__webglTexture);z(34067,l,f);for(let t=0;t<6;t++){W(c.__webglFramebuffer[t],e,l,36064,34069+t)}if(b(l,f)){M(34067)}n.unbindTexture()}else if(d){const t=e.texture;for(let r=0,a=t.length;r<a;r++){const a=t[r];const s=i.get(a);n.bindTexture(3553,s.__webglTexture);z(3553,a,f);W(c.__webglFramebuffer,e,a,36064+r,3553);if(b(a,f)){M(3553)}}n.unbindTexture()}else{let t=3553;if(e.isWebGL3DRenderTarget||e.isWebGLArrayRenderTarget){if(o){t=e.isWebGL3DRenderTarget?32879:35866}else{console.error("THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.")}}n.bindTexture(t,u.__webglTexture);z(t,l,f);W(c.__webglFramebuffer,e,l,36064,t);if(b(l,f)){M(t)}n.unbindTexture()}if(e.depthBuffer){Y(e)}}function J(t){const e=x(t)||o;const r=t.isWebGLMultipleRenderTargets===true?t.texture:[t.texture];for(let a=0,s=r.length;a<s;a++){const s=r[a];if(b(s,e)){const e=t.isWebGLCubeRenderTarget?34067:3553;const r=i.get(s).__webglTexture;n.bindTexture(e,r);M(e);n.unbindTexture()}}}function Z(e){if(o&&e.samples>0&&tt(e)===false){const r=e.width;const a=e.height;let s=16384;const o=[36064];const l=e.stencilBuffer?33306:36096;if(e.depthBuffer){o.push(l)}const c=i.get(e);const u=c.__ignoreDepthValues!==undefined?c.__ignoreDepthValues:false;if(u===false){if(e.depthBuffer)s|=256;if(e.stencilBuffer)s|=1024}n.bindFramebuffer(36008,c.__webglMultisampledFramebuffer);n.bindFramebuffer(36009,c.__webglFramebuffer);if(u===true){t.invalidateFramebuffer(36008,[l]);t.invalidateFramebuffer(36009,[l])}t.blitFramebuffer(0,0,r,a,0,0,r,a,s,9728);t.invalidateFramebuffer(36008,o);n.bindFramebuffer(36008,null);n.bindFramebuffer(36009,c.__webglMultisampledFramebuffer)}}function K(t){return Math.min(h,t.samples)}function tt(t){const n=i.get(t);return o&&t.samples>0&&e.has("WEBGL_multisampled_render_to_texture")===true&&n.__useRenderToTexture!==false}function et(t){const e=s.render.frame;if(f.get(t)!==e){f.set(t,e);t.update()}}function nt(t,n){const i=t.encoding;const r=t.format;const a=t.type;if(t.isCompressedTexture===true||t.isVideoTexture===true||t.format===_SRGBAFormat)return n;if(i!==LinearEncoding){if(i===sRGBEncoding){if(o===false){if(e.has("EXT_sRGB")===true&&r===RGBAFormat){t.format=_SRGBAFormat;t.minFilter=LinearFilter;t.generateMipmaps=false}else{n=ImageUtils.sRGBToLinear(n)}}else{if(r!==RGBAFormat||a!==UnsignedByteType){console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.")}}}else{console.error("THREE.WebGLTextures: Unsupported texture encoding:",i)}}return n}this.allocateTextureUnit=I;this.resetTextureUnits=F;this.setTexture2D=D;this.setTexture2DArray=N;this.setTexture3D=U;this.setTextureCube=V;this.rebindTextures=Q;this.setupRenderTarget=q;this.updateRenderTargetMipmap=J;this.updateMultisampleRenderTarget=Z;this.setupDepthRenderbuffer=Y;this.setupFrameBufferTexture=W;this.useMultisampledRTT=tt}function WebGLUtils(t,e,n){const i=n.isWebGL2;function r(t,n=null){let r;if(t===UnsignedByteType)return 5121;if(t===UnsignedShort4444Type)return 32819;if(t===UnsignedShort5551Type)return 32820;if(t===ByteType)return 5120;if(t===ShortType)return 5122;if(t===UnsignedShortType)return 5123;if(t===IntType)return 5124;if(t===UnsignedIntType)return 5125;if(t===FloatType)return 5126;if(t===HalfFloatType){if(i)return 5131;r=e.get("OES_texture_half_float");if(r!==null){return r.HALF_FLOAT_OES}else{return null}}if(t===AlphaFormat)return 6406;if(t===RGBAFormat)return 6408;if(t===LuminanceFormat)return 6409;if(t===LuminanceAlphaFormat)return 6410;if(t===DepthFormat)return 6402;if(t===DepthStencilFormat)return 34041;if(t===RedFormat)return 6403;if(t===RGBFormat){console.warn("THREE.WebGLRenderer: THREE.RGBFormat has been removed. Use THREE.RGBAFormat instead. https://github.com/mrdoob/three.js/pull/23228");return 6408}if(t===_SRGBAFormat){r=e.get("EXT_sRGB");if(r!==null){return r.SRGB_ALPHA_EXT}else{return null}}if(t===RedIntegerFormat)return 36244;if(t===RGFormat)return 33319;if(t===RGIntegerFormat)return 33320;if(t===RGBAIntegerFormat)return 36249;if(t===RGB_S3TC_DXT1_Format||t===RGBA_S3TC_DXT1_Format||t===RGBA_S3TC_DXT3_Format||t===RGBA_S3TC_DXT5_Format){if(n===sRGBEncoding){r=e.get("WEBGL_compressed_texture_s3tc_srgb");if(r!==null){if(t===RGB_S3TC_DXT1_Format)return r.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(t===RGBA_S3TC_DXT1_Format)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(t===RGBA_S3TC_DXT3_Format)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(t===RGBA_S3TC_DXT5_Format)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{return null}}else{r=e.get("WEBGL_compressed_texture_s3tc");if(r!==null){if(t===RGB_S3TC_DXT1_Format)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(t===RGBA_S3TC_DXT1_Format)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(t===RGBA_S3TC_DXT3_Format)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(t===RGBA_S3TC_DXT5_Format)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}else{return null}}}if(t===RGB_PVRTC_4BPPV1_Format||t===RGB_PVRTC_2BPPV1_Format||t===RGBA_PVRTC_4BPPV1_Format||t===RGBA_PVRTC_2BPPV1_Format){r=e.get("WEBGL_compressed_texture_pvrtc");if(r!==null){if(t===RGB_PVRTC_4BPPV1_Format)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(t===RGB_PVRTC_2BPPV1_Format)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(t===RGBA_PVRTC_4BPPV1_Format)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(t===RGBA_PVRTC_2BPPV1_Format)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}else{return null}}if(t===RGB_ETC1_Format){r=e.get("WEBGL_compressed_texture_etc1");if(r!==null){return r.COMPRESSED_RGB_ETC1_WEBGL}else{return null}}if(t===RGB_ETC2_Format||t===RGBA_ETC2_EAC_Format){r=e.get("WEBGL_compressed_texture_etc");if(r!==null){if(t===RGB_ETC2_Format)return n===sRGBEncoding?r.COMPRESSED_SRGB8_ETC2:r.COMPRESSED_RGB8_ETC2;if(t===RGBA_ETC2_EAC_Format)return n===sRGBEncoding?r.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:r.COMPRESSED_RGBA8_ETC2_EAC}else{return null}}if(t===RGBA_ASTC_4x4_Format||t===RGBA_ASTC_5x4_Format||t===RGBA_ASTC_5x5_Format||t===RGBA_ASTC_6x5_Format||t===RGBA_ASTC_6x6_Format||t===RGBA_ASTC_8x5_Format||t===RGBA_ASTC_8x6_Format||t===RGBA_ASTC_8x8_Format||t===RGBA_ASTC_10x5_Format||t===RGBA_ASTC_10x6_Format||t===RGBA_ASTC_10x8_Format||t===RGBA_ASTC_10x10_Format||t===RGBA_ASTC_12x10_Format||t===RGBA_ASTC_12x12_Format){r=e.get("WEBGL_compressed_texture_astc");if(r!==null){if(t===RGBA_ASTC_4x4_Format)return n===sRGBEncoding?r.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:r.COMPRESSED_RGBA_ASTC_4x4_KHR;if(t===RGBA_ASTC_5x4_Format)return n===sRGBEncoding?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:r.COMPRESSED_RGBA_ASTC_5x4_KHR;if(t===RGBA_ASTC_5x5_Format)return n===sRGBEncoding?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:r.COMPRESSED_RGBA_ASTC_5x5_KHR;if(t===RGBA_ASTC_6x5_Format)return n===sRGBEncoding?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:r.COMPRESSED_RGBA_ASTC_6x5_KHR;if(t===RGBA_ASTC_6x6_Format)return n===sRGBEncoding?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:r.COMPRESSED_RGBA_ASTC_6x6_KHR;if(t===RGBA_ASTC_8x5_Format)return n===sRGBEncoding?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:r.COMPRESSED_RGBA_ASTC_8x5_KHR;if(t===RGBA_ASTC_8x6_Format)return n===sRGBEncoding?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:r.COMPRESSED_RGBA_ASTC_8x6_KHR;if(t===RGBA_ASTC_8x8_Format)return n===sRGBEncoding?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:r.COMPRESSED_RGBA_ASTC_8x8_KHR;if(t===RGBA_ASTC_10x5_Format)return n===sRGBEncoding?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:r.COMPRESSED_RGBA_ASTC_10x5_KHR;if(t===RGBA_ASTC_10x6_Format)return n===sRGBEncoding?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:r.COMPRESSED_RGBA_ASTC_10x6_KHR;if(t===RGBA_ASTC_10x8_Format)return n===sRGBEncoding?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:r.COMPRESSED_RGBA_ASTC_10x8_KHR;if(t===RGBA_ASTC_10x10_Format)return n===sRGBEncoding?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:r.COMPRESSED_RGBA_ASTC_10x10_KHR;if(t===RGBA_ASTC_12x10_Format)return n===sRGBEncoding?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:r.COMPRESSED_RGBA_ASTC_12x10_KHR;if(t===RGBA_ASTC_12x12_Format)return n===sRGBEncoding?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:r.COMPRESSED_RGBA_ASTC_12x12_KHR}else{return null}}if(t===RGBA_BPTC_Format){r=e.get("EXT_texture_compression_bptc");if(r!==null){if(t===RGBA_BPTC_Format)return n===sRGBEncoding?r.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:r.COMPRESSED_RGBA_BPTC_UNORM_EXT}else{return null}}if(t===UnsignedInt248Type){if(i)return 34042;r=e.get("WEBGL_depth_texture");if(r!==null){return r.UNSIGNED_INT_24_8_WEBGL}else{return null}}}return{convert:r}}class ArrayCamera extends PerspectiveCamera{constructor(t=[]){super();this.cameras=t}}ArrayCamera.prototype.isArrayCamera=true;class Group extends Object3D$1{constructor(){super();this.type="Group"}}Group.prototype.isGroup=true;const _moveEvent={type:"move"};class WebXRController{constructor(){this._targetRay=null;this._grip=null;this._hand=null}getHandSpace(){if(this._hand===null){this._hand=new Group;this._hand.matrixAutoUpdate=false;this._hand.visible=false;this._hand.joints={};this._hand.inputState={pinching:false}}return this._hand}getTargetRaySpace(){if(this._targetRay===null){this._targetRay=new Group;this._targetRay.matrixAutoUpdate=false;this._targetRay.visible=false;this._targetRay.hasLinearVelocity=false;this._targetRay.linearVelocity=new Vector3$1;this._targetRay.hasAngularVelocity=false;this._targetRay.angularVelocity=new Vector3$1}return this._targetRay}getGripSpace(){if(this._grip===null){this._grip=new Group;this._grip.matrixAutoUpdate=false;this._grip.visible=false;this._grip.hasLinearVelocity=false;this._grip.linearVelocity=new Vector3$1;this._grip.hasAngularVelocity=false;this._grip.angularVelocity=new Vector3$1}return this._grip}dispatchEvent(t){if(this._targetRay!==null){this._targetRay.dispatchEvent(t)}if(this._grip!==null){this._grip.dispatchEvent(t)}if(this._hand!==null){this._hand.dispatchEvent(t)}return this}disconnect(t){this.dispatchEvent({type:"disconnected",data:t});if(this._targetRay!==null){this._targetRay.visible=false}if(this._grip!==null){this._grip.visible=false}if(this._hand!==null){this._hand.visible=false}return this}update(t,e,n){let i=null;let r=null;let a=null;const s=this._targetRay;const o=this._grip;const l=this._hand;if(t&&e.session.visibilityState!=="visible-blurred"){if(s!==null){i=e.getPose(t.targetRaySpace,n);if(i!==null){s.matrix.fromArray(i.transform.matrix);s.matrix.decompose(s.position,s.rotation,s.scale);if(i.linearVelocity){s.hasLinearVelocity=true;s.linearVelocity.copy(i.linearVelocity)}else{s.hasLinearVelocity=false}if(i.angularVelocity){s.hasAngularVelocity=true;s.angularVelocity.copy(i.angularVelocity)}else{s.hasAngularVelocity=false}this.dispatchEvent(_moveEvent)}}if(l&&t.hand){a=true;for(const i of t.hand.values()){const t=e.getJointPose(i,n);if(l.joints[i.jointName]===undefined){const t=new Group;t.matrixAutoUpdate=false;t.visible=false;l.joints[i.jointName]=t;l.add(t)}const r=l.joints[i.jointName];if(t!==null){r.matrix.fromArray(t.transform.matrix);r.matrix.decompose(r.position,r.rotation,r.scale);r.jointRadius=t.radius}r.visible=t!==null}const i=l.joints["index-finger-tip"];const r=l.joints["thumb-tip"];const s=i.position.distanceTo(r.position);const o=.02;const c=.005;if(l.inputState.pinching&&s>o+c){l.inputState.pinching=false;this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})}else if(!l.inputState.pinching&&s<=o-c){l.inputState.pinching=true;this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this})}}else{if(o!==null&&t.gripSpace){r=e.getPose(t.gripSpace,n);if(r!==null){o.matrix.fromArray(r.transform.matrix);o.matrix.decompose(o.position,o.rotation,o.scale);if(r.linearVelocity){o.hasLinearVelocity=true;o.linearVelocity.copy(r.linearVelocity)}else{o.hasLinearVelocity=false}if(r.angularVelocity){o.hasAngularVelocity=true;o.angularVelocity.copy(r.angularVelocity)}else{o.hasAngularVelocity=false}}}}}if(s!==null){s.visible=i!==null}if(o!==null){o.visible=r!==null}if(l!==null){l.visible=a!==null}return this}}class DepthTexture extends Texture{constructor(t,e,n,i,r,a,s,o,l,c){c=c!==undefined?c:DepthFormat;if(c!==DepthFormat&&c!==DepthStencilFormat){throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat")}if(n===undefined&&c===DepthFormat)n=UnsignedShortType;if(n===undefined&&c===DepthStencilFormat)n=UnsignedInt248Type;super(null,i,r,a,s,o,c,n,l);this.image={width:t,height:e};this.magFilter=s!==undefined?s:NearestFilter;this.minFilter=o!==undefined?o:NearestFilter;this.flipY=false;this.generateMipmaps=false}}DepthTexture.prototype.isDepthTexture=true;class WebXRManager extends EventDispatcher{constructor(t,e){super();const n=this;let i=null;let r=1;let a=null;let s="local-floor";let o=null;let l=null;let c=null;let u=null;let h=null;const d=e.getContextAttributes();let f=null;let p=null;const m=[];const g=new Map;const _=new PerspectiveCamera;_.layers.enable(1);_.viewport=new Vector4;const y=new PerspectiveCamera;y.layers.enable(2);y.viewport=new Vector4;const x=[_,y];const v=new ArrayCamera;v.layers.enable(1);v.layers.enable(2);let b=null;let M=null;this.cameraAutoUpdate=true;this.enabled=false;this.isPresenting=false;this.getController=function(t){let e=m[t];if(e===undefined){e=new WebXRController;m[t]=e}return e.getTargetRaySpace()};this.getControllerGrip=function(t){let e=m[t];if(e===undefined){e=new WebXRController;m[t]=e}return e.getGripSpace()};this.getHand=function(t){let e=m[t];if(e===undefined){e=new WebXRController;m[t]=e}return e.getHandSpace()};function w(t){const e=g.get(t.inputSource);if(e){e.dispatchEvent({type:t.type,data:t.inputSource})}}function S(){g.forEach((function(t,e){t.disconnect(e)}));g.clear();b=null;M=null;t.setRenderTarget(f);u=null;c=null;l=null;i=null;p=null;F.stop();n.isPresenting=false;n.dispatchEvent({type:"sessionend"})}this.setFramebufferScaleFactor=function(t){r=t;if(n.isPresenting===true){console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")}};this.setReferenceSpaceType=function(t){s=t;if(n.isPresenting===true){console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")}};this.getReferenceSpace=function(){return a};this.getBaseLayer=function(){return c!==null?c:u};this.getBinding=function(){return l};this.getFrame=function(){return h};this.getSession=function(){return i};this.setSession=async function(o){i=o;if(i!==null){f=t.getRenderTarget();i.addEventListener("select",w);i.addEventListener("selectstart",w);i.addEventListener("selectend",w);i.addEventListener("squeeze",w);i.addEventListener("squeezestart",w);i.addEventListener("squeezeend",w);i.addEventListener("end",S);i.addEventListener("inputsourceschange",A);if(d.xrCompatible!==true){await e.makeXRCompatible()}if(i.renderState.layers===undefined||t.capabilities.isWebGL2===false){const n={antialias:i.renderState.layers===undefined?d.antialias:true,alpha:d.alpha,depth:d.depth,stencil:d.stencil,framebufferScaleFactor:r};u=new XRWebGLLayer(i,e,n);i.updateRenderState({baseLayer:u});p=new WebGLRenderTarget(u.framebufferWidth,u.framebufferHeight,{format:RGBAFormat,type:UnsignedByteType,encoding:t.outputEncoding})}else{let n=null;let a=null;let s=null;if(d.depth){s=d.stencil?35056:33190;n=d.stencil?DepthStencilFormat:DepthFormat;a=d.stencil?UnsignedInt248Type:UnsignedShortType}const o={colorFormat:t.outputEncoding===sRGBEncoding?35907:32856,depthFormat:s,scaleFactor:r};l=new XRWebGLBinding(i,e);c=l.createProjectionLayer(o);i.updateRenderState({layers:[c]});p=new WebGLRenderTarget(c.textureWidth,c.textureHeight,{format:RGBAFormat,type:UnsignedByteType,depthTexture:new DepthTexture(c.textureWidth,c.textureHeight,a,undefined,undefined,undefined,undefined,undefined,undefined,n),stencilBuffer:d.stencil,encoding:t.outputEncoding,samples:d.antialias?4:0});const u=t.properties.get(p);u.__ignoreDepthValues=c.ignoreDepthValues}p.isXRRenderTarget=true;this.setFoveation(1);a=await i.requestReferenceSpace(s);F.setContext(i);F.start();n.isPresenting=true;n.dispatchEvent({type:"sessionstart"})}};function A(t){const e=i.inputSources;for(let t=0;t<m.length;t++){g.set(e[t],m[t])}for(let e=0;e<t.removed.length;e++){const n=t.removed[e];const i=g.get(n);if(i){i.dispatchEvent({type:"disconnected",data:n});g.delete(n)}}for(let e=0;e<t.added.length;e++){const n=t.added[e];const i=g.get(n);if(i){i.dispatchEvent({type:"connected",data:n})}}}const T=new Vector3$1;const E=new Vector3$1;function L(t,e,n){T.setFromMatrixPosition(e.matrixWorld);E.setFromMatrixPosition(n.matrixWorld);const i=T.distanceTo(E);const r=e.projectionMatrix.elements;const a=n.projectionMatrix.elements;const s=r[14]/(r[10]-1);const o=r[14]/(r[10]+1);const l=(r[9]+1)/r[5];const c=(r[9]-1)/r[5];const u=(r[8]-1)/r[0];const h=(a[8]+1)/a[0];const d=s*u;const f=s*h;const p=i/(-u+h);const m=p*-u;e.matrixWorld.decompose(t.position,t.quaternion,t.scale);t.translateX(m);t.translateZ(p);t.matrixWorld.compose(t.position,t.quaternion,t.scale);t.matrixWorldInverse.copy(t.matrixWorld).invert();const g=s+p;const _=o+p;const y=d-m;const x=f+(i-m);const v=l*o/_*g;const b=c*o/_*g;t.projectionMatrix.makePerspective(y,x,v,b,g,_)}function C(t,e){if(e===null){t.matrixWorld.copy(t.matrix)}else{t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix)}t.matrixWorldInverse.copy(t.matrixWorld).invert()}this.updateCamera=function(t){if(i===null)return;v.near=y.near=_.near=t.near;v.far=y.far=_.far=t.far;if(b!==v.near||M!==v.far){i.updateRenderState({depthNear:v.near,depthFar:v.far});b=v.near;M=v.far}const e=t.parent;const n=v.cameras;C(v,e);for(let t=0;t<n.length;t++){C(n[t],e)}v.matrixWorld.decompose(v.position,v.quaternion,v.scale);t.position.copy(v.position);t.quaternion.copy(v.quaternion);t.scale.copy(v.scale);t.matrix.copy(v.matrix);t.matrixWorld.copy(v.matrixWorld);const r=t.children;for(let t=0,e=r.length;t<e;t++){r[t].updateMatrixWorld(true)}if(n.length===2){L(v,_,y)}else{v.projectionMatrix.copy(_.projectionMatrix)}};this.getCamera=function(){return v};this.getFoveation=function(){if(c!==null){return c.fixedFoveation}if(u!==null){return u.fixedFoveation}return undefined};this.setFoveation=function(t){if(c!==null){c.fixedFoveation=t}if(u!==null&&u.fixedFoveation!==undefined){u.fixedFoveation=t}};let P=null;function R(e,n){o=n.getViewerPose(a);h=n;if(o!==null){const e=o.views;if(u!==null){t.setRenderTargetFramebuffer(p,u.framebuffer);t.setRenderTarget(p)}let n=false;if(e.length!==v.cameras.length){v.cameras.length=0;n=true}for(let i=0;i<e.length;i++){const r=e[i];let a=null;if(u!==null){a=u.getViewport(r)}else{const e=l.getViewSubImage(c,r);a=e.viewport;if(i===0){t.setRenderTargetTextures(p,e.colorTexture,c.ignoreDepthValues?undefined:e.depthStencilTexture);t.setRenderTarget(p)}}const s=x[i];s.matrix.fromArray(r.transform.matrix);s.projectionMatrix.fromArray(r.projectionMatrix);s.viewport.set(a.x,a.y,a.width,a.height);if(i===0){v.matrix.copy(s.matrix)}if(n===true){v.cameras.push(s)}}}const r=i.inputSources;for(let t=0;t<m.length;t++){const e=m[t];const i=r[t];e.update(i,n,a)}if(P)P(e,n);h=null}const F=new WebGLAnimation;F.setAnimationLoop(R);this.setAnimationLoop=function(t){P=t};this.dispose=function(){}}}function WebGLMaterials(t){function e(t,e){t.fogColor.value.copy(e.color);if(e.isFog){t.fogNear.value=e.near;t.fogFar.value=e.far}else if(e.isFogExp2){t.fogDensity.value=e.density}}function n(t,e,n,_,y){if(e.isMeshBasicMaterial){i(t,e)}else if(e.isMeshLambertMaterial){i(t,e);l(t,e)}else if(e.isMeshToonMaterial){i(t,e);u(t,e)}else if(e.isMeshPhongMaterial){i(t,e);c(t,e)}else if(e.isMeshStandardMaterial){i(t,e);if(e.isMeshPhysicalMaterial){d(t,e,y)}else{h(t,e)}}else if(e.isMeshMatcapMaterial){i(t,e);f(t,e)}else if(e.isMeshDepthMaterial){i(t,e);p(t,e)}else if(e.isMeshDistanceMaterial){i(t,e);m(t,e)}else if(e.isMeshNormalMaterial){i(t,e);g(t,e)}else if(e.isLineBasicMaterial){r(t,e);if(e.isLineDashedMaterial){a(t,e)}}else if(e.isPointsMaterial){s(t,e,n,_)}else if(e.isSpriteMaterial){o(t,e)}else if(e.isShadowMaterial){t.color.value.copy(e.color);t.opacity.value=e.opacity}else if(e.isShaderMaterial){e.uniformsNeedUpdate=false}}function i(e,n){e.opacity.value=n.opacity;if(n.color){e.diffuse.value.copy(n.color)}if(n.emissive){e.emissive.value.copy(n.emissive).multiplyScalar(n.emissiveIntensity)}if(n.map){e.map.value=n.map}if(n.alphaMap){e.alphaMap.value=n.alphaMap}if(n.specularMap){e.specularMap.value=n.specularMap}if(n.alphaTest>0){e.alphaTest.value=n.alphaTest}const i=t.get(n).envMap;if(i){e.envMap.value=i;e.flipEnvMap.value=i.isCubeTexture&&i.isRenderTargetTexture===false?-1:1;e.reflectivity.value=n.reflectivity;e.ior.value=n.ior;e.refractionRatio.value=n.refractionRatio}if(n.lightMap){e.lightMap.value=n.lightMap;e.lightMapIntensity.value=n.lightMapIntensity}if(n.aoMap){e.aoMap.value=n.aoMap;e.aoMapIntensity.value=n.aoMapIntensity}let r;if(n.map){r=n.map}else if(n.specularMap){r=n.specularMap}else if(n.displacementMap){r=n.displacementMap}else if(n.normalMap){r=n.normalMap}else if(n.bumpMap){r=n.bumpMap}else if(n.roughnessMap){r=n.roughnessMap}else if(n.metalnessMap){r=n.metalnessMap}else if(n.alphaMap){r=n.alphaMap}else if(n.emissiveMap){r=n.emissiveMap}else if(n.clearcoatMap){r=n.clearcoatMap}else if(n.clearcoatNormalMap){r=n.clearcoatNormalMap}else if(n.clearcoatRoughnessMap){r=n.clearcoatRoughnessMap}else if(n.specularIntensityMap){r=n.specularIntensityMap}else if(n.specularColorMap){r=n.specularColorMap}else if(n.transmissionMap){r=n.transmissionMap}else if(n.thicknessMap){r=n.thicknessMap}else if(n.sheenColorMap){r=n.sheenColorMap}else if(n.sheenRoughnessMap){r=n.sheenRoughnessMap}if(r!==undefined){if(r.isWebGLRenderTarget){r=r.texture}if(r.matrixAutoUpdate===true){r.updateMatrix()}e.uvTransform.value.copy(r.matrix)}let a;if(n.aoMap){a=n.aoMap}else if(n.lightMap){a=n.lightMap}if(a!==undefined){if(a.isWebGLRenderTarget){a=a.texture}if(a.matrixAutoUpdate===true){a.updateMatrix()}e.uv2Transform.value.copy(a.matrix)}}function r(t,e){t.diffuse.value.copy(e.color);t.opacity.value=e.opacity}function a(t,e){t.dashSize.value=e.dashSize;t.totalSize.value=e.dashSize+e.gapSize;t.scale.value=e.scale}function s(t,e,n,i){t.diffuse.value.copy(e.color);t.opacity.value=e.opacity;t.size.value=e.size*n;t.scale.value=i*.5;if(e.map){t.map.value=e.map}if(e.alphaMap){t.alphaMap.value=e.alphaMap}if(e.alphaTest>0){t.alphaTest.value=e.alphaTest}let r;if(e.map){r=e.map}else if(e.alphaMap){r=e.alphaMap}if(r!==undefined){if(r.matrixAutoUpdate===true){r.updateMatrix()}t.uvTransform.value.copy(r.matrix)}}function o(t,e){t.diffuse.value.copy(e.color);t.opacity.value=e.opacity;t.rotation.value=e.rotation;if(e.map){t.map.value=e.map}if(e.alphaMap){t.alphaMap.value=e.alphaMap}if(e.alphaTest>0){t.alphaTest.value=e.alphaTest}let n;if(e.map){n=e.map}else if(e.alphaMap){n=e.alphaMap}if(n!==undefined){if(n.matrixAutoUpdate===true){n.updateMatrix()}t.uvTransform.value.copy(n.matrix)}}function l(t,e){if(e.emissiveMap){t.emissiveMap.value=e.emissiveMap}}function c(t,e){t.specular.value.copy(e.specular);t.shininess.value=Math.max(e.shininess,1e-4);if(e.emissiveMap){t.emissiveMap.value=e.emissiveMap}if(e.bumpMap){t.bumpMap.value=e.bumpMap;t.bumpScale.value=e.bumpScale;if(e.side===BackSide)t.bumpScale.value*=-1}if(e.normalMap){t.normalMap.value=e.normalMap;t.normalScale.value.copy(e.normalScale);if(e.side===BackSide)t.normalScale.value.negate()}if(e.displacementMap){t.displacementMap.value=e.displacementMap;t.displacementScale.value=e.displacementScale;t.displacementBias.value=e.displacementBias}}function u(t,e){if(e.gradientMap){t.gradientMap.value=e.gradientMap}if(e.emissiveMap){t.emissiveMap.value=e.emissiveMap}if(e.bumpMap){t.bumpMap.value=e.bumpMap;t.bumpScale.value=e.bumpScale;if(e.side===BackSide)t.bumpScale.value*=-1}if(e.normalMap){t.normalMap.value=e.normalMap;t.normalScale.value.copy(e.normalScale);if(e.side===BackSide)t.normalScale.value.negate()}if(e.displacementMap){t.displacementMap.value=e.displacementMap;t.displacementScale.value=e.displacementScale;t.displacementBias.value=e.displacementBias}}function h(e,n){e.roughness.value=n.roughness;e.metalness.value=n.metalness;if(n.roughnessMap){e.roughnessMap.value=n.roughnessMap}if(n.metalnessMap){e.metalnessMap.value=n.metalnessMap}if(n.emissiveMap){e.emissiveMap.value=n.emissiveMap}if(n.bumpMap){e.bumpMap.value=n.bumpMap;e.bumpScale.value=n.bumpScale;if(n.side===BackSide)e.bumpScale.value*=-1}if(n.normalMap){e.normalMap.value=n.normalMap;e.normalScale.value.copy(n.normalScale);if(n.side===BackSide)e.normalScale.value.negate()}if(n.displacementMap){e.displacementMap.value=n.displacementMap;e.displacementScale.value=n.displacementScale;e.displacementBias.value=n.displacementBias}const i=t.get(n).envMap;if(i){e.envMapIntensity.value=n.envMapIntensity}}function d(t,e,n){h(t,e);t.ior.value=e.ior;if(e.sheen>0){t.sheenColor.value.copy(e.sheenColor).multiplyScalar(e.sheen);t.sheenRoughness.value=e.sheenRoughness;if(e.sheenColorMap){t.sheenColorMap.value=e.sheenColorMap}if(e.sheenRoughnessMap){t.sheenRoughnessMap.value=e.sheenRoughnessMap}}if(e.clearcoat>0){t.clearcoat.value=e.clearcoat;t.clearcoatRoughness.value=e.clearcoatRoughness;if(e.clearcoatMap){t.clearcoatMap.value=e.clearcoatMap}if(e.clearcoatRoughnessMap){t.clearcoatRoughnessMap.value=e.clearcoatRoughnessMap}if(e.clearcoatNormalMap){t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale);t.clearcoatNormalMap.value=e.clearcoatNormalMap;if(e.side===BackSide){t.clearcoatNormalScale.value.negate()}}}if(e.transmission>0){t.transmission.value=e.transmission;t.transmissionSamplerMap.value=n.texture;t.transmissionSamplerSize.value.set(n.width,n.height);if(e.transmissionMap){t.transmissionMap.value=e.transmissionMap}t.thickness.value=e.thickness;if(e.thicknessMap){t.thicknessMap.value=e.thicknessMap}t.attenuationDistance.value=e.attenuationDistance;t.attenuationColor.value.copy(e.attenuationColor)}t.specularIntensity.value=e.specularIntensity;t.specularColor.value.copy(e.specularColor);if(e.specularIntensityMap){t.specularIntensityMap.value=e.specularIntensityMap}if(e.specularColorMap){t.specularColorMap.value=e.specularColorMap}}function f(t,e){if(e.matcap){t.matcap.value=e.matcap}if(e.bumpMap){t.bumpMap.value=e.bumpMap;t.bumpScale.value=e.bumpScale;if(e.side===BackSide)t.bumpScale.value*=-1}if(e.normalMap){t.normalMap.value=e.normalMap;t.normalScale.value.copy(e.normalScale);if(e.side===BackSide)t.normalScale.value.negate()}if(e.displacementMap){t.displacementMap.value=e.displacementMap;t.displacementScale.value=e.displacementScale;t.displacementBias.value=e.displacementBias}}function p(t,e){if(e.displacementMap){t.displacementMap.value=e.displacementMap;t.displacementScale.value=e.displacementScale;t.displacementBias.value=e.displacementBias}}function m(t,e){if(e.displacementMap){t.displacementMap.value=e.displacementMap;t.displacementScale.value=e.displacementScale;t.displacementBias.value=e.displacementBias}t.referencePosition.value.copy(e.referencePosition);t.nearDistance.value=e.nearDistance;t.farDistance.value=e.farDistance}function g(t,e){if(e.bumpMap){t.bumpMap.value=e.bumpMap;t.bumpScale.value=e.bumpScale;if(e.side===BackSide)t.bumpScale.value*=-1}if(e.normalMap){t.normalMap.value=e.normalMap;t.normalScale.value.copy(e.normalScale);if(e.side===BackSide)t.normalScale.value.negate()}if(e.displacementMap){t.displacementMap.value=e.displacementMap;t.displacementScale.value=e.displacementScale;t.displacementBias.value=e.displacementBias}}return{refreshFogUniforms:e,refreshMaterialUniforms:n}}function createCanvasElement(){const t=createElementNS("canvas");t.style.display="block";return t}function WebGLRenderer(t={}){const e=t.canvas!==undefined?t.canvas:createCanvasElement(),n=t.context!==undefined?t.context:null,i=t.depth!==undefined?t.depth:true,r=t.stencil!==undefined?t.stencil:true,a=t.antialias!==undefined?t.antialias:false,s=t.premultipliedAlpha!==undefined?t.premultipliedAlpha:true,o=t.preserveDrawingBuffer!==undefined?t.preserveDrawingBuffer:false,l=t.powerPreference!==undefined?t.powerPreference:"default",c=t.failIfMajorPerformanceCaveat!==undefined?t.failIfMajorPerformanceCaveat:false;let u;if(t.context!==undefined){u=n.getContextAttributes().alpha}else{u=t.alpha!==undefined?t.alpha:false}let h=null;let d=null;const f=[];const p=[];this.domElement=e;this.debug={checkShaderErrors:true};this.autoClear=true;this.autoClearColor=true;this.autoClearDepth=true;this.autoClearStencil=true;this.sortObjects=true;this.clippingPlanes=[];this.localClippingEnabled=false;this.outputEncoding=LinearEncoding;this.physicallyCorrectLights=false;this.toneMapping=NoToneMapping;this.toneMappingExposure=1;const m=this;let g=false;let _=0;let y=0;let x=null;let v=-1;let b=null;const M=new Vector4;const w=new Vector4;let S=null;let A=e.width;let T=e.height;let E=1;let L=null;let C=null;const P=new Vector4(0,0,A,T);const R=new Vector4(0,0,A,T);let F=false;const I=new Frustum;let B=false;let D=false;let N=null;const U=new Matrix4$1;const V=new Vector2;const G=new Vector3$1;const O={background:null,fog:null,environment:null,overrideMaterial:null,isScene:true};function z(){return x===null?E:1}let $=n;function H(t,n){for(let i=0;i<t.length;i++){const r=t[i];const a=e.getContext(r,n);if(a!==null)return a}return null}try{const t={alpha:true,depth:i,stencil:r,antialias:a,premultipliedAlpha:s,preserveDrawingBuffer:o,powerPreference:l,failIfMajorPerformanceCaveat:c};if("setAttribute"in e)e.setAttribute("data-engine",`three.js r${REVISION}`);e.addEventListener("webglcontextlost",mt,false);e.addEventListener("webglcontextrestored",gt,false);if($===null){const e=["webgl2","webgl","experimental-webgl"];if(m.isWebGL1Renderer===true){e.shift()}$=H(e,t);if($===null){if(H(e)){throw new Error("Error creating WebGL context with your selected attributes.")}else{throw new Error("Error creating WebGL context.")}}}if($.getShaderPrecisionFormat===undefined){$.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}}}}catch(t){console.error("THREE.WebGLRenderer: "+t.message);throw t}let k,W,j,X;let Y,Q,q,J,Z,K,tt;let et,nt,it,rt,at,st;let ot,lt,ct,ut;let ht,dt;function ft(){k=new WebGLExtensions($);W=new WebGLCapabilities($,k,t);k.init(W);ht=new WebGLUtils($,k,W);j=new WebGLState($,k,W);X=new WebGLInfo($);Y=new WebGLProperties;Q=new WebGLTextures($,k,j,Y,W,ht,X);q=new WebGLCubeMaps(m);J=new WebGLCubeUVMaps(m);Z=new WebGLAttributes($,W);dt=new WebGLBindingStates($,k,Z,W);K=new WebGLGeometries($,Z,X,dt);tt=new WebGLObjects($,K,Z,X);lt=new WebGLMorphtargets($,W,Q);at=new WebGLClipping(Y);et=new WebGLPrograms(m,q,J,k,W,dt,at);nt=new WebGLMaterials(Y);it=new WebGLRenderLists;rt=new WebGLRenderStates(k,W);ot=new WebGLBackground(m,q,j,tt,u,s);st=new WebGLShadowMap(m,tt,W);ct=new WebGLBufferRenderer($,k,X,W);ut=new WebGLIndexedBufferRenderer($,k,X,W);X.programs=et.programs;m.capabilities=W;m.extensions=k;m.properties=Y;m.renderLists=it;m.shadowMap=st;m.state=j;m.info=X}ft();const pt=new WebXRManager(m,$);this.xr=pt;this.getContext=function(){return $};this.getContextAttributes=function(){return $.getContextAttributes()};this.forceContextLoss=function(){const t=k.get("WEBGL_lose_context");if(t)t.loseContext()};this.forceContextRestore=function(){const t=k.get("WEBGL_lose_context");if(t)t.restoreContext()};this.getPixelRatio=function(){return E};this.setPixelRatio=function(t){if(t===undefined)return;E=t;this.setSize(A,T,false)};this.getSize=function(t){return t.set(A,T)};this.setSize=function(t,n,i){if(pt.isPresenting){console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting.");return}A=t;T=n;e.width=Math.floor(t*E);e.height=Math.floor(n*E);if(i!==false){e.style.width=t+"px";e.style.height=n+"px"}this.setViewport(0,0,t,n)};this.getDrawingBufferSize=function(t){return t.set(A*E,T*E).floor()};this.setDrawingBufferSize=function(t,n,i){A=t;T=n;E=i;e.width=Math.floor(t*i);e.height=Math.floor(n*i);this.setViewport(0,0,t,n)};this.getCurrentViewport=function(t){return t.copy(M)};this.getViewport=function(t){return t.copy(P)};this.setViewport=function(t,e,n,i){if(t.isVector4){P.set(t.x,t.y,t.z,t.w)}else{P.set(t,e,n,i)}j.viewport(M.copy(P).multiplyScalar(E).floor())};this.getScissor=function(t){return t.copy(R)};this.setScissor=function(t,e,n,i){if(t.isVector4){R.set(t.x,t.y,t.z,t.w)}else{R.set(t,e,n,i)}j.scissor(w.copy(R).multiplyScalar(E).floor())};this.getScissorTest=function(){return F};this.setScissorTest=function(t){j.setScissorTest(F=t)};this.setOpaqueSort=function(t){L=t};this.setTransparentSort=function(t){C=t};this.getClearColor=function(t){return t.copy(ot.getClearColor())};this.setClearColor=function(){ot.setClearColor.apply(ot,arguments)};this.getClearAlpha=function(){return ot.getClearAlpha()};this.setClearAlpha=function(){ot.setClearAlpha.apply(ot,arguments)};this.clear=function(t=true,e=true,n=true){let i=0;if(t)i|=16384;if(e)i|=256;if(n)i|=1024;$.clear(i)};this.clearColor=function(){this.clear(true,false,false)};this.clearDepth=function(){this.clear(false,true,false)};this.clearStencil=function(){this.clear(false,false,true)};this.dispose=function(){e.removeEventListener("webglcontextlost",mt,false);e.removeEventListener("webglcontextrestored",gt,false);it.dispose();rt.dispose();Y.dispose();q.dispose();J.dispose();tt.dispose();dt.dispose();et.dispose();pt.dispose();pt.removeEventListener("sessionstart",Mt);pt.removeEventListener("sessionend",wt);if(N){N.dispose();N=null}St.stop()};function mt(t){t.preventDefault();console.log("THREE.WebGLRenderer: Context Lost.");g=true}function gt(){console.log("THREE.WebGLRenderer: Context Restored.");g=false;const t=X.autoReset;const e=st.enabled;const n=st.autoUpdate;const i=st.needsUpdate;const r=st.type;ft();X.autoReset=t;st.enabled=e;st.autoUpdate=n;st.needsUpdate=i;st.type=r}function _t(t){const e=t.target;e.removeEventListener("dispose",_t);yt(e)}function yt(t){xt(t);Y.remove(t)}function xt(t){const e=Y.get(t).programs;if(e!==undefined){e.forEach((function(t){et.releaseProgram(t)}));if(t.isShaderMaterial){et.releaseShaderCache(t)}}}this.renderBufferDirect=function(t,e,n,i,r,a){if(e===null)e=O;const s=r.isMesh&&r.matrixWorld.determinant()<0;const o=Ft(t,e,n,i,r);j.setMaterial(i,s);let l=n.index;const c=n.attributes.position;if(l===null){if(c===undefined||c.count===0)return}else if(l.count===0){return}let u=1;if(i.wireframe===true){l=K.getWireframeAttribute(n);u=2}dt.setup(r,i,o,n,l);let h;let d=ct;if(l!==null){h=Z.get(l);d=ut;d.setIndex(h)}const f=l!==null?l.count:c.count;const p=n.drawRange.start*u;const m=n.drawRange.count*u;const g=a!==null?a.start*u:0;const _=a!==null?a.count*u:Infinity;const y=Math.max(p,g);const x=Math.min(f,p+m,g+_)-1;const v=Math.max(0,x-y+1);if(v===0)return;if(r.isMesh){if(i.wireframe===true){j.setLineWidth(i.wireframeLinewidth*z());d.setMode(1)}else{d.setMode(4)}}else if(r.isLine){let t=i.linewidth;if(t===undefined)t=1;j.setLineWidth(t*z());if(r.isLineSegments){d.setMode(1)}else if(r.isLineLoop){d.setMode(2)}else{d.setMode(3)}}else if(r.isPoints){d.setMode(0)}else if(r.isSprite){d.setMode(4)}if(r.isInstancedMesh){d.renderInstances(y,v,r.count)}else if(n.isInstancedBufferGeometry){const t=Math.min(n.instanceCount,n._maxInstanceCount);d.renderInstances(y,v,t)}else{d.render(y,v)}};this.compile=function(t,e){d=rt.get(t);d.init();p.push(d);t.traverseVisible((function(t){if(t.isLight&&t.layers.test(e.layers)){d.pushLight(t);if(t.castShadow){d.pushShadow(t)}}}));d.setupLights(m.physicallyCorrectLights);t.traverse((function(e){const n=e.material;if(n){if(Array.isArray(n)){for(let i=0;i<n.length;i++){const r=n[i];Pt(r,t,e)}}else{Pt(n,t,e)}}}));p.pop();d=null};let vt=null;function bt(t){if(vt)vt(t)}function Mt(){St.stop()}function wt(){St.start()}const St=new WebGLAnimation;St.setAnimationLoop(bt);if(typeof window!=="undefined")St.setContext(window);this.setAnimationLoop=function(t){vt=t;pt.setAnimationLoop(t);t===null?St.stop():St.start()};pt.addEventListener("sessionstart",Mt);pt.addEventListener("sessionend",wt);this.render=function(t,e){if(e!==undefined&&e.isCamera!==true){console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");return}if(g===true)return;if(t.autoUpdate===true)t.updateMatrixWorld();if(e.parent===null)e.updateMatrixWorld();if(pt.enabled===true&&pt.isPresenting===true){if(pt.cameraAutoUpdate===true)pt.updateCamera(e);e=pt.getCamera()}if(t.isScene===true)t.onBeforeRender(m,t,e,x);d=rt.get(t,p.length);d.init();p.push(d);U.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse);I.setFromProjectionMatrix(U);D=this.localClippingEnabled;B=at.init(this.clippingPlanes,D,e);h=it.get(t,f.length);h.init();f.push(h);At(t,e,0,m.sortObjects);h.finish();if(m.sortObjects===true){h.sort(L,C)}if(B===true)at.beginShadows();const n=d.state.shadowsArray;st.render(n,t,e);if(B===true)at.endShadows();if(this.info.autoReset===true)this.info.reset();ot.render(h,t);d.setupLights(m.physicallyCorrectLights);if(e.isArrayCamera){const n=e.cameras;for(let e=0,i=n.length;e<i;e++){const i=n[e];Tt(h,t,i,i.viewport)}}else{Tt(h,t,e)}if(x!==null){Q.updateMultisampleRenderTarget(x);Q.updateRenderTargetMipmap(x)}if(t.isScene===true)t.onAfterRender(m,t,e);dt.resetDefaultState();v=-1;b=null;p.pop();if(p.length>0){d=p[p.length-1]}else{d=null}f.pop();if(f.length>0){h=f[f.length-1]}else{h=null}};function At(t,e,n,i){if(t.visible===false)return;const r=t.layers.test(e.layers);if(r){if(t.isGroup){n=t.renderOrder}else if(t.isLOD){if(t.autoUpdate===true)t.update(e)}else if(t.isLight){d.pushLight(t);if(t.castShadow){d.pushShadow(t)}}else if(t.isSprite){if(!t.frustumCulled||I.intersectsSprite(t)){if(i){G.setFromMatrixPosition(t.matrixWorld).applyMatrix4(U)}const e=tt.update(t);const r=t.material;if(r.visible){h.push(t,e,r,n,G.z,null)}}}else if(t.isMesh||t.isLine||t.isPoints){if(t.isSkinnedMesh){if(t.skeleton.frame!==X.render.frame){t.skeleton.update();t.skeleton.frame=X.render.frame}}if(!t.frustumCulled||I.intersectsObject(t)){if(i){G.setFromMatrixPosition(t.matrixWorld).applyMatrix4(U)}const e=tt.update(t);const r=t.material;if(Array.isArray(r)){const i=e.groups;for(let a=0,s=i.length;a<s;a++){const s=i[a];const o=r[s.materialIndex];if(o&&o.visible){h.push(t,e,o,n,G.z,s)}}}else if(r.visible){h.push(t,e,r,n,G.z,null)}}}}const a=t.children;for(let t=0,r=a.length;t<r;t++){At(a[t],e,n,i)}}function Tt(t,e,n,i){const r=t.opaque;const a=t.transmissive;const s=t.transparent;d.setupLightsView(n);if(a.length>0)Et(r,e,n);if(i)j.viewport(M.copy(i));if(r.length>0)Lt(r,e,n);if(a.length>0)Lt(a,e,n);if(s.length>0)Lt(s,e,n);j.buffers.depth.setTest(true);j.buffers.depth.setMask(true);j.buffers.color.setMask(true);j.setPolygonOffset(false)}function Et(t,e,n){const i=W.isWebGL2;if(N===null){N=new WebGLRenderTarget(1,1,{generateMipmaps:true,type:ht.convert(HalfFloatType)!==null?HalfFloatType:UnsignedByteType,minFilter:LinearMipmapLinearFilter,samples:i&&a===true?4:0})}m.getDrawingBufferSize(V);if(i){N.setSize(V.x,V.y)}else{N.setSize(floorPowerOfTwo(V.x),floorPowerOfTwo(V.y))}const r=m.getRenderTarget();m.setRenderTarget(N);m.clear();const s=m.toneMapping;m.toneMapping=NoToneMapping;Lt(t,e,n);m.toneMapping=s;Q.updateMultisampleRenderTarget(N);Q.updateRenderTargetMipmap(N);m.setRenderTarget(r)}function Lt(t,e,n){const i=e.isScene===true?e.overrideMaterial:null;for(let r=0,a=t.length;r<a;r++){const a=t[r];const s=a.object;const o=a.geometry;const l=i===null?a.material:i;const c=a.group;if(s.layers.test(n.layers)){Ct(s,e,n,o,l,c)}}}function Ct(t,e,n,i,r,a){t.onBeforeRender(m,e,n,i,r,a);t.modelViewMatrix.multiplyMatrices(n.matrixWorldInverse,t.matrixWorld);t.normalMatrix.getNormalMatrix(t.modelViewMatrix);r.onBeforeRender(m,e,n,i,t,a);if(r.transparent===true&&r.side===DoubleSide$1){r.side=BackSide;r.needsUpdate=true;m.renderBufferDirect(n,e,i,r,t,a);r.side=FrontSide;r.needsUpdate=true;m.renderBufferDirect(n,e,i,r,t,a);r.side=DoubleSide$1}else{m.renderBufferDirect(n,e,i,r,t,a)}t.onAfterRender(m,e,n,i,r,a)}function Pt(t,e,n){if(e.isScene!==true)e=O;const i=Y.get(t);const r=d.state.lights;const a=d.state.shadowsArray;const s=r.state.version;const o=et.getParameters(t,r.state,a,e,n);const l=et.getProgramCacheKey(o);let c=i.programs;i.environment=t.isMeshStandardMaterial?e.environment:null;i.fog=e.fog;i.envMap=(t.isMeshStandardMaterial?J:q).get(t.envMap||i.environment);if(c===undefined){t.addEventListener("dispose",_t);c=new Map;i.programs=c}let u=c.get(l);if(u!==undefined){if(i.currentProgram===u&&i.lightsStateVersion===s){Rt(t,o);return u}}else{o.uniforms=et.getUniforms(t);t.onBuild(n,o,m);t.onBeforeCompile(o,m);u=et.acquireProgram(o,l);c.set(l,u);i.uniforms=o.uniforms}const h=i.uniforms;if(!t.isShaderMaterial&&!t.isRawShaderMaterial||t.clipping===true){h.clippingPlanes=at.uniform}Rt(t,o);i.needsLights=Bt(t);i.lightsStateVersion=s;if(i.needsLights){h.ambientLightColor.value=r.state.ambient;h.lightProbe.value=r.state.probe;h.directionalLights.value=r.state.directional;h.directionalLightShadows.value=r.state.directionalShadow;h.spotLights.value=r.state.spot;h.spotLightShadows.value=r.state.spotShadow;h.rectAreaLights.value=r.state.rectArea;h.ltc_1.value=r.state.rectAreaLTC1;h.ltc_2.value=r.state.rectAreaLTC2;h.pointLights.value=r.state.point;h.pointLightShadows.value=r.state.pointShadow;h.hemisphereLights.value=r.state.hemi;h.directionalShadowMap.value=r.state.directionalShadowMap;h.directionalShadowMatrix.value=r.state.directionalShadowMatrix;h.spotShadowMap.value=r.state.spotShadowMap;h.spotShadowMatrix.value=r.state.spotShadowMatrix;h.pointShadowMap.value=r.state.pointShadowMap;h.pointShadowMatrix.value=r.state.pointShadowMatrix}const f=u.getUniforms();const p=WebGLUniforms.seqWithValue(f.seq,h);i.currentProgram=u;i.uniformsList=p;return u}function Rt(t,e){const n=Y.get(t);n.outputEncoding=e.outputEncoding;n.instancing=e.instancing;n.skinning=e.skinning;n.morphTargets=e.morphTargets;n.morphNormals=e.morphNormals;n.morphColors=e.morphColors;n.morphTargetsCount=e.morphTargetsCount;n.numClippingPlanes=e.numClippingPlanes;n.numIntersection=e.numClipIntersection;n.vertexAlphas=e.vertexAlphas;n.vertexTangents=e.vertexTangents;n.toneMapping=e.toneMapping}function Ft(t,e,n,i,r){if(e.isScene!==true)e=O;Q.resetTextureUnits();const a=e.fog;const s=i.isMeshStandardMaterial?e.environment:null;const o=x===null?m.outputEncoding:x.isXRRenderTarget===true?x.texture.encoding:LinearEncoding;const l=(i.isMeshStandardMaterial?J:q).get(i.envMap||s);const c=i.vertexColors===true&&!!n.attributes.color&&n.attributes.color.itemSize===4;const u=!!i.normalMap&&!!n.attributes.tangent;const h=!!n.morphAttributes.position;const f=!!n.morphAttributes.normal;const p=!!n.morphAttributes.color;const g=i.toneMapped?m.toneMapping:NoToneMapping;const _=n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color;const y=_!==undefined?_.length:0;const M=Y.get(i);const w=d.state.lights;if(B===true){if(D===true||t!==b){const e=t===b&&i.id===v;at.setState(i,t,e)}}let S=false;if(i.version===M.__version){if(M.needsLights&&M.lightsStateVersion!==w.state.version){S=true}else if(M.outputEncoding!==o){S=true}else if(r.isInstancedMesh&&M.instancing===false){S=true}else if(!r.isInstancedMesh&&M.instancing===true){S=true}else if(r.isSkinnedMesh&&M.skinning===false){S=true}else if(!r.isSkinnedMesh&&M.skinning===true){S=true}else if(M.envMap!==l){S=true}else if(i.fog&&M.fog!==a){S=true}else if(M.numClippingPlanes!==undefined&&(M.numClippingPlanes!==at.numPlanes||M.numIntersection!==at.numIntersection)){S=true}else if(M.vertexAlphas!==c){S=true}else if(M.vertexTangents!==u){S=true}else if(M.morphTargets!==h){S=true}else if(M.morphNormals!==f){S=true}else if(M.morphColors!==p){S=true}else if(M.toneMapping!==g){S=true}else if(W.isWebGL2===true&&M.morphTargetsCount!==y){S=true}}else{S=true;M.__version=i.version}let A=M.currentProgram;if(S===true){A=Pt(i,e,r)}let L=false;let C=false;let P=false;const R=A.getUniforms(),F=M.uniforms;if(j.useProgram(A.program)){L=true;C=true;P=true}if(i.id!==v){v=i.id;C=true}if(L||b!==t){R.setValue($,"projectionMatrix",t.projectionMatrix);if(W.logarithmicDepthBuffer){R.setValue($,"logDepthBufFC",2/(Math.log(t.far+1)/Math.LN2))}if(b!==t){b=t;C=true;P=true}if(i.isShaderMaterial||i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshStandardMaterial||i.envMap){const e=R.map.cameraPosition;if(e!==undefined){e.setValue($,G.setFromMatrixPosition(t.matrixWorld))}}if(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial){R.setValue($,"isOrthographic",t.isOrthographicCamera===true)}if(i.isMeshPhongMaterial||i.isMeshToonMaterial||i.isMeshLambertMaterial||i.isMeshBasicMaterial||i.isMeshStandardMaterial||i.isShaderMaterial||i.isShadowMaterial||r.isSkinnedMesh){R.setValue($,"viewMatrix",t.matrixWorldInverse)}}if(r.isSkinnedMesh){R.setOptional($,r,"bindMatrix");R.setOptional($,r,"bindMatrixInverse");const t=r.skeleton;if(t){if(W.floatVertexTextures){if(t.boneTexture===null)t.computeBoneTexture();R.setValue($,"boneTexture",t.boneTexture,Q);R.setValue($,"boneTextureSize",t.boneTextureSize)}else{R.setOptional($,t,"boneMatrices")}}}const I=n.morphAttributes;if(I.position!==undefined||I.normal!==undefined||I.color!==undefined&&W.isWebGL2===true){lt.update(r,n,i,A)}if(C||M.receiveShadow!==r.receiveShadow){M.receiveShadow=r.receiveShadow;R.setValue($,"receiveShadow",r.receiveShadow)}if(C){R.setValue($,"toneMappingExposure",m.toneMappingExposure);if(M.needsLights){It(F,P)}if(a&&i.fog){nt.refreshFogUniforms(F,a)}nt.refreshMaterialUniforms(F,i,E,T,N);WebGLUniforms.upload($,M.uniformsList,F,Q)}if(i.isShaderMaterial&&i.uniformsNeedUpdate===true){WebGLUniforms.upload($,M.uniformsList,F,Q);i.uniformsNeedUpdate=false}if(i.isSpriteMaterial){R.setValue($,"center",r.center)}R.setValue($,"modelViewMatrix",r.modelViewMatrix);R.setValue($,"normalMatrix",r.normalMatrix);R.setValue($,"modelMatrix",r.matrixWorld);return A}function It(t,e){t.ambientLightColor.needsUpdate=e;t.lightProbe.needsUpdate=e;t.directionalLights.needsUpdate=e;t.directionalLightShadows.needsUpdate=e;t.pointLights.needsUpdate=e;t.pointLightShadows.needsUpdate=e;t.spotLights.needsUpdate=e;t.spotLightShadows.needsUpdate=e;t.rectAreaLights.needsUpdate=e;t.hemisphereLights.needsUpdate=e}function Bt(t){return t.isMeshLambertMaterial||t.isMeshToonMaterial||t.isMeshPhongMaterial||t.isMeshStandardMaterial||t.isShadowMaterial||t.isShaderMaterial&&t.lights===true}this.getActiveCubeFace=function(){return _};this.getActiveMipmapLevel=function(){return y};this.getRenderTarget=function(){return x};this.setRenderTargetTextures=function(t,e,n){Y.get(t.texture).__webglTexture=e;Y.get(t.depthTexture).__webglTexture=n;const i=Y.get(t);i.__hasExternalTextures=true;if(i.__hasExternalTextures){i.__autoAllocateDepthBuffer=n===undefined;if(!i.__autoAllocateDepthBuffer){if(k.has("WEBGL_multisampled_render_to_texture")===true){console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided");i.__useRenderToTexture=false}}}};this.setRenderTargetFramebuffer=function(t,e){const n=Y.get(t);n.__webglFramebuffer=e;n.__useDefaultFramebuffer=e===undefined};this.setRenderTarget=function(t,e=0,n=0){x=t;_=e;y=n;let i=true;if(t){const e=Y.get(t);if(e.__useDefaultFramebuffer!==undefined){j.bindFramebuffer(36160,null);i=false}else if(e.__webglFramebuffer===undefined){Q.setupRenderTarget(t)}else if(e.__hasExternalTextures){Q.rebindTextures(t,Y.get(t.texture).__webglTexture,Y.get(t.depthTexture).__webglTexture)}}let r=null;let a=false;let s=false;if(t){const n=t.texture;if(n.isData3DTexture||n.isDataArrayTexture){s=true}const i=Y.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget){r=i[e];a=true}else if(W.isWebGL2&&t.samples>0&&Q.useMultisampledRTT(t)===false){r=Y.get(t).__webglMultisampledFramebuffer}else{r=i}M.copy(t.viewport);w.copy(t.scissor);S=t.scissorTest}else{M.copy(P).multiplyScalar(E).floor();w.copy(R).multiplyScalar(E).floor();S=F}const o=j.bindFramebuffer(36160,r);if(o&&W.drawBuffers&&i){j.drawBuffers(t,r)}j.viewport(M);j.scissor(w);j.setScissorTest(S);if(a){const i=Y.get(t.texture);$.framebufferTexture2D(36160,36064,34069+e,i.__webglTexture,n)}else if(s){const i=Y.get(t.texture);const r=e||0;$.framebufferTextureLayer(36160,36064,i.__webglTexture,n||0,r)}v=-1};this.readRenderTargetPixels=function(t,e,n,i,r,a,s){if(!(t&&t.isWebGLRenderTarget)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");return}let o=Y.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&s!==undefined){o=o[s]}if(o){j.bindFramebuffer(36160,o);try{const s=t.texture;const o=s.format;const l=s.type;if(o!==RGBAFormat&&ht.convert(o)!==$.getParameter(35739)){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");return}const c=l===HalfFloatType&&(k.has("EXT_color_buffer_half_float")||W.isWebGL2&&k.has("EXT_color_buffer_float"));if(l!==UnsignedByteType&&ht.convert(l)!==$.getParameter(35738)&&!(l===FloatType&&(W.isWebGL2||k.has("OES_texture_float")||k.has("WEBGL_color_buffer_float")))&&!c){console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");return}if($.checkFramebufferStatus(36160)===36053){if(e>=0&&e<=t.width-i&&(n>=0&&n<=t.height-r)){$.readPixels(e,n,i,r,ht.convert(o),ht.convert(l),a)}}else{console.error("THREE.WebGLRenderer.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.")}}finally{const t=x!==null?Y.get(x).__webglFramebuffer:null;j.bindFramebuffer(36160,t)}}};this.copyFramebufferToTexture=function(t,e,n=0){if(e.isFramebufferTexture!==true){console.error("THREE.WebGLRenderer: copyFramebufferToTexture() can only be used with FramebufferTexture.");return}const i=Math.pow(2,-n);const r=Math.floor(e.image.width*i);const a=Math.floor(e.image.height*i);Q.setTexture2D(e,0);$.copyTexSubImage2D(3553,n,0,0,t.x,t.y,r,a);j.unbindTexture()};this.copyTextureToTexture=function(t,e,n,i=0){const r=e.image.width;const a=e.image.height;const s=ht.convert(n.format);const o=ht.convert(n.type);Q.setTexture2D(n,0);$.pixelStorei(37440,n.flipY);$.pixelStorei(37441,n.premultiplyAlpha);$.pixelStorei(3317,n.unpackAlignment);if(e.isDataTexture){$.texSubImage2D(3553,i,t.x,t.y,r,a,s,o,e.image.data)}else{if(e.isCompressedTexture){$.compressedTexSubImage2D(3553,i,t.x,t.y,e.mipmaps[0].width,e.mipmaps[0].height,s,e.mipmaps[0].data)}else{$.texSubImage2D(3553,i,t.x,t.y,s,o,e.image)}}if(i===0&&n.generateMipmaps)$.generateMipmap(3553);j.unbindTexture()};this.copyTextureToTexture3D=function(t,e,n,i,r=0){if(m.isWebGL1Renderer){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.");return}const a=t.max.x-t.min.x+1;const s=t.max.y-t.min.y+1;const o=t.max.z-t.min.z+1;const l=ht.convert(i.format);const c=ht.convert(i.type);let u;if(i.isData3DTexture){Q.setTexture3D(i,0);u=32879}else if(i.isDataArrayTexture){Q.setTexture2DArray(i,0);u=35866}else{console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.");return}$.pixelStorei(37440,i.flipY);$.pixelStorei(37441,i.premultiplyAlpha);$.pixelStorei(3317,i.unpackAlignment);const h=$.getParameter(3314);const d=$.getParameter(32878);const f=$.getParameter(3316);const p=$.getParameter(3315);const g=$.getParameter(32877);const _=n.isCompressedTexture?n.mipmaps[0]:n.image;$.pixelStorei(3314,_.width);$.pixelStorei(32878,_.height);$.pixelStorei(3316,t.min.x);$.pixelStorei(3315,t.min.y);$.pixelStorei(32877,t.min.z);if(n.isDataTexture||n.isData3DTexture){$.texSubImage3D(u,r,e.x,e.y,e.z,a,s,o,l,c,_.data)}else{if(n.isCompressedTexture){console.warn("THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.");$.compressedTexSubImage3D(u,r,e.x,e.y,e.z,a,s,o,l,_.data)}else{$.texSubImage3D(u,r,e.x,e.y,e.z,a,s,o,l,c,_)}}$.pixelStorei(3314,h);$.pixelStorei(32878,d);$.pixelStorei(3316,f);$.pixelStorei(3315,p);$.pixelStorei(32877,g);if(r===0&&i.generateMipmaps)$.generateMipmap(u);j.unbindTexture()};this.initTexture=function(t){Q.setTexture2D(t,0);j.unbindTexture()};this.resetState=function(){_=0;y=0;x=null;j.reset();dt.reset()};if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}}WebGLRenderer.prototype.isWebGLRenderer=true;class WebGL1Renderer extends WebGLRenderer{}WebGL1Renderer.prototype.isWebGL1Renderer=true;class FogExp2{constructor(t,e=25e-5){this.name="";this.color=new Color$1(t);this.density=e}clone(){return new FogExp2(this.color,this.density)}toJSON(){return{type:"FogExp2",color:this.color.getHex(),density:this.density}}}FogExp2.prototype.isFogExp2=true;class Fog{constructor(t,e=1,n=1e3){this.name="";this.color=new Color$1(t);this.near=e;this.far=n}clone(){return new Fog(this.color,this.near,this.far)}toJSON(){return{type:"Fog",color:this.color.getHex(),near:this.near,far:this.far}}}Fog.prototype.isFog=true;class Scene extends Object3D$1{constructor(){super();this.type="Scene";this.background=null;this.environment=null;this.fog=null;this.overrideMaterial=null;this.autoUpdate=true;if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}}copy(t,e){super.copy(t,e);if(t.background!==null)this.background=t.background.clone();if(t.environment!==null)this.environment=t.environment.clone();if(t.fog!==null)this.fog=t.fog.clone();if(t.overrideMaterial!==null)this.overrideMaterial=t.overrideMaterial.clone();this.autoUpdate=t.autoUpdate;this.matrixAutoUpdate=t.matrixAutoUpdate;return this}toJSON(t){const e=super.toJSON(t);if(this.fog!==null)e.object.fog=this.fog.toJSON();return e}}Scene.prototype.isScene=true;class InterleavedBuffer{constructor(t,e){this.array=t;this.stride=e;this.count=t!==undefined?t.length/e:0;this.usage=StaticDrawUsage;this.updateRange={offset:0,count:-1};this.version=0;this.uuid=generateUUID()}onUploadCallback(){}set needsUpdate(t){if(t===true)this.version++}setUsage(t){this.usage=t;return this}copy(t){this.array=new t.array.constructor(t.array);this.count=t.count;this.stride=t.stride;this.usage=t.usage;return this}copyAt(t,e,n){t*=this.stride;n*=e.stride;for(let i=0,r=this.stride;i<r;i++){this.array[t+i]=e.array[n+i]}return this}set(t,e=0){this.array.set(t,e);return this}clone(t){if(t.arrayBuffers===undefined){t.arrayBuffers={}}if(this.array.buffer._uuid===undefined){this.array.buffer._uuid=generateUUID()}if(t.arrayBuffers[this.array.buffer._uuid]===undefined){t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer}const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]);const n=new this.constructor(e,this.stride);n.setUsage(this.usage);return n}onUpload(t){this.onUploadCallback=t;return this}toJSON(t){if(t.arrayBuffers===undefined){t.arrayBuffers={}}if(this.array.buffer._uuid===undefined){this.array.buffer._uuid=generateUUID()}if(t.arrayBuffers[this.array.buffer._uuid]===undefined){t.arrayBuffers[this.array.buffer._uuid]=Array.prototype.slice.call(new Uint32Array(this.array.buffer))}return{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}InterleavedBuffer.prototype.isInterleavedBuffer=true;const _vector$6=new Vector3$1;class InterleavedBufferAttribute{constructor(t,e,n,i=false){this.name="";this.data=t;this.itemSize=e;this.offset=n;this.normalized=i===true}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,n=this.data.count;e<n;e++){_vector$6.x=this.getX(e);_vector$6.y=this.getY(e);_vector$6.z=this.getZ(e);_vector$6.applyMatrix4(t);this.setXYZ(e,_vector$6.x,_vector$6.y,_vector$6.z)}return this}applyNormalMatrix(t){for(let e=0,n=this.count;e<n;e++){_vector$6.x=this.getX(e);_vector$6.y=this.getY(e);_vector$6.z=this.getZ(e);_vector$6.applyNormalMatrix(t);this.setXYZ(e,_vector$6.x,_vector$6.y,_vector$6.z)}return this}transformDirection(t){for(let e=0,n=this.count;e<n;e++){_vector$6.x=this.getX(e);_vector$6.y=this.getY(e);_vector$6.z=this.getZ(e);_vector$6.transformDirection(t);this.setXYZ(e,_vector$6.x,_vector$6.y,_vector$6.z)}return this}setX(t,e){this.data.array[t*this.data.stride+this.offset]=e;return this}setY(t,e){this.data.array[t*this.data.stride+this.offset+1]=e;return this}setZ(t,e){this.data.array[t*this.data.stride+this.offset+2]=e;return this}setW(t,e){this.data.array[t*this.data.stride+this.offset+3]=e;return this}getX(t){return this.data.array[t*this.data.stride+this.offset]}getY(t){return this.data.array[t*this.data.stride+this.offset+1]}getZ(t){return this.data.array[t*this.data.stride+this.offset+2]}getW(t){return this.data.array[t*this.data.stride+this.offset+3]}setXY(t,e,n){t=t*this.data.stride+this.offset;this.data.array[t+0]=e;this.data.array[t+1]=n;return this}setXYZ(t,e,n,i){t=t*this.data.stride+this.offset;this.data.array[t+0]=e;this.data.array[t+1]=n;this.data.array[t+2]=i;return this}setXYZW(t,e,n,i,r){t=t*this.data.stride+this.offset;this.data.array[t+0]=e;this.data.array[t+1]=n;this.data.array[t+2]=i;this.data.array[t+3]=r;return this}clone(t){if(t===undefined){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++){t.push(this.data.array[n+e])}}return new BufferAttribute(new this.array.constructor(t),this.itemSize,this.normalized)}else{if(t.interleavedBuffers===undefined){t.interleavedBuffers={}}if(t.interleavedBuffers[this.data.uuid]===undefined){t.interleavedBuffers[this.data.uuid]=this.data.clone(t)}return new InterleavedBufferAttribute(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}}toJSON(t){if(t===undefined){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.");const t=[];for(let e=0;e<this.count;e++){const n=e*this.data.stride+this.offset;for(let e=0;e<this.itemSize;e++){t.push(this.data.array[n+e])}}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}else{if(t.interleavedBuffers===undefined){t.interleavedBuffers={}}if(t.interleavedBuffers[this.data.uuid]===undefined){t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)}return{isInterleavedBufferAttribute:true,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}}InterleavedBufferAttribute.prototype.isInterleavedBufferAttribute=true;class SpriteMaterial extends Material{constructor(t){super();this.type="SpriteMaterial";this.color=new Color$1(16777215);this.map=null;this.alphaMap=null;this.rotation=0;this.sizeAttenuation=true;this.transparent=true;this.setValues(t)}copy(t){super.copy(t);this.color.copy(t.color);this.map=t.map;this.alphaMap=t.alphaMap;this.rotation=t.rotation;this.sizeAttenuation=t.sizeAttenuation;return this}}SpriteMaterial.prototype.isSpriteMaterial=true;let _geometry$2;const _intersectPoint=new Vector3$1;const _worldScale=new Vector3$1;const _mvPosition=new Vector3$1;const _alignedPosition=new Vector2;const _rotatedPosition=new Vector2;const _viewWorldMatrix=new Matrix4$1;const _vA=new Vector3$1;const _vB=new Vector3$1;const _vC=new Vector3$1;const _uvA=new Vector2;const _uvB=new Vector2;const _uvC=new Vector2;class Sprite extends Object3D$1{constructor(t){super();this.type="Sprite";if(_geometry$2===undefined){_geometry$2=new BufferGeometry$1;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]);const e=new InterleavedBuffer(t,5);_geometry$2.setIndex([0,1,2,0,2,3]);_geometry$2.setAttribute("position",new InterleavedBufferAttribute(e,3,0,false));_geometry$2.setAttribute("uv",new InterleavedBufferAttribute(e,2,3,false))}this.geometry=_geometry$2;this.material=t!==undefined?t:new SpriteMaterial;this.center=new Vector2(.5,.5)}raycast(t,e){if(t.camera===null){console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.')}_worldScale.setFromMatrixScale(this.matrixWorld);_viewWorldMatrix.copy(t.camera.matrixWorld);this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld);_mvPosition.setFromMatrixPosition(this.modelViewMatrix);if(t.camera.isPerspectiveCamera&&this.material.sizeAttenuation===false){_worldScale.multiplyScalar(-_mvPosition.z)}const n=this.material.rotation;let i,r;if(n!==0){r=Math.cos(n);i=Math.sin(n)}const a=this.center;transformVertex(_vA.set(-.5,-.5,0),_mvPosition,a,_worldScale,i,r);transformVertex(_vB.set(.5,-.5,0),_mvPosition,a,_worldScale,i,r);transformVertex(_vC.set(.5,.5,0),_mvPosition,a,_worldScale,i,r);_uvA.set(0,0);_uvB.set(1,0);_uvC.set(1,1);let s=t.ray.intersectTriangle(_vA,_vB,_vC,false,_intersectPoint);if(s===null){transformVertex(_vB.set(-.5,.5,0),_mvPosition,a,_worldScale,i,r);_uvB.set(0,1);s=t.ray.intersectTriangle(_vA,_vC,_vB,false,_intersectPoint);if(s===null){return}}const o=t.ray.origin.distanceTo(_intersectPoint);if(o<t.near||o>t.far)return;e.push({distance:o,point:_intersectPoint.clone(),uv:Triangle.getUV(_intersectPoint,_vA,_vB,_vC,_uvA,_uvB,_uvC,new Vector2),face:null,object:this})}copy(t){super.copy(t);if(t.center!==undefined)this.center.copy(t.center);this.material=t.material;return this}}Sprite.prototype.isSprite=true;function transformVertex(t,e,n,i,r,a){_alignedPosition.subVectors(t,n).addScalar(.5).multiply(i);if(r!==undefined){_rotatedPosition.x=a*_alignedPosition.x-r*_alignedPosition.y;_rotatedPosition.y=r*_alignedPosition.x+a*_alignedPosition.y}else{_rotatedPosition.copy(_alignedPosition)}t.copy(e);t.x+=_rotatedPosition.x;t.y+=_rotatedPosition.y;t.applyMatrix4(_viewWorldMatrix)}const _v1$2=new Vector3$1;const _v2$1=new Vector3$1;class LOD extends Object3D$1{constructor(){super();this._currentLevel=0;this.type="LOD";Object.defineProperties(this,{levels:{enumerable:true,value:[]},isLOD:{value:true}});this.autoUpdate=true}copy(t){super.copy(t,false);const e=t.levels;for(let t=0,n=e.length;t<n;t++){const n=e[t];this.addLevel(n.object.clone(),n.distance)}this.autoUpdate=t.autoUpdate;return this}addLevel(t,e=0){e=Math.abs(e);const n=this.levels;let i;for(i=0;i<n.length;i++){if(e<n[i].distance){break}}n.splice(i,0,{distance:e,object:t});this.add(t);return this}getCurrentLevel(){return this._currentLevel}getObjectForDistance(t){const e=this.levels;if(e.length>0){let n,i;for(n=1,i=e.length;n<i;n++){if(t<e[n].distance){break}}return e[n-1].object}return null}raycast(t,e){const n=this.levels;if(n.length>0){_v1$2.setFromMatrixPosition(this.matrixWorld);const n=t.ray.origin.distanceTo(_v1$2);this.getObjectForDistance(n).raycast(t,e)}}update(t){const e=this.levels;if(e.length>1){_v1$2.setFromMatrixPosition(t.matrixWorld);_v2$1.setFromMatrixPosition(this.matrixWorld);const n=_v1$2.distanceTo(_v2$1)/t.zoom;e[0].object.visible=true;let i,r;for(i=1,r=e.length;i<r;i++){if(n>=e[i].distance){e[i-1].object.visible=false;e[i].object.visible=true}else{break}}this._currentLevel=i-1;for(;i<r;i++){e[i].object.visible=false}}}toJSON(t){const e=super.toJSON(t);if(this.autoUpdate===false)e.object.autoUpdate=false;e.object.levels=[];const n=this.levels;for(let t=0,i=n.length;t<i;t++){const i=n[t];e.object.levels.push({object:i.object.uuid,distance:i.distance})}return e}}const _basePosition=new Vector3$1;const _skinIndex=new Vector4;const _skinWeight=new Vector4;const _vector$5=new Vector3$1;const _matrix=new Matrix4$1;class SkinnedMesh extends Mesh$1{constructor(t,e){super(t,e);this.type="SkinnedMesh";this.bindMode="attached";this.bindMatrix=new Matrix4$1;this.bindMatrixInverse=new Matrix4$1}copy(t){super.copy(t);this.bindMode=t.bindMode;this.bindMatrix.copy(t.bindMatrix);this.bindMatrixInverse.copy(t.bindMatrixInverse);this.skeleton=t.skeleton;return this}bind(t,e){this.skeleton=t;if(e===undefined){this.updateMatrixWorld(true);this.skeleton.calculateInverses();e=this.matrixWorld}this.bindMatrix.copy(e);this.bindMatrixInverse.copy(e).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const t=new Vector4;const e=this.geometry.attributes.skinWeight;for(let n=0,i=e.count;n<i;n++){t.x=e.getX(n);t.y=e.getY(n);t.z=e.getZ(n);t.w=e.getW(n);const i=1/t.manhattanLength();if(i!==Infinity){t.multiplyScalar(i)}else{t.set(1,0,0,0)}e.setXYZW(n,t.x,t.y,t.z,t.w)}}updateMatrixWorld(t){super.updateMatrixWorld(t);if(this.bindMode==="attached"){this.bindMatrixInverse.copy(this.matrixWorld).invert()}else if(this.bindMode==="detached"){this.bindMatrixInverse.copy(this.bindMatrix).invert()}else{console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}}boneTransform(t,e){const n=this.skeleton;const i=this.geometry;_skinIndex.fromBufferAttribute(i.attributes.skinIndex,t);_skinWeight.fromBufferAttribute(i.attributes.skinWeight,t);_basePosition.copy(e).applyMatrix4(this.bindMatrix);e.set(0,0,0);for(let t=0;t<4;t++){const i=_skinWeight.getComponent(t);if(i!==0){const r=_skinIndex.getComponent(t);_matrix.multiplyMatrices(n.bones[r].matrixWorld,n.boneInverses[r]);e.addScaledVector(_vector$5.copy(_basePosition).applyMatrix4(_matrix),i)}}return e.applyMatrix4(this.bindMatrixInverse)}}SkinnedMesh.prototype.isSkinnedMesh=true;class Bone extends Object3D$1{constructor(){super();this.type="Bone"}}Bone.prototype.isBone=true;class DataTexture extends Texture{constructor(t=null,e=1,n=1,i,r,a,s,o,l=NearestFilter,c=NearestFilter,u,h){super(null,a,s,o,l,c,i,r,u,h);this.image={data:t,width:e,height:n};this.generateMipmaps=false;this.flipY=false;this.unpackAlignment=1}}DataTexture.prototype.isDataTexture=true;const _offsetMatrix=new Matrix4$1;const _identityMatrix=new Matrix4$1;class Skeleton{constructor(t=[],e=[]){this.uuid=generateUUID();this.bones=t.slice(0);this.boneInverses=e;this.boneMatrices=null;this.boneTexture=null;this.boneTextureSize=0;this.frame=-1;this.init()}init(){const t=this.bones;const e=this.boneInverses;this.boneMatrices=new Float32Array(t.length*16);if(e.length===0){this.calculateInverses()}else{if(t.length!==e.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones.");this.boneInverses=[];for(let t=0,e=this.bones.length;t<e;t++){this.boneInverses.push(new Matrix4$1)}}}}calculateInverses(){this.boneInverses.length=0;for(let t=0,e=this.bones.length;t<e;t++){const e=new Matrix4$1;if(this.bones[t]){e.copy(this.bones[t].matrixWorld).invert()}this.boneInverses.push(e)}}pose(){for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];if(e){e.matrixWorld.copy(this.boneInverses[t]).invert()}}for(let t=0,e=this.bones.length;t<e;t++){const e=this.bones[t];if(e){if(e.parent&&e.parent.isBone){e.matrix.copy(e.parent.matrixWorld).invert();e.matrix.multiply(e.matrixWorld)}else{e.matrix.copy(e.matrixWorld)}e.matrix.decompose(e.position,e.quaternion,e.scale)}}}update(){const t=this.bones;const e=this.boneInverses;const n=this.boneMatrices;const i=this.boneTexture;for(let i=0,r=t.length;i<r;i++){const r=t[i]?t[i].matrixWorld:_identityMatrix;_offsetMatrix.multiplyMatrices(r,e[i]);_offsetMatrix.toArray(n,i*16)}if(i!==null){i.needsUpdate=true}}clone(){return new Skeleton(this.bones,this.boneInverses)}computeBoneTexture(){let t=Math.sqrt(this.bones.length*4);t=ceilPowerOfTwo(t);t=Math.max(t,4);const e=new Float32Array(t*t*4);e.set(this.boneMatrices);const n=new DataTexture(e,t,t,RGBAFormat,FloatType);n.needsUpdate=true;this.boneMatrices=e;this.boneTexture=n;this.boneTextureSize=t;return this}getBoneByName(t){for(let e=0,n=this.bones.length;e<n;e++){const n=this.bones[e];if(n.name===t){return n}}return undefined}dispose(){if(this.boneTexture!==null){this.boneTexture.dispose();this.boneTexture=null}}fromJSON(t,e){this.uuid=t.uuid;for(let n=0,i=t.bones.length;n<i;n++){const i=t.bones[n];let r=e[i];if(r===undefined){console.warn("THREE.Skeleton: No bone found with UUID:",i);r=new Bone}this.bones.push(r);this.boneInverses.push((new Matrix4$1).fromArray(t.boneInverses[n]))}this.init();return this}toJSON(){const t={metadata:{version:4.5,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};t.uuid=this.uuid;const e=this.bones;const n=this.boneInverses;for(let i=0,r=e.length;i<r;i++){const r=e[i];t.bones.push(r.uuid);const a=n[i];t.boneInverses.push(a.toArray())}return t}}class InstancedBufferAttribute extends BufferAttribute{constructor(t,e,n,i=1){if(typeof n==="number"){i=n;n=false;console.error("THREE.InstancedBufferAttribute: The constructor now expects normalized as the third argument.")}super(t,e,n);this.meshPerAttribute=i}copy(t){super.copy(t);this.meshPerAttribute=t.meshPerAttribute;return this}toJSON(){const t=super.toJSON();t.meshPerAttribute=this.meshPerAttribute;t.isInstancedBufferAttribute=true;return t}}InstancedBufferAttribute.prototype.isInstancedBufferAttribute=true;const _instanceLocalMatrix=new Matrix4$1;const _instanceWorldMatrix=new Matrix4$1;const _instanceIntersects=[];const _mesh=new Mesh$1;class InstancedMesh extends Mesh$1{constructor(t,e,n){super(t,e);this.instanceMatrix=new InstancedBufferAttribute(new Float32Array(n*16),16);this.instanceColor=null;this.count=n;this.frustumCulled=false}copy(t){super.copy(t);this.instanceMatrix.copy(t.instanceMatrix);if(t.instanceColor!==null)this.instanceColor=t.instanceColor.clone();this.count=t.count;return this}getColorAt(t,e){e.fromArray(this.instanceColor.array,t*3)}getMatrixAt(t,e){e.fromArray(this.instanceMatrix.array,t*16)}raycast(t,e){const n=this.matrixWorld;const i=this.count;_mesh.geometry=this.geometry;_mesh.material=this.material;if(_mesh.material===undefined)return;for(let r=0;r<i;r++){this.getMatrixAt(r,_instanceLocalMatrix);_instanceWorldMatrix.multiplyMatrices(n,_instanceLocalMatrix);_mesh.matrixWorld=_instanceWorldMatrix;_mesh.raycast(t,_instanceIntersects);for(let t=0,n=_instanceIntersects.length;t<n;t++){const n=_instanceIntersects[t];n.instanceId=r;n.object=this;e.push(n)}_instanceIntersects.length=0}}setColorAt(t,e){if(this.instanceColor===null){this.instanceColor=new InstancedBufferAttribute(new Float32Array(this.instanceMatrix.count*3),3)}e.toArray(this.instanceColor.array,t*3)}setMatrixAt(t,e){e.toArray(this.instanceMatrix.array,t*16)}updateMorphTargets(){}dispose(){this.dispatchEvent({type:"dispose"})}}InstancedMesh.prototype.isInstancedMesh=true;class LineBasicMaterial$1 extends Material{constructor(t){super();this.type="LineBasicMaterial";this.color=new Color$1(16777215);this.linewidth=1;this.linecap="round";this.linejoin="round";this.setValues(t)}copy(t){super.copy(t);this.color.copy(t.color);this.linewidth=t.linewidth;this.linecap=t.linecap;this.linejoin=t.linejoin;return this}}LineBasicMaterial$1.prototype.isLineBasicMaterial=true;const _start$1=new Vector3$1;const _end$1=new Vector3$1;const _inverseMatrix$1=new Matrix4$1;const _ray$1=new Ray;const _sphere$1=new Sphere;class Line$1 extends Object3D$1{constructor(t=new BufferGeometry$1,e=new LineBasicMaterial$1){super();this.type="Line";this.geometry=t;this.material=e;this.updateMorphTargets()}copy(t){super.copy(t);this.material=t.material;this.geometry=t.geometry;return this}computeLineDistances(){const t=this.geometry;if(t.isBufferGeometry){if(t.index===null){const e=t.attributes.position;const n=[0];for(let t=1,i=e.count;t<i;t++){_start$1.fromBufferAttribute(e,t-1);_end$1.fromBufferAttribute(e,t);n[t]=n[t-1];n[t]+=_start$1.distanceTo(_end$1)}t.setAttribute("lineDistance",new Float32BufferAttribute$1(n,1))}else{console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.")}}else if(t.isGeometry){console.error("THREE.Line.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}return this}raycast(t,e){const n=this.geometry;const i=this.matrixWorld;const r=t.params.Line.threshold;const a=n.drawRange;if(n.boundingSphere===null)n.computeBoundingSphere();_sphere$1.copy(n.boundingSphere);_sphere$1.applyMatrix4(i);_sphere$1.radius+=r;if(t.ray.intersectsSphere(_sphere$1)===false)return;_inverseMatrix$1.copy(i).invert();_ray$1.copy(t.ray).applyMatrix4(_inverseMatrix$1);const s=r/((this.scale.x+this.scale.y+this.scale.z)/3);const o=s*s;const l=new Vector3$1;const c=new Vector3$1;const u=new Vector3$1;const h=new Vector3$1;const d=this.isLineSegments?2:1;if(n.isBufferGeometry){const i=n.index;const r=n.attributes;const s=r.position;if(i!==null){const n=Math.max(0,a.start);const r=Math.min(i.count,a.start+a.count);for(let a=n,f=r-1;a<f;a+=d){const n=i.getX(a);const r=i.getX(a+1);l.fromBufferAttribute(s,n);c.fromBufferAttribute(s,r);const d=_ray$1.distanceSqToSegment(l,c,h,u);if(d>o)continue;h.applyMatrix4(this.matrixWorld);const f=t.ray.origin.distanceTo(h);if(f<t.near||f>t.far)continue;e.push({distance:f,point:u.clone().applyMatrix4(this.matrixWorld),index:a,face:null,faceIndex:null,object:this})}}else{const n=Math.max(0,a.start);const i=Math.min(s.count,a.start+a.count);for(let r=n,a=i-1;r<a;r+=d){l.fromBufferAttribute(s,r);c.fromBufferAttribute(s,r+1);const n=_ray$1.distanceSqToSegment(l,c,h,u);if(n>o)continue;h.applyMatrix4(this.matrixWorld);const i=t.ray.origin.distanceTo(h);if(i<t.near||i>t.far)continue;e.push({distance:i,point:u.clone().applyMatrix4(this.matrixWorld),index:r,face:null,faceIndex:null,object:this})}}}else if(n.isGeometry){console.error("THREE.Line.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes;const n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(t!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0);this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;if(e!==undefined&&e.length>0){console.error("THREE.Line.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}}Line$1.prototype.isLine=true;const _start=new Vector3$1;const _end=new Vector3$1;class LineSegments extends Line$1{constructor(t,e){super(t,e);this.type="LineSegments"}computeLineDistances(){const t=this.geometry;if(t.isBufferGeometry){if(t.index===null){const e=t.attributes.position;const n=[];for(let t=0,i=e.count;t<i;t+=2){_start.fromBufferAttribute(e,t);_end.fromBufferAttribute(e,t+1);n[t]=t===0?0:n[t-1];n[t+1]=n[t]+_start.distanceTo(_end)}t.setAttribute("lineDistance",new Float32BufferAttribute$1(n,1))}else{console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.")}}else if(t.isGeometry){console.error("THREE.LineSegments.computeLineDistances() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}return this}}LineSegments.prototype.isLineSegments=true;class LineLoop extends Line$1{constructor(t,e){super(t,e);this.type="LineLoop"}}LineLoop.prototype.isLineLoop=true;class PointsMaterial extends Material{constructor(t){super();this.type="PointsMaterial";this.color=new Color$1(16777215);this.map=null;this.alphaMap=null;this.size=1;this.sizeAttenuation=true;this.setValues(t)}copy(t){super.copy(t);this.color.copy(t.color);this.map=t.map;this.alphaMap=t.alphaMap;this.size=t.size;this.sizeAttenuation=t.sizeAttenuation;return this}}PointsMaterial.prototype.isPointsMaterial=true;const _inverseMatrix=new Matrix4$1;const _ray=new Ray;const _sphere=new Sphere;const _position$2=new Vector3$1;class Points extends Object3D$1{constructor(t=new BufferGeometry$1,e=new PointsMaterial){super();this.type="Points";this.geometry=t;this.material=e;this.updateMorphTargets()}copy(t){super.copy(t);this.material=t.material;this.geometry=t.geometry;return this}raycast(t,e){const n=this.geometry;const i=this.matrixWorld;const r=t.params.Points.threshold;const a=n.drawRange;if(n.boundingSphere===null)n.computeBoundingSphere();_sphere.copy(n.boundingSphere);_sphere.applyMatrix4(i);_sphere.radius+=r;if(t.ray.intersectsSphere(_sphere)===false)return;_inverseMatrix.copy(i).invert();_ray.copy(t.ray).applyMatrix4(_inverseMatrix);const s=r/((this.scale.x+this.scale.y+this.scale.z)/3);const o=s*s;if(n.isBufferGeometry){const r=n.index;const s=n.attributes;const l=s.position;if(r!==null){const n=Math.max(0,a.start);const s=Math.min(r.count,a.start+a.count);for(let a=n,c=s;a<c;a++){const n=r.getX(a);_position$2.fromBufferAttribute(l,n);testPoint(_position$2,n,o,i,t,e,this)}}else{const n=Math.max(0,a.start);const r=Math.min(l.count,a.start+a.count);for(let a=n,s=r;a<s;a++){_position$2.fromBufferAttribute(l,a);testPoint(_position$2,a,o,i,t,e,this)}}}else{console.error("THREE.Points.raycast() no longer supports THREE.Geometry. Use THREE.BufferGeometry instead.")}}updateMorphTargets(){const t=this.geometry;if(t.isBufferGeometry){const e=t.morphAttributes;const n=Object.keys(e);if(n.length>0){const t=e[n[0]];if(t!==undefined){this.morphTargetInfluences=[];this.morphTargetDictionary={};for(let e=0,n=t.length;e<n;e++){const n=t[e].name||String(e);this.morphTargetInfluences.push(0);this.morphTargetDictionary[n]=e}}}}else{const e=t.morphTargets;if(e!==undefined&&e.length>0){console.error("THREE.Points.updateMorphTargets() does not support THREE.Geometry. Use THREE.BufferGeometry instead.")}}}}Points.prototype.isPoints=true;function testPoint(t,e,n,i,r,a,s){const o=_ray.distanceSqToPoint(t);if(o<n){const n=new Vector3$1;_ray.closestPointToPoint(t,n);n.applyMatrix4(i);const l=r.ray.origin.distanceTo(n);if(l<r.near||l>r.far)return;a.push({distance:l,distanceToRay:Math.sqrt(o),point:n,index:e,face:null,object:s})}}class VideoTexture extends Texture{constructor(t,e,n,i,r,a,s,o,l){super(t,e,n,i,r,a,s,o,l);this.minFilter=a!==undefined?a:LinearFilter;this.magFilter=r!==undefined?r:LinearFilter;this.generateMipmaps=false;const c=this;function u(){c.needsUpdate=true;t.requestVideoFrameCallback(u)}if("requestVideoFrameCallback"in t){t.requestVideoFrameCallback(u)}}clone(){return new this.constructor(this.image).copy(this)}update(){const t=this.image;const e="requestVideoFrameCallback"in t;if(e===false&&t.readyState>=t.HAVE_CURRENT_DATA){this.needsUpdate=true}}}VideoTexture.prototype.isVideoTexture=true;class FramebufferTexture extends Texture{constructor(t,e,n){super({width:t,height:e});this.format=n;this.magFilter=NearestFilter;this.minFilter=NearestFilter;this.generateMipmaps=false;this.needsUpdate=true}}FramebufferTexture.prototype.isFramebufferTexture=true;class CompressedTexture extends Texture{constructor(t,e,n,i,r,a,s,o,l,c,u,h){super(null,a,s,o,l,c,i,r,u,h);this.image={width:e,height:n};this.mipmaps=t;this.flipY=false;this.generateMipmaps=false}}CompressedTexture.prototype.isCompressedTexture=true;class CanvasTexture extends Texture{constructor(t,e,n,i,r,a,s,o,l){super(t,e,n,i,r,a,s,o,l);this.needsUpdate=true}}CanvasTexture.prototype.isCanvasTexture=true;class CircleGeometry extends BufferGeometry$1{constructor(t=1,e=8,n=0,i=Math.PI*2){super();this.type="CircleGeometry";this.parameters={radius:t,segments:e,thetaStart:n,thetaLength:i};e=Math.max(3,e);const r=[];const a=[];const s=[];const o=[];const l=new Vector3$1;const c=new Vector2;a.push(0,0,0);s.push(0,0,1);o.push(.5,.5);for(let r=0,u=3;r<=e;r++,u+=3){const h=n+r/e*i;l.x=t*Math.cos(h);l.y=t*Math.sin(h);a.push(l.x,l.y,l.z);s.push(0,0,1);c.x=(a[u]/t+1)/2;c.y=(a[u+1]/t+1)/2;o.push(c.x,c.y)}for(let t=1;t<=e;t++){r.push(t,t+1,0)}this.setIndex(r);this.setAttribute("position",new Float32BufferAttribute$1(a,3));this.setAttribute("normal",new Float32BufferAttribute$1(s,3));this.setAttribute("uv",new Float32BufferAttribute$1(o,2))}static fromJSON(t){return new CircleGeometry(t.radius,t.segments,t.thetaStart,t.thetaLength)}}class CylinderGeometry$1 extends BufferGeometry$1{constructor(t=1,e=1,n=1,i=8,r=1,a=false,s=0,o=Math.PI*2){super();this.type="CylinderGeometry";this.parameters={radiusTop:t,radiusBottom:e,height:n,radialSegments:i,heightSegments:r,openEnded:a,thetaStart:s,thetaLength:o};const l=this;i=Math.floor(i);r=Math.floor(r);const c=[];const u=[];const h=[];const d=[];let f=0;const p=[];const m=n/2;let g=0;_();if(a===false){if(t>0)y(true);if(e>0)y(false)}this.setIndex(c);this.setAttribute("position",new Float32BufferAttribute$1(u,3));this.setAttribute("normal",new Float32BufferAttribute$1(h,3));this.setAttribute("uv",new Float32BufferAttribute$1(d,2));function _(){const a=new Vector3$1;const _=new Vector3$1;let y=0;const x=(e-t)/n;for(let l=0;l<=r;l++){const c=[];const g=l/r;const y=g*(e-t)+t;for(let t=0;t<=i;t++){const e=t/i;const r=e*o+s;const l=Math.sin(r);const p=Math.cos(r);_.x=y*l;_.y=-g*n+m;_.z=y*p;u.push(_.x,_.y,_.z);a.set(l,x,p).normalize();h.push(a.x,a.y,a.z);d.push(e,1-g);c.push(f++)}p.push(c)}for(let t=0;t<i;t++){for(let e=0;e<r;e++){const n=p[e][t];const i=p[e+1][t];const r=p[e+1][t+1];const a=p[e][t+1];c.push(n,i,a);c.push(i,r,a);y+=6}}l.addGroup(g,y,0);g+=y}function y(n){const r=f;const a=new Vector2;const p=new Vector3$1;let _=0;const y=n===true?t:e;const x=n===true?1:-1;for(let t=1;t<=i;t++){u.push(0,m*x,0);h.push(0,x,0);d.push(.5,.5);f++}const v=f;for(let t=0;t<=i;t++){const e=t/i;const n=e*o+s;const r=Math.cos(n);const l=Math.sin(n);p.x=y*l;p.y=m*x;p.z=y*r;u.push(p.x,p.y,p.z);h.push(0,x,0);a.x=r*.5+.5;a.y=l*.5*x+.5;d.push(a.x,a.y);f++}for(let t=0;t<i;t++){const e=r+t;const i=v+t;if(n===true){c.push(i,i+1,e)}else{c.push(i+1,i,e)}_+=3}l.addGroup(g,_,n===true?1:2);g+=_}}static fromJSON(t){return new CylinderGeometry$1(t.radiusTop,t.radiusBottom,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)}}class ConeGeometry extends CylinderGeometry$1{constructor(t=1,e=1,n=8,i=1,r=false,a=0,s=Math.PI*2){super(0,t,e,n,i,r,a,s);this.type="ConeGeometry";this.parameters={radius:t,height:e,radialSegments:n,heightSegments:i,openEnded:r,thetaStart:a,thetaLength:s}}static fromJSON(t){return new ConeGeometry(t.radius,t.height,t.radialSegments,t.heightSegments,t.openEnded,t.thetaStart,t.thetaLength)}}class PolyhedronGeometry extends BufferGeometry$1{constructor(t=[],e=[],n=1,i=0){super();this.type="PolyhedronGeometry";this.parameters={vertices:t,indices:e,radius:n,detail:i};const r=[];const a=[];s(i);l(n);c();this.setAttribute("position",new Float32BufferAttribute$1(r,3));this.setAttribute("normal",new Float32BufferAttribute$1(r.slice(),3));this.setAttribute("uv",new Float32BufferAttribute$1(a,2));if(i===0){this.computeVertexNormals()}else{this.normalizeNormals()}function s(t){const n=new Vector3$1;const i=new Vector3$1;const r=new Vector3$1;for(let a=0;a<e.length;a+=3){d(e[a+0],n);d(e[a+1],i);d(e[a+2],r);o(n,i,r,t)}}function o(t,e,n,i){const r=i+1;const a=[];for(let i=0;i<=r;i++){a[i]=[];const s=t.clone().lerp(n,i/r);const o=e.clone().lerp(n,i/r);const l=r-i;for(let t=0;t<=l;t++){if(t===0&&i===r){a[i][t]=s}else{a[i][t]=s.clone().lerp(o,t/l)}}}for(let t=0;t<r;t++){for(let e=0;e<2*(r-t)-1;e++){const n=Math.floor(e/2);if(e%2===0){h(a[t][n+1]);h(a[t+1][n]);h(a[t][n])}else{h(a[t][n+1]);h(a[t+1][n+1]);h(a[t+1][n])}}}}function l(t){const e=new Vector3$1;for(let n=0;n<r.length;n+=3){e.x=r[n+0];e.y=r[n+1];e.z=r[n+2];e.normalize().multiplyScalar(t);r[n+0]=e.x;r[n+1]=e.y;r[n+2]=e.z}}function c(){const t=new Vector3$1;for(let e=0;e<r.length;e+=3){t.x=r[e+0];t.y=r[e+1];t.z=r[e+2];const n=m(t)/2/Math.PI+.5;const i=g(t)/Math.PI+.5;a.push(n,1-i)}f();u()}function u(){for(let t=0;t<a.length;t+=6){const e=a[t+0];const n=a[t+2];const i=a[t+4];const r=Math.max(e,n,i);const s=Math.min(e,n,i);if(r>.9&&s<.1){if(e<.2)a[t+0]+=1;if(n<.2)a[t+2]+=1;if(i<.2)a[t+4]+=1}}}function h(t){r.push(t.x,t.y,t.z)}function d(e,n){const i=e*3;n.x=t[i+0];n.y=t[i+1];n.z=t[i+2]}function f(){const t=new Vector3$1;const e=new Vector3$1;const n=new Vector3$1;const i=new Vector3$1;const s=new Vector2;const o=new Vector2;const l=new Vector2;for(let c=0,u=0;c<r.length;c+=9,u+=6){t.set(r[c+0],r[c+1],r[c+2]);e.set(r[c+3],r[c+4],r[c+5]);n.set(r[c+6],r[c+7],r[c+8]);s.set(a[u+0],a[u+1]);o.set(a[u+2],a[u+3]);l.set(a[u+4],a[u+5]);i.copy(t).add(e).add(n).divideScalar(3);const h=m(i);p(s,u+0,t,h);p(o,u+2,e,h);p(l,u+4,n,h)}}function p(t,e,n,i){if(i<0&&t.x===1){a[e]=t.x-1}if(n.x===0&&n.z===0){a[e]=i/2/Math.PI+.5}}function m(t){return Math.atan2(t.z,-t.x)}function g(t){return Math.atan2(-t.y,Math.sqrt(t.x*t.x+t.z*t.z))}}static fromJSON(t){return new PolyhedronGeometry(t.vertices,t.indices,t.radius,t.details)}}class DodecahedronGeometry extends PolyhedronGeometry{constructor(t=1,e=0){const n=(1+Math.sqrt(5))/2;const i=1/n;const r=[-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-i,-n,0,-i,n,0,i,-n,0,i,n,-i,-n,0,-i,n,0,i,-n,0,i,n,0,-n,0,-i,n,0,-i,-n,0,i,n,0,i];const a=[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9];super(r,a,t,e);this.type="DodecahedronGeometry";this.parameters={radius:t,detail:e}}static fromJSON(t){return new DodecahedronGeometry(t.radius,t.detail)}}const _v0=new Vector3$1;const _v1$1=new Vector3$1;const _normal=new Vector3$1;const _triangle=new Triangle;class EdgesGeometry extends BufferGeometry$1{constructor(t=null,e=1){super();this.type="EdgesGeometry";this.parameters={geometry:t,thresholdAngle:e};if(t!==null){const n=4;const i=Math.pow(10,n);const r=Math.cos(DEG2RAD*e);const a=t.getIndex();const s=t.getAttribute("position");const o=a?a.count:s.count;const l=[0,0,0];const c=["a","b","c"];const u=new Array(3);const h={};const d=[];for(let t=0;t<o;t+=3){if(a){l[0]=a.getX(t);l[1]=a.getX(t+1);l[2]=a.getX(t+2)}else{l[0]=t;l[1]=t+1;l[2]=t+2}const{a:e,b:n,c:o}=_triangle;e.fromBufferAttribute(s,l[0]);n.fromBufferAttribute(s,l[1]);o.fromBufferAttribute(s,l[2]);_triangle.getNormal(_normal);u[0]=`${Math.round(e.x*i)},${Math.round(e.y*i)},${Math.round(e.z*i)}`;u[1]=`${Math.round(n.x*i)},${Math.round(n.y*i)},${Math.round(n.z*i)}`;u[2]=`${Math.round(o.x*i)},${Math.round(o.y*i)},${Math.round(o.z*i)}`;if(u[0]===u[1]||u[1]===u[2]||u[2]===u[0]){continue}for(let t=0;t<3;t++){const e=(t+1)%3;const n=u[t];const i=u[e];const a=_triangle[c[t]];const s=_triangle[c[e]];const o=`${n}_${i}`;const f=`${i}_${n}`;if(f in h&&h[f]){if(_normal.dot(h[f].normal)<=r){d.push(a.x,a.y,a.z);d.push(s.x,s.y,s.z)}h[f]=null}else if(!(o in h)){h[o]={index0:l[t],index1:l[e],normal:_normal.clone()}}}}for(const t in h){if(h[t]){const{index0:e,index1:n}=h[t];_v0.fromBufferAttribute(s,e);_v1$1.fromBufferAttribute(s,n);d.push(_v0.x,_v0.y,_v0.z);d.push(_v1$1.x,_v1$1.y,_v1$1.z)}}this.setAttribute("position",new Float32BufferAttribute$1(d,3))}}}class Curve{constructor(){this.type="Curve";this.arcLengthDivisions=200}getPoint(){console.warn("THREE.Curve: .getPoint() not implemented.");return null}getPointAt(t,e){const n=this.getUtoTmapping(t);return this.getPoint(n,e)}getPoints(t=5){const e=[];for(let n=0;n<=t;n++){e.push(this.getPoint(n/t))}return e}getSpacedPoints(t=5){const e=[];for(let n=0;n<=t;n++){e.push(this.getPointAt(n/t))}return e}getLength(){const t=this.getLengths();return t[t.length-1]}getLengths(t=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate){return this.cacheArcLengths}this.needsUpdate=false;const e=[];let n,i=this.getPoint(0);let r=0;e.push(0);for(let a=1;a<=t;a++){n=this.getPoint(a/t);r+=n.distanceTo(i);e.push(r);i=n}this.cacheArcLengths=e;return e}updateArcLengths(){this.needsUpdate=true;this.getLengths()}getUtoTmapping(t,e){const n=this.getLengths();let i=0;const r=n.length;let a;if(e){a=e}else{a=t*n[r-1]}let s=0,o=r-1,l;while(s<=o){i=Math.floor(s+(o-s)/2);l=n[i]-a;if(l<0){s=i+1}else if(l>0){o=i-1}else{o=i;break}}i=o;if(n[i]===a){return i/(r-1)}const c=n[i];const u=n[i+1];const h=u-c;const d=(a-c)/h;const f=(i+d)/(r-1);return f}getTangent(t,e){const n=1e-4;let i=t-n;let r=t+n;if(i<0)i=0;if(r>1)r=1;const a=this.getPoint(i);const s=this.getPoint(r);const o=e||(a.isVector2?new Vector2:new Vector3$1);o.copy(s).sub(a).normalize();return o}getTangentAt(t,e){const n=this.getUtoTmapping(t);return this.getTangent(n,e)}computeFrenetFrames(t,e){const n=new Vector3$1;const i=[];const r=[];const a=[];const s=new Vector3$1;const o=new Matrix4$1;for(let e=0;e<=t;e++){const n=e/t;i[e]=this.getTangentAt(n,new Vector3$1)}r[0]=new Vector3$1;a[0]=new Vector3$1;let l=Number.MAX_VALUE;const c=Math.abs(i[0].x);const u=Math.abs(i[0].y);const h=Math.abs(i[0].z);if(c<=l){l=c;n.set(1,0,0)}if(u<=l){l=u;n.set(0,1,0)}if(h<=l){n.set(0,0,1)}s.crossVectors(i[0],n).normalize();r[0].crossVectors(i[0],s);a[0].crossVectors(i[0],r[0]);for(let e=1;e<=t;e++){r[e]=r[e-1].clone();a[e]=a[e-1].clone();s.crossVectors(i[e-1],i[e]);if(s.length()>Number.EPSILON){s.normalize();const t=Math.acos(clamp(i[e-1].dot(i[e]),-1,1));r[e].applyMatrix4(o.makeRotationAxis(s,t))}a[e].crossVectors(i[e],r[e])}if(e===true){let e=Math.acos(clamp(r[0].dot(r[t]),-1,1));e/=t;if(i[0].dot(s.crossVectors(r[0],r[t]))>0){e=-e}for(let n=1;n<=t;n++){r[n].applyMatrix4(o.makeRotationAxis(i[n],e*n));a[n].crossVectors(i[n],r[n])}}return{tangents:i,normals:r,binormals:a}}clone(){return(new this.constructor).copy(this)}copy(t){this.arcLengthDivisions=t.arcLengthDivisions;return this}toJSON(){const t={metadata:{version:4.5,type:"Curve",generator:"Curve.toJSON"}};t.arcLengthDivisions=this.arcLengthDivisions;t.type=this.type;return t}fromJSON(t){this.arcLengthDivisions=t.arcLengthDivisions;return this}}class EllipseCurve extends Curve{constructor(t=0,e=0,n=1,i=1,r=0,a=Math.PI*2,s=false,o=0){super();this.type="EllipseCurve";this.aX=t;this.aY=e;this.xRadius=n;this.yRadius=i;this.aStartAngle=r;this.aEndAngle=a;this.aClockwise=s;this.aRotation=o}getPoint(t,e){const n=e||new Vector2;const i=Math.PI*2;let r=this.aEndAngle-this.aStartAngle;const a=Math.abs(r)<Number.EPSILON;while(r<0)r+=i;while(r>i)r-=i;if(r<Number.EPSILON){if(a){r=0}else{r=i}}if(this.aClockwise===true&&!a){if(r===i){r=-i}else{r=r-i}}const s=this.aStartAngle+t*r;let o=this.aX+this.xRadius*Math.cos(s);let l=this.aY+this.yRadius*Math.sin(s);if(this.aRotation!==0){const t=Math.cos(this.aRotation);const e=Math.sin(this.aRotation);const n=o-this.aX;const i=l-this.aY;o=n*t-i*e+this.aX;l=n*e+i*t+this.aY}return n.set(o,l)}copy(t){super.copy(t);this.aX=t.aX;this.aY=t.aY;this.xRadius=t.xRadius;this.yRadius=t.yRadius;this.aStartAngle=t.aStartAngle;this.aEndAngle=t.aEndAngle;this.aClockwise=t.aClockwise;this.aRotation=t.aRotation;return this}toJSON(){const t=super.toJSON();t.aX=this.aX;t.aY=this.aY;t.xRadius=this.xRadius;t.yRadius=this.yRadius;t.aStartAngle=this.aStartAngle;t.aEndAngle=this.aEndAngle;t.aClockwise=this.aClockwise;t.aRotation=this.aRotation;return t}fromJSON(t){super.fromJSON(t);this.aX=t.aX;this.aY=t.aY;this.xRadius=t.xRadius;this.yRadius=t.yRadius;this.aStartAngle=t.aStartAngle;this.aEndAngle=t.aEndAngle;this.aClockwise=t.aClockwise;this.aRotation=t.aRotation;return this}}EllipseCurve.prototype.isEllipseCurve=true;class ArcCurve extends EllipseCurve{constructor(t,e,n,i,r,a){super(t,e,n,n,i,r,a);this.type="ArcCurve"}}ArcCurve.prototype.isArcCurve=true;function CubicPoly(){let t=0,e=0,n=0,i=0;function r(r,a,s,o){t=r;e=s;n=-3*r+3*a-2*s-o;i=2*r-2*a+s+o}return{initCatmullRom:function(t,e,n,i,a){r(e,n,a*(n-t),a*(i-e))},initNonuniformCatmullRom:function(t,e,n,i,a,s,o){let l=(e-t)/a-(n-t)/(a+s)+(n-e)/s;let c=(n-e)/s-(i-e)/(s+o)+(i-n)/o;l*=s;c*=s;r(e,n,l,c)},calc:function(r){const a=r*r;const s=a*r;return t+e*r+n*a+i*s}}}const tmp=new Vector3$1;const px=new CubicPoly,py=new CubicPoly,pz=new CubicPoly;class CatmullRomCurve3 extends Curve{constructor(t=[],e=false,n="centripetal",i=.5){super();this.type="CatmullRomCurve3";this.points=t;this.closed=e;this.curveType=n;this.tension=i}getPoint(t,e=new Vector3$1){const n=e;const i=this.points;const r=i.length;const a=(r-(this.closed?0:1))*t;let s=Math.floor(a);let o=a-s;if(this.closed){s+=s>0?0:(Math.floor(Math.abs(s)/r)+1)*r}else if(o===0&&s===r-1){s=r-2;o=1}let l,c;if(this.closed||s>0){l=i[(s-1)%r]}else{tmp.subVectors(i[0],i[1]).add(i[0]);l=tmp}const u=i[s%r];const h=i[(s+1)%r];if(this.closed||s+2<r){c=i[(s+2)%r]}else{tmp.subVectors(i[r-1],i[r-2]).add(i[r-1]);c=tmp}if(this.curveType==="centripetal"||this.curveType==="chordal"){const t=this.curveType==="chordal"?.5:.25;let e=Math.pow(l.distanceToSquared(u),t);let n=Math.pow(u.distanceToSquared(h),t);let i=Math.pow(h.distanceToSquared(c),t);if(n<1e-4)n=1;if(e<1e-4)e=n;if(i<1e-4)i=n;px.initNonuniformCatmullRom(l.x,u.x,h.x,c.x,e,n,i);py.initNonuniformCatmullRom(l.y,u.y,h.y,c.y,e,n,i);pz.initNonuniformCatmullRom(l.z,u.z,h.z,c.z,e,n,i)}else if(this.curveType==="catmullrom"){px.initCatmullRom(l.x,u.x,h.x,c.x,this.tension);py.initCatmullRom(l.y,u.y,h.y,c.y,this.tension);pz.initCatmullRom(l.z,u.z,h.z,c.z,this.tension)}n.set(px.calc(o),py.calc(o),pz.calc(o));return n}copy(t){super.copy(t);this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push(n.clone())}this.closed=t.closed;this.curveType=t.curveType;this.tension=t.tension;return this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,n=this.points.length;e<n;e++){const n=this.points[e];t.points.push(n.toArray())}t.closed=this.closed;t.curveType=this.curveType;t.tension=this.tension;return t}fromJSON(t){super.fromJSON(t);this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push((new Vector3$1).fromArray(n))}this.closed=t.closed;this.curveType=t.curveType;this.tension=t.tension;return this}}CatmullRomCurve3.prototype.isCatmullRomCurve3=true;function CatmullRom(t,e,n,i,r){const a=(i-e)*.5;const s=(r-n)*.5;const o=t*t;const l=t*o;return(2*n-2*i+a+s)*l+(-3*n+3*i-2*a-s)*o+a*t+n}function QuadraticBezierP0(t,e){const n=1-t;return n*n*e}function QuadraticBezierP1(t,e){return 2*(1-t)*t*e}function QuadraticBezierP2(t,e){return t*t*e}function QuadraticBezier(t,e,n,i){return QuadraticBezierP0(t,e)+QuadraticBezierP1(t,n)+QuadraticBezierP2(t,i)}function CubicBezierP0(t,e){const n=1-t;return n*n*n*e}function CubicBezierP1(t,e){const n=1-t;return 3*n*n*t*e}function CubicBezierP2(t,e){return 3*(1-t)*t*t*e}function CubicBezierP3(t,e){return t*t*t*e}function CubicBezier(t,e,n,i,r){return CubicBezierP0(t,e)+CubicBezierP1(t,n)+CubicBezierP2(t,i)+CubicBezierP3(t,r)}class CubicBezierCurve extends Curve{constructor(t=new Vector2,e=new Vector2,n=new Vector2,i=new Vector2){super();this.type="CubicBezierCurve";this.v0=t;this.v1=e;this.v2=n;this.v3=i}getPoint(t,e=new Vector2){const n=e;const i=this.v0,r=this.v1,a=this.v2,s=this.v3;n.set(CubicBezier(t,i.x,r.x,a.x,s.x),CubicBezier(t,i.y,r.y,a.y,s.y));return n}copy(t){super.copy(t);this.v0.copy(t.v0);this.v1.copy(t.v1);this.v2.copy(t.v2);this.v3.copy(t.v3);return this}toJSON(){const t=super.toJSON();t.v0=this.v0.toArray();t.v1=this.v1.toArray();t.v2=this.v2.toArray();t.v3=this.v3.toArray();return t}fromJSON(t){super.fromJSON(t);this.v0.fromArray(t.v0);this.v1.fromArray(t.v1);this.v2.fromArray(t.v2);this.v3.fromArray(t.v3);return this}}CubicBezierCurve.prototype.isCubicBezierCurve=true;class CubicBezierCurve3 extends Curve{constructor(t=new Vector3$1,e=new Vector3$1,n=new Vector3$1,i=new Vector3$1){super();this.type="CubicBezierCurve3";this.v0=t;this.v1=e;this.v2=n;this.v3=i}getPoint(t,e=new Vector3$1){const n=e;const i=this.v0,r=this.v1,a=this.v2,s=this.v3;n.set(CubicBezier(t,i.x,r.x,a.x,s.x),CubicBezier(t,i.y,r.y,a.y,s.y),CubicBezier(t,i.z,r.z,a.z,s.z));return n}copy(t){super.copy(t);this.v0.copy(t.v0);this.v1.copy(t.v1);this.v2.copy(t.v2);this.v3.copy(t.v3);return this}toJSON(){const t=super.toJSON();t.v0=this.v0.toArray();t.v1=this.v1.toArray();t.v2=this.v2.toArray();t.v3=this.v3.toArray();return t}fromJSON(t){super.fromJSON(t);this.v0.fromArray(t.v0);this.v1.fromArray(t.v1);this.v2.fromArray(t.v2);this.v3.fromArray(t.v3);return this}}CubicBezierCurve3.prototype.isCubicBezierCurve3=true;class LineCurve extends Curve{constructor(t=new Vector2,e=new Vector2){super();this.type="LineCurve";this.v1=t;this.v2=e}getPoint(t,e=new Vector2){const n=e;if(t===1){n.copy(this.v2)}else{n.copy(this.v2).sub(this.v1);n.multiplyScalar(t).add(this.v1)}return n}getPointAt(t,e){return this.getPoint(t,e)}getTangent(t,e){const n=e||new Vector2;n.copy(this.v2).sub(this.v1).normalize();return n}copy(t){super.copy(t);this.v1.copy(t.v1);this.v2.copy(t.v2);return this}toJSON(){const t=super.toJSON();t.v1=this.v1.toArray();t.v2=this.v2.toArray();return t}fromJSON(t){super.fromJSON(t);this.v1.fromArray(t.v1);this.v2.fromArray(t.v2);return this}}LineCurve.prototype.isLineCurve=true;class LineCurve3 extends Curve{constructor(t=new Vector3$1,e=new Vector3$1){super();this.type="LineCurve3";this.isLineCurve3=true;this.v1=t;this.v2=e}getPoint(t,e=new Vector3$1){const n=e;if(t===1){n.copy(this.v2)}else{n.copy(this.v2).sub(this.v1);n.multiplyScalar(t).add(this.v1)}return n}getPointAt(t,e){return this.getPoint(t,e)}copy(t){super.copy(t);this.v1.copy(t.v1);this.v2.copy(t.v2);return this}toJSON(){const t=super.toJSON();t.v1=this.v1.toArray();t.v2=this.v2.toArray();return t}fromJSON(t){super.fromJSON(t);this.v1.fromArray(t.v1);this.v2.fromArray(t.v2);return this}}class QuadraticBezierCurve extends Curve{constructor(t=new Vector2,e=new Vector2,n=new Vector2){super();this.type="QuadraticBezierCurve";this.v0=t;this.v1=e;this.v2=n}getPoint(t,e=new Vector2){const n=e;const i=this.v0,r=this.v1,a=this.v2;n.set(QuadraticBezier(t,i.x,r.x,a.x),QuadraticBezier(t,i.y,r.y,a.y));return n}copy(t){super.copy(t);this.v0.copy(t.v0);this.v1.copy(t.v1);this.v2.copy(t.v2);return this}toJSON(){const t=super.toJSON();t.v0=this.v0.toArray();t.v1=this.v1.toArray();t.v2=this.v2.toArray();return t}fromJSON(t){super.fromJSON(t);this.v0.fromArray(t.v0);this.v1.fromArray(t.v1);this.v2.fromArray(t.v2);return this}}QuadraticBezierCurve.prototype.isQuadraticBezierCurve=true;class QuadraticBezierCurve3 extends Curve{constructor(t=new Vector3$1,e=new Vector3$1,n=new Vector3$1){super();this.type="QuadraticBezierCurve3";this.v0=t;this.v1=e;this.v2=n}getPoint(t,e=new Vector3$1){const n=e;const i=this.v0,r=this.v1,a=this.v2;n.set(QuadraticBezier(t,i.x,r.x,a.x),QuadraticBezier(t,i.y,r.y,a.y),QuadraticBezier(t,i.z,r.z,a.z));return n}copy(t){super.copy(t);this.v0.copy(t.v0);this.v1.copy(t.v1);this.v2.copy(t.v2);return this}toJSON(){const t=super.toJSON();t.v0=this.v0.toArray();t.v1=this.v1.toArray();t.v2=this.v2.toArray();return t}fromJSON(t){super.fromJSON(t);this.v0.fromArray(t.v0);this.v1.fromArray(t.v1);this.v2.fromArray(t.v2);return this}}QuadraticBezierCurve3.prototype.isQuadraticBezierCurve3=true;class SplineCurve extends Curve{constructor(t=[]){super();this.type="SplineCurve";this.points=t}getPoint(t,e=new Vector2){const n=e;const i=this.points;const r=(i.length-1)*t;const a=Math.floor(r);const s=r-a;const o=i[a===0?a:a-1];const l=i[a];const c=i[a>i.length-2?i.length-1:a+1];const u=i[a>i.length-3?i.length-1:a+2];n.set(CatmullRom(s,o.x,l.x,c.x,u.x),CatmullRom(s,o.y,l.y,c.y,u.y));return n}copy(t){super.copy(t);this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push(n.clone())}return this}toJSON(){const t=super.toJSON();t.points=[];for(let e=0,n=this.points.length;e<n;e++){const n=this.points[e];t.points.push(n.toArray())}return t}fromJSON(t){super.fromJSON(t);this.points=[];for(let e=0,n=t.points.length;e<n;e++){const n=t.points[e];this.points.push((new Vector2).fromArray(n))}return this}}SplineCurve.prototype.isSplineCurve=true;var Curves=Object.freeze({__proto__:null,ArcCurve:ArcCurve,CatmullRomCurve3:CatmullRomCurve3,CubicBezierCurve:CubicBezierCurve,CubicBezierCurve3:CubicBezierCurve3,EllipseCurve:EllipseCurve,LineCurve:LineCurve,LineCurve3:LineCurve3,QuadraticBezierCurve:QuadraticBezierCurve,QuadraticBezierCurve3:QuadraticBezierCurve3,SplineCurve:SplineCurve});class CurvePath extends Curve{constructor(){super();this.type="CurvePath";this.curves=[];this.autoClose=false}add(t){this.curves.push(t)}closePath(){const t=this.curves[0].getPoint(0);const e=this.curves[this.curves.length-1].getPoint(1);if(!t.equals(e)){this.curves.push(new LineCurve(e,t))}}getPoint(t,e){const n=t*this.getLength();const i=this.getCurveLengths();let r=0;while(r<i.length){if(i[r]>=n){const t=i[r]-n;const a=this.curves[r];const s=a.getLength();const o=s===0?0:1-t/s;return a.getPointAt(o,e)}r++}return null}getLength(){const t=this.getCurveLengths();return t[t.length-1]}updateArcLengths(){this.needsUpdate=true;this.cacheLengths=null;this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length){return this.cacheLengths}const t=[];let e=0;for(let n=0,i=this.curves.length;n<i;n++){e+=this.curves[n].getLength();t.push(e)}this.cacheLengths=t;return t}getSpacedPoints(t=40){const e=[];for(let n=0;n<=t;n++){e.push(this.getPoint(n/t))}if(this.autoClose){e.push(e[0])}return e}getPoints(t=12){const e=[];let n;for(let i=0,r=this.curves;i<r.length;i++){const a=r[i];const s=a.isEllipseCurve?t*2:a.isLineCurve||a.isLineCurve3?1:a.isSplineCurve?t*a.points.length:t;const o=a.getPoints(s);for(let t=0;t<o.length;t++){const i=o[t];if(n&&n.equals(i))continue;e.push(i);n=i}}if(this.autoClose&&e.length>1&&!e[e.length-1].equals(e[0])){e.push(e[0])}return e}copy(t){super.copy(t);this.curves=[];for(let e=0,n=t.curves.length;e<n;e++){const n=t.curves[e];this.curves.push(n.clone())}this.autoClose=t.autoClose;return this}toJSON(){const t=super.toJSON();t.autoClose=this.autoClose;t.curves=[];for(let e=0,n=this.curves.length;e<n;e++){const n=this.curves[e];t.curves.push(n.toJSON())}return t}fromJSON(t){super.fromJSON(t);this.autoClose=t.autoClose;this.curves=[];for(let e=0,n=t.curves.length;e<n;e++){const n=t.curves[e];this.curves.push((new Curves[n.type]).fromJSON(n))}return this}}class Path extends CurvePath{constructor(t){super();this.type="Path";this.currentPoint=new Vector2;if(t){this.setFromPoints(t)}}setFromPoints(t){this.moveTo(t[0].x,t[0].y);for(let e=1,n=t.length;e<n;e++){this.lineTo(t[e].x,t[e].y)}return this}moveTo(t,e){this.currentPoint.set(t,e);return this}lineTo(t,e){const n=new LineCurve(this.currentPoint.clone(),new Vector2(t,e));this.curves.push(n);this.currentPoint.set(t,e);return this}quadraticCurveTo(t,e,n,i){const r=new QuadraticBezierCurve(this.currentPoint.clone(),new Vector2(t,e),new Vector2(n,i));this.curves.push(r);this.currentPoint.set(n,i);return this}bezierCurveTo(t,e,n,i,r,a){const s=new CubicBezierCurve(this.currentPoint.clone(),new Vector2(t,e),new Vector2(n,i),new Vector2(r,a));this.curves.push(s);this.currentPoint.set(r,a);return this}splineThru(t){const e=[this.currentPoint.clone()].concat(t);const n=new SplineCurve(e);this.curves.push(n);this.currentPoint.copy(t[t.length-1]);return this}arc(t,e,n,i,r,a){const s=this.currentPoint.x;const o=this.currentPoint.y;this.absarc(t+s,e+o,n,i,r,a);return this}absarc(t,e,n,i,r,a){this.absellipse(t,e,n,n,i,r,a);return this}ellipse(t,e,n,i,r,a,s,o){const l=this.currentPoint.x;const c=this.currentPoint.y;this.absellipse(t+l,e+c,n,i,r,a,s,o);return this}absellipse(t,e,n,i,r,a,s,o){const l=new EllipseCurve(t,e,n,i,r,a,s,o);if(this.curves.length>0){const t=l.getPoint(0);if(!t.equals(this.currentPoint)){this.lineTo(t.x,t.y)}}this.curves.push(l);const c=l.getPoint(1);this.currentPoint.copy(c);return this}copy(t){super.copy(t);this.currentPoint.copy(t.currentPoint);return this}toJSON(){const t=super.toJSON();t.currentPoint=this.currentPoint.toArray();return t}fromJSON(t){super.fromJSON(t);this.currentPoint.fromArray(t.currentPoint);return this}}class Shape extends Path{constructor(t){super(t);this.uuid=generateUUID();this.type="Shape";this.holes=[]}getPointsHoles(t){const e=[];for(let n=0,i=this.holes.length;n<i;n++){e[n]=this.holes[n].getPoints(t)}return e}extractPoints(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}}copy(t){super.copy(t);this.holes=[];for(let e=0,n=t.holes.length;e<n;e++){const n=t.holes[e];this.holes.push(n.clone())}return this}toJSON(){const t=super.toJSON();t.uuid=this.uuid;t.holes=[];for(let e=0,n=this.holes.length;e<n;e++){const n=this.holes[e];t.holes.push(n.toJSON())}return t}fromJSON(t){super.fromJSON(t);this.uuid=t.uuid;this.holes=[];for(let e=0,n=t.holes.length;e<n;e++){const n=t.holes[e];this.holes.push((new Path).fromJSON(n))}return this}}const Earcut={triangulate:function(t,e,n=2){const i=e&&e.length;const r=i?e[0]*n:t.length;let a=linkedList(t,0,r,n,true);const s=[];if(!a||a.next===a.prev)return s;let o,l,c,u,h,d,f;if(i)a=eliminateHoles(t,e,a,n);if(t.length>80*n){o=c=t[0];l=u=t[1];for(let e=n;e<r;e+=n){h=t[e];d=t[e+1];if(h<o)o=h;if(d<l)l=d;if(h>c)c=h;if(d>u)u=d}f=Math.max(c-o,u-l);f=f!==0?1/f:0}earcutLinked(a,s,n,o,l,f);return s}};function linkedList(t,e,n,i,r){let a,s;if(r===signedArea(t,e,n,i)>0){for(a=e;a<n;a+=i)s=insertNode(a,t[a],t[a+1],s)}else{for(a=n-i;a>=e;a-=i)s=insertNode(a,t[a],t[a+1],s)}if(s&&equals(s,s.next)){removeNode(s);s=s.next}return s}function filterPoints(t,e){if(!t)return t;if(!e)e=t;let n=t,i;do{i=false;if(!n.steiner&&(equals(n,n.next)||area(n.prev,n,n.next)===0)){removeNode(n);n=e=n.prev;if(n===n.next)break;i=true}else{n=n.next}}while(i||n!==e);return e}function earcutLinked(t,e,n,i,r,a,s){if(!t)return;if(!s&&a)indexCurve(t,i,r,a);let o=t,l,c;while(t.prev!==t.next){l=t.prev;c=t.next;if(a?isEarHashed(t,i,r,a):isEar(t)){e.push(l.i/n);e.push(t.i/n);e.push(c.i/n);removeNode(t);t=c.next;o=c.next;continue}t=c;if(t===o){if(!s){earcutLinked(filterPoints(t),e,n,i,r,a,1)}else if(s===1){t=cureLocalIntersections(filterPoints(t),e,n);earcutLinked(t,e,n,i,r,a,2)}else if(s===2){splitEarcut(t,e,n,i,r,a)}break}}}function isEar(t){const e=t.prev,n=t,i=t.next;if(area(e,n,i)>=0)return false;let r=t.next.next;while(r!==t.prev){if(pointInTriangle(e.x,e.y,n.x,n.y,i.x,i.y,r.x,r.y)&&area(r.prev,r,r.next)>=0)return false;r=r.next}return true}function isEarHashed(t,e,n,i){const r=t.prev,a=t,s=t.next;if(area(r,a,s)>=0)return false;const o=r.x<a.x?r.x<s.x?r.x:s.x:a.x<s.x?a.x:s.x,l=r.y<a.y?r.y<s.y?r.y:s.y:a.y<s.y?a.y:s.y,c=r.x>a.x?r.x>s.x?r.x:s.x:a.x>s.x?a.x:s.x,u=r.y>a.y?r.y>s.y?r.y:s.y:a.y>s.y?a.y:s.y;const h=zOrder(o,l,e,n,i),d=zOrder(c,u,e,n,i);let f=t.prevZ,p=t.nextZ;while(f&&f.z>=h&&p&&p.z<=d){if(f!==t.prev&&f!==t.next&&pointInTriangle(r.x,r.y,a.x,a.y,s.x,s.y,f.x,f.y)&&area(f.prev,f,f.next)>=0)return false;f=f.prevZ;if(p!==t.prev&&p!==t.next&&pointInTriangle(r.x,r.y,a.x,a.y,s.x,s.y,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.nextZ}while(f&&f.z>=h){if(f!==t.prev&&f!==t.next&&pointInTriangle(r.x,r.y,a.x,a.y,s.x,s.y,f.x,f.y)&&area(f.prev,f,f.next)>=0)return false;f=f.prevZ}while(p&&p.z<=d){if(p!==t.prev&&p!==t.next&&pointInTriangle(r.x,r.y,a.x,a.y,s.x,s.y,p.x,p.y)&&area(p.prev,p,p.next)>=0)return false;p=p.nextZ}return true}function cureLocalIntersections(t,e,n){let i=t;do{const r=i.prev,a=i.next.next;if(!equals(r,a)&&intersects(r,i,i.next,a)&&locallyInside(r,a)&&locallyInside(a,r)){e.push(r.i/n);e.push(i.i/n);e.push(a.i/n);removeNode(i);removeNode(i.next);i=t=a}i=i.next}while(i!==t);return filterPoints(i)}function splitEarcut(t,e,n,i,r,a){let s=t;do{let t=s.next.next;while(t!==s.prev){if(s.i!==t.i&&isValidDiagonal(s,t)){let o=splitPolygon(s,t);s=filterPoints(s,s.next);o=filterPoints(o,o.next);earcutLinked(s,e,n,i,r,a);earcutLinked(o,e,n,i,r,a);return}t=t.next}s=s.next}while(s!==t)}function eliminateHoles(t,e,n,i){const r=[];let a,s,o,l,c;for(a=0,s=e.length;a<s;a++){o=e[a]*i;l=a<s-1?e[a+1]*i:t.length;c=linkedList(t,o,l,i,false);if(c===c.next)c.steiner=true;r.push(getLeftmost(c))}r.sort(compareX);for(a=0;a<r.length;a++){eliminateHole(r[a],n);n=filterPoints(n,n.next)}return n}function compareX(t,e){return t.x-e.x}function eliminateHole(t,e){e=findHoleBridge(t,e);if(e){const n=splitPolygon(e,t);filterPoints(e,e.next);filterPoints(n,n.next)}}function findHoleBridge(t,e){let n=e;const i=t.x;const r=t.y;let a=-Infinity,s;do{if(r<=n.y&&r>=n.next.y&&n.next.y!==n.y){const t=n.x+(r-n.y)*(n.next.x-n.x)/(n.next.y-n.y);if(t<=i&&t>a){a=t;if(t===i){if(r===n.y)return n;if(r===n.next.y)return n.next}s=n.x<n.next.x?n:n.next}}n=n.next}while(n!==e);if(!s)return null;if(i===a)return s;const o=s,l=s.x,c=s.y;let u=Infinity,h;n=s;do{if(i>=n.x&&n.x>=l&&i!==n.x&&pointInTriangle(r<c?i:a,r,l,c,r<c?a:i,r,n.x,n.y)){h=Math.abs(r-n.y)/(i-n.x);if(locallyInside(n,t)&&(h<u||h===u&&(n.x>s.x||n.x===s.x&&sectorContainsSector(s,n)))){s=n;u=h}}n=n.next}while(n!==o);return s}function sectorContainsSector(t,e){return area(t.prev,t,e.prev)<0&&area(e.next,t,t.next)<0}function indexCurve(t,e,n,i){let r=t;do{if(r.z===null)r.z=zOrder(r.x,r.y,e,n,i);r.prevZ=r.prev;r.nextZ=r.next;r=r.next}while(r!==t);r.prevZ.nextZ=null;r.prevZ=null;sortLinked(r)}function sortLinked(t){let e,n,i,r,a,s,o,l,c=1;do{n=t;t=null;a=null;s=0;while(n){s++;i=n;o=0;for(e=0;e<c;e++){o++;i=i.nextZ;if(!i)break}l=c;while(o>0||l>0&&i){if(o!==0&&(l===0||!i||n.z<=i.z)){r=n;n=n.nextZ;o--}else{r=i;i=i.nextZ;l--}if(a)a.nextZ=r;else t=r;r.prevZ=a;a=r}n=i}a.nextZ=null;c*=2}while(s>1);return t}function zOrder(t,e,n,i,r){t=32767*(t-n)*r;e=32767*(e-i)*r;t=(t|t<<8)&16711935;t=(t|t<<4)&252645135;t=(t|t<<2)&858993459;t=(t|t<<1)&1431655765;e=(e|e<<8)&16711935;e=(e|e<<4)&252645135;e=(e|e<<2)&858993459;e=(e|e<<1)&1431655765;return t|e<<1}function getLeftmost(t){let e=t,n=t;do{if(e.x<n.x||e.x===n.x&&e.y<n.y)n=e;e=e.next}while(e!==t);return n}function pointInTriangle(t,e,n,i,r,a,s,o){return(r-s)*(e-o)-(t-s)*(a-o)>=0&&(t-s)*(i-o)-(n-s)*(e-o)>=0&&(n-s)*(a-o)-(r-s)*(i-o)>=0}function isValidDiagonal(t,e){return t.next.i!==e.i&&t.prev.i!==e.i&&!intersectsPolygon(t,e)&&(locallyInside(t,e)&&locallyInside(e,t)&&middleInside(t,e)&&(area(t.prev,t,e.prev)||area(t,e.prev,e))||equals(t,e)&&area(t.prev,t,t.next)>0&&area(e.prev,e,e.next)>0)}function area(t,e,n){return(e.y-t.y)*(n.x-e.x)-(e.x-t.x)*(n.y-e.y)}function equals(t,e){return t.x===e.x&&t.y===e.y}function intersects(t,e,n,i){const r=sign(area(t,e,n));const a=sign(area(t,e,i));const s=sign(area(n,i,t));const o=sign(area(n,i,e));if(r!==a&&s!==o)return true;if(r===0&&onSegment(t,n,e))return true;if(a===0&&onSegment(t,i,e))return true;if(s===0&&onSegment(n,t,i))return true;if(o===0&&onSegment(n,e,i))return true;return false}function onSegment(t,e,n){return e.x<=Math.max(t.x,n.x)&&e.x>=Math.min(t.x,n.x)&&e.y<=Math.max(t.y,n.y)&&e.y>=Math.min(t.y,n.y)}function sign(t){return t>0?1:t<0?-1:0}function intersectsPolygon(t,e){let n=t;do{if(n.i!==t.i&&n.next.i!==t.i&&n.i!==e.i&&n.next.i!==e.i&&intersects(n,n.next,t,e))return true;n=n.next}while(n!==t);return false}function locallyInside(t,e){return area(t.prev,t,t.next)<0?area(t,e,t.next)>=0&&area(t,t.prev,e)>=0:area(t,e,t.prev)<0||area(t,t.next,e)<0}function middleInside(t,e){let n=t,i=false;const r=(t.x+e.x)/2,a=(t.y+e.y)/2;do{if(n.y>a!==n.next.y>a&&n.next.y!==n.y&&r<(n.next.x-n.x)*(a-n.y)/(n.next.y-n.y)+n.x)i=!i;n=n.next}while(n!==t);return i}function splitPolygon(t,e){const n=new Node(t.i,t.x,t.y),i=new Node(e.i,e.x,e.y),r=t.next,a=e.prev;t.next=e;e.prev=t;n.next=r;r.prev=n;i.next=n;n.prev=i;a.next=i;i.prev=a;return i}function insertNode(t,e,n,i){const r=new Node(t,e,n);if(!i){r.prev=r;r.next=r}else{r.next=i.next;r.prev=i;i.next.prev=r;i.next=r}return r}function removeNode(t){t.next.prev=t.prev;t.prev.next=t.next;if(t.prevZ)t.prevZ.nextZ=t.nextZ;if(t.nextZ)t.nextZ.prevZ=t.prevZ}function Node(t,e,n){this.i=t;this.x=e;this.y=n;this.prev=null;this.next=null;this.z=null;this.prevZ=null;this.nextZ=null;this.steiner=false}function signedArea(t,e,n,i){let r=0;for(let a=e,s=n-i;a<n;a+=i){r+=(t[s]-t[a])*(t[a+1]+t[s+1]);s=a}return r}class ShapeUtils{static area(t){const e=t.length;let n=0;for(let i=e-1,r=0;r<e;i=r++){n+=t[i].x*t[r].y-t[r].x*t[i].y}return n*.5}static isClockWise(t){return ShapeUtils.area(t)<0}static triangulateShape(t,e){const n=[];const i=[];const r=[];removeDupEndPts(t);addContour(n,t);let a=t.length;e.forEach(removeDupEndPts);for(let t=0;t<e.length;t++){i.push(a);a+=e[t].length;addContour(n,e[t])}const s=Earcut.triangulate(n,i);for(let t=0;t<s.length;t+=3){r.push(s.slice(t,t+3))}return r}}function removeDupEndPts(t){const e=t.length;if(e>2&&t[e-1].equals(t[0])){t.pop()}}function addContour(t,e){for(let n=0;n<e.length;n++){t.push(e[n].x);t.push(e[n].y)}}class ExtrudeGeometry extends BufferGeometry$1{constructor(t=new Shape([new Vector2(.5,.5),new Vector2(-.5,.5),new Vector2(-.5,-.5),new Vector2(.5,-.5)]),e={}){super();this.type="ExtrudeGeometry";this.parameters={shapes:t,options:e};t=Array.isArray(t)?t:[t];const n=this;const i=[];const r=[];for(let e=0,n=t.length;e<n;e++){const n=t[e];a(n)}this.setAttribute("position",new Float32BufferAttribute$1(i,3));this.setAttribute("uv",new Float32BufferAttribute$1(r,2));this.computeVertexNormals();function a(t){const a=[];const s=e.curveSegments!==undefined?e.curveSegments:12;const o=e.steps!==undefined?e.steps:1;let l=e.depth!==undefined?e.depth:1;let c=e.bevelEnabled!==undefined?e.bevelEnabled:true;let u=e.bevelThickness!==undefined?e.bevelThickness:.2;let h=e.bevelSize!==undefined?e.bevelSize:u-.1;let d=e.bevelOffset!==undefined?e.bevelOffset:0;let f=e.bevelSegments!==undefined?e.bevelSegments:3;const p=e.extrudePath;const m=e.UVGenerator!==undefined?e.UVGenerator:WorldUVGenerator;if(e.amount!==undefined){console.warn("THREE.ExtrudeBufferGeometry: amount has been renamed to depth.");l=e.amount}let g,_=false;let y,x,v,b;if(p){g=p.getSpacedPoints(o);_=true;c=false;y=p.computeFrenetFrames(o,false);x=new Vector3$1;v=new Vector3$1;b=new Vector3$1}if(!c){f=0;u=0;h=0;d=0}const M=t.extractPoints(s);let w=M.shape;const S=M.holes;const A=!ShapeUtils.isClockWise(w);if(A){w=w.reverse();for(let t=0,e=S.length;t<e;t++){const e=S[t];if(ShapeUtils.isClockWise(e)){S[t]=e.reverse()}}}const T=ShapeUtils.triangulateShape(w,S);const E=w;for(let t=0,e=S.length;t<e;t++){const e=S[t];w=w.concat(e)}function L(t,e,n){if(!e)console.error("THREE.ExtrudeGeometry: vec does not exist");return e.clone().multiplyScalar(n).add(t)}const C=w.length,P=T.length;function R(t,e,n){let i,r,a;const s=t.x-e.x,o=t.y-e.y;const l=n.x-t.x,c=n.y-t.y;const u=s*s+o*o;const h=s*c-o*l;if(Math.abs(h)>Number.EPSILON){const h=Math.sqrt(u);const d=Math.sqrt(l*l+c*c);const f=e.x-o/h;const p=e.y+s/h;const m=n.x-c/d;const g=n.y+l/d;const _=((m-f)*c-(g-p)*l)/(s*c-o*l);i=f+s*_-t.x;r=p+o*_-t.y;const y=i*i+r*r;if(y<=2){return new Vector2(i,r)}else{a=Math.sqrt(y/2)}}else{let t=false;if(s>Number.EPSILON){if(l>Number.EPSILON){t=true}}else{if(s<-Number.EPSILON){if(l<-Number.EPSILON){t=true}}else{if(Math.sign(o)===Math.sign(c)){t=true}}}if(t){i=-o;r=s;a=Math.sqrt(u)}else{i=s;r=o;a=Math.sqrt(u/2)}}return new Vector2(i/a,r/a)}const F=[];for(let t=0,e=E.length,n=e-1,i=t+1;t<e;t++,n++,i++){if(n===e)n=0;if(i===e)i=0;F[t]=R(E[t],E[n],E[i])}const I=[];let B,D=F.concat();for(let t=0,e=S.length;t<e;t++){const e=S[t];B=[];for(let t=0,n=e.length,i=n-1,r=t+1;t<n;t++,i++,r++){if(i===n)i=0;if(r===n)r=0;B[t]=R(e[t],e[i],e[r])}I.push(B);D=D.concat(B)}for(let t=0;t<f;t++){const e=t/f;const n=u*Math.cos(e*Math.PI/2);const i=h*Math.sin(e*Math.PI/2)+d;for(let t=0,e=E.length;t<e;t++){const e=L(E[t],F[t],i);O(e.x,e.y,-n)}for(let t=0,e=S.length;t<e;t++){const e=S[t];B=I[t];for(let t=0,r=e.length;t<r;t++){const r=L(e[t],B[t],i);O(r.x,r.y,-n)}}}const N=h+d;for(let t=0;t<C;t++){const e=c?L(w[t],D[t],N):w[t];if(!_){O(e.x,e.y,0)}else{v.copy(y.normals[0]).multiplyScalar(e.x);x.copy(y.binormals[0]).multiplyScalar(e.y);b.copy(g[0]).add(v).add(x);O(b.x,b.y,b.z)}}for(let t=1;t<=o;t++){for(let e=0;e<C;e++){const n=c?L(w[e],D[e],N):w[e];if(!_){O(n.x,n.y,l/o*t)}else{v.copy(y.normals[t]).multiplyScalar(n.x);x.copy(y.binormals[t]).multiplyScalar(n.y);b.copy(g[t]).add(v).add(x);O(b.x,b.y,b.z)}}}for(let t=f-1;t>=0;t--){const e=t/f;const n=u*Math.cos(e*Math.PI/2);const i=h*Math.sin(e*Math.PI/2)+d;for(let t=0,e=E.length;t<e;t++){const e=L(E[t],F[t],i);O(e.x,e.y,l+n)}for(let t=0,e=S.length;t<e;t++){const e=S[t];B=I[t];for(let t=0,r=e.length;t<r;t++){const r=L(e[t],B[t],i);if(!_){O(r.x,r.y,l+n)}else{O(r.x,r.y+g[o-1].y,g[o-1].x+n)}}}}U();V();function U(){const t=i.length/3;if(c){let t=0;let e=C*t;for(let t=0;t<P;t++){const n=T[t];z(n[2]+e,n[1]+e,n[0]+e)}t=o+f*2;e=C*t;for(let t=0;t<P;t++){const n=T[t];z(n[0]+e,n[1]+e,n[2]+e)}}else{for(let t=0;t<P;t++){const e=T[t];z(e[2],e[1],e[0])}for(let t=0;t<P;t++){const e=T[t];z(e[0]+C*o,e[1]+C*o,e[2]+C*o)}}n.addGroup(t,i.length/3-t,0)}function V(){const t=i.length/3;let e=0;G(E,e);e+=E.length;for(let t=0,n=S.length;t<n;t++){const n=S[t];G(n,e);e+=n.length}n.addGroup(t,i.length/3-t,1)}function G(t,e){let n=t.length;while(--n>=0){const i=n;let r=n-1;if(r<0)r=t.length-1;for(let t=0,n=o+f*2;t<n;t++){const n=C*t;const a=C*(t+1);const s=e+i+n,o=e+r+n,l=e+r+a,c=e+i+a;$(s,o,l,c)}}}function O(t,e,n){a.push(t);a.push(e);a.push(n)}function z(t,e,r){H(t);H(e);H(r);const a=i.length/3;const s=m.generateTopUV(n,i,a-3,a-2,a-1);k(s[0]);k(s[1]);k(s[2])}function $(t,e,r,a){H(t);H(e);H(a);H(e);H(r);H(a);const s=i.length/3;const o=m.generateSideWallUV(n,i,s-6,s-3,s-2,s-1);k(o[0]);k(o[1]);k(o[3]);k(o[1]);k(o[2]);k(o[3])}function H(t){i.push(a[t*3+0]);i.push(a[t*3+1]);i.push(a[t*3+2])}function k(t){r.push(t.x);r.push(t.y)}}}toJSON(){const t=super.toJSON();const e=this.parameters.shapes;const n=this.parameters.options;return toJSON$1(e,n,t)}static fromJSON(t,e){const n=[];for(let i=0,r=t.shapes.length;i<r;i++){const r=e[t.shapes[i]];n.push(r)}const i=t.options.extrudePath;if(i!==undefined){t.options.extrudePath=(new Curves[i.type]).fromJSON(i)}return new ExtrudeGeometry(n,t.options)}}const WorldUVGenerator={generateTopUV:function(t,e,n,i,r){const a=e[n*3];const s=e[n*3+1];const o=e[i*3];const l=e[i*3+1];const c=e[r*3];const u=e[r*3+1];return[new Vector2(a,s),new Vector2(o,l),new Vector2(c,u)]},generateSideWallUV:function(t,e,n,i,r,a){const s=e[n*3];const o=e[n*3+1];const l=e[n*3+2];const c=e[i*3];const u=e[i*3+1];const h=e[i*3+2];const d=e[r*3];const f=e[r*3+1];const p=e[r*3+2];const m=e[a*3];const g=e[a*3+1];const _=e[a*3+2];if(Math.abs(o-u)<Math.abs(s-c)){return[new Vector2(s,1-l),new Vector2(c,1-h),new Vector2(d,1-p),new Vector2(m,1-_)]}else{return[new Vector2(o,1-l),new Vector2(u,1-h),new Vector2(f,1-p),new Vector2(g,1-_)]}}};function toJSON$1(t,e,n){n.shapes=[];if(Array.isArray(t)){for(let e=0,i=t.length;e<i;e++){const i=t[e];n.shapes.push(i.uuid)}}else{n.shapes.push(t.uuid)}if(e.extrudePath!==undefined)n.options.extrudePath=e.extrudePath.toJSON();return n}class IcosahedronGeometry extends PolyhedronGeometry{constructor(t=1,e=0){const n=(1+Math.sqrt(5))/2;const i=[-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1];const r=[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1];super(i,r,t,e);this.type="IcosahedronGeometry";this.parameters={radius:t,detail:e}}static fromJSON(t){return new IcosahedronGeometry(t.radius,t.detail)}}class LatheGeometry extends BufferGeometry$1{constructor(t=[new Vector2(0,.5),new Vector2(.5,0),new Vector2(0,-.5)],e=12,n=0,i=Math.PI*2){super();this.type="LatheGeometry";this.parameters={points:t,segments:e,phiStart:n,phiLength:i};e=Math.floor(e);i=clamp(i,0,Math.PI*2);const r=[];const a=[];const s=[];const o=[];const l=[];const c=1/e;const u=new Vector3$1;const h=new Vector2;const d=new Vector3$1;const f=new Vector3$1;const p=new Vector3$1;let m=0;let g=0;for(let e=0;e<=t.length-1;e++){switch(e){case 0:m=t[e+1].x-t[e].x;g=t[e+1].y-t[e].y;d.x=g*1;d.y=-m;d.z=g*0;p.copy(d);d.normalize();o.push(d.x,d.y,d.z);break;case t.length-1:o.push(p.x,p.y,p.z);break;default:m=t[e+1].x-t[e].x;g=t[e+1].y-t[e].y;d.x=g*1;d.y=-m;d.z=g*0;f.copy(d);d.x+=p.x;d.y+=p.y;d.z+=p.z;d.normalize();o.push(d.x,d.y,d.z);p.copy(f)}}for(let r=0;r<=e;r++){const d=n+r*c*i;const f=Math.sin(d);const p=Math.cos(d);for(let n=0;n<=t.length-1;n++){u.x=t[n].x*f;u.y=t[n].y;u.z=t[n].x*p;a.push(u.x,u.y,u.z);h.x=r/e;h.y=n/(t.length-1);s.push(h.x,h.y);const i=o[3*n+0]*f;const c=o[3*n+1];const d=o[3*n+0]*p;l.push(i,c,d)}}for(let n=0;n<e;n++){for(let e=0;e<t.length-1;e++){const i=e+n*t.length;const a=i;const s=i+t.length;const o=i+t.length+1;const l=i+1;r.push(a,s,l);r.push(o,l,s)}}this.setIndex(r);this.setAttribute("position",new Float32BufferAttribute$1(a,3));this.setAttribute("uv",new Float32BufferAttribute$1(s,2));this.setAttribute("normal",new Float32BufferAttribute$1(l,3))}static fromJSON(t){return new LatheGeometry(t.points,t.segments,t.phiStart,t.phiLength)}}class OctahedronGeometry$1 extends PolyhedronGeometry{constructor(t=1,e=0){const n=[1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1];const i=[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2];super(n,i,t,e);this.type="OctahedronGeometry";this.parameters={radius:t,detail:e}}static fromJSON(t){return new OctahedronGeometry$1(t.radius,t.detail)}}class RingGeometry extends BufferGeometry$1{constructor(t=.5,e=1,n=8,i=1,r=0,a=Math.PI*2){super();this.type="RingGeometry";this.parameters={innerRadius:t,outerRadius:e,thetaSegments:n,phiSegments:i,thetaStart:r,thetaLength:a};n=Math.max(3,n);i=Math.max(1,i);const s=[];const o=[];const l=[];const c=[];let u=t;const h=(e-t)/i;const d=new Vector3$1;const f=new Vector2;for(let t=0;t<=i;t++){for(let t=0;t<=n;t++){const i=r+t/n*a;d.x=u*Math.cos(i);d.y=u*Math.sin(i);o.push(d.x,d.y,d.z);l.push(0,0,1);f.x=(d.x/e+1)/2;f.y=(d.y/e+1)/2;c.push(f.x,f.y)}u+=h}for(let t=0;t<i;t++){const e=t*(n+1);for(let t=0;t<n;t++){const i=t+e;const r=i;const a=i+n+1;const o=i+n+2;const l=i+1;s.push(r,a,l);s.push(a,o,l)}}this.setIndex(s);this.setAttribute("position",new Float32BufferAttribute$1(o,3));this.setAttribute("normal",new Float32BufferAttribute$1(l,3));this.setAttribute("uv",new Float32BufferAttribute$1(c,2))}static fromJSON(t){return new RingGeometry(t.innerRadius,t.outerRadius,t.thetaSegments,t.phiSegments,t.thetaStart,t.thetaLength)}}class ShapeGeometry extends BufferGeometry$1{constructor(t=new Shape([new Vector2(0,.5),new Vector2(-.5,-.5),new Vector2(.5,-.5)]),e=12){super();this.type="ShapeGeometry";this.parameters={shapes:t,curveSegments:e};const n=[];const i=[];const r=[];const a=[];let s=0;let o=0;if(Array.isArray(t)===false){l(t)}else{for(let e=0;e<t.length;e++){l(t[e]);this.addGroup(s,o,e);s+=o;o=0}}this.setIndex(n);this.setAttribute("position",new Float32BufferAttribute$1(i,3));this.setAttribute("normal",new Float32BufferAttribute$1(r,3));this.setAttribute("uv",new Float32BufferAttribute$1(a,2));function l(t){const s=i.length/3;const l=t.extractPoints(e);let c=l.shape;const u=l.holes;if(ShapeUtils.isClockWise(c)===false){c=c.reverse()}for(let t=0,e=u.length;t<e;t++){const e=u[t];if(ShapeUtils.isClockWise(e)===true){u[t]=e.reverse()}}const h=ShapeUtils.triangulateShape(c,u);for(let t=0,e=u.length;t<e;t++){const e=u[t];c=c.concat(e)}for(let t=0,e=c.length;t<e;t++){const e=c[t];i.push(e.x,e.y,0);r.push(0,0,1);a.push(e.x,e.y)}for(let t=0,e=h.length;t<e;t++){const e=h[t];const i=e[0]+s;const r=e[1]+s;const a=e[2]+s;n.push(i,r,a);o+=3}}}toJSON(){const t=super.toJSON();const e=this.parameters.shapes;return toJSON(e,t)}static fromJSON(t,e){const n=[];for(let i=0,r=t.shapes.length;i<r;i++){const r=e[t.shapes[i]];n.push(r)}return new ShapeGeometry(n,t.curveSegments)}}function toJSON(t,e){e.shapes=[];if(Array.isArray(t)){for(let n=0,i=t.length;n<i;n++){const i=t[n];e.shapes.push(i.uuid)}}else{e.shapes.push(t.uuid)}return e}class SphereGeometry$1 extends BufferGeometry$1{constructor(t=1,e=32,n=16,i=0,r=Math.PI*2,a=0,s=Math.PI){super();this.type="SphereGeometry";this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:i,phiLength:r,thetaStart:a,thetaLength:s};e=Math.max(3,Math.floor(e));n=Math.max(2,Math.floor(n));const o=Math.min(a+s,Math.PI);let l=0;const c=[];const u=new Vector3$1;const h=new Vector3$1;const d=[];const f=[];const p=[];const m=[];for(let d=0;d<=n;d++){const g=[];const _=d/n;let y=0;if(d==0&&a==0){y=.5/e}else if(d==n&&o==Math.PI){y=-.5/e}for(let n=0;n<=e;n++){const o=n/e;u.x=-t*Math.cos(i+o*r)*Math.sin(a+_*s);u.y=t*Math.cos(a+_*s);u.z=t*Math.sin(i+o*r)*Math.sin(a+_*s);f.push(u.x,u.y,u.z);h.copy(u).normalize();p.push(h.x,h.y,h.z);m.push(o+y,1-_);g.push(l++)}c.push(g)}for(let t=0;t<n;t++){for(let i=0;i<e;i++){const e=c[t][i+1];const r=c[t][i];const s=c[t+1][i];const l=c[t+1][i+1];if(t!==0||a>0)d.push(e,r,l);if(t!==n-1||o<Math.PI)d.push(r,s,l)}}this.setIndex(d);this.setAttribute("position",new Float32BufferAttribute$1(f,3));this.setAttribute("normal",new Float32BufferAttribute$1(p,3));this.setAttribute("uv",new Float32BufferAttribute$1(m,2))}static fromJSON(t){return new SphereGeometry$1(t.radius,t.widthSegments,t.heightSegments,t.phiStart,t.phiLength,t.thetaStart,t.thetaLength)}}class TetrahedronGeometry extends PolyhedronGeometry{constructor(t=1,e=0){const n=[1,1,1,-1,-1,1,-1,1,-1,1,-1,-1];const i=[2,1,0,0,3,2,1,3,0,2,3,1];super(n,i,t,e);this.type="TetrahedronGeometry";this.parameters={radius:t,detail:e}}static fromJSON(t){return new TetrahedronGeometry(t.radius,t.detail)}}class TorusGeometry$1 extends BufferGeometry$1{constructor(t=1,e=.4,n=8,i=6,r=Math.PI*2){super();this.type="TorusGeometry";this.parameters={radius:t,tube:e,radialSegments:n,tubularSegments:i,arc:r};n=Math.floor(n);i=Math.floor(i);const a=[];const s=[];const o=[];const l=[];const c=new Vector3$1;const u=new Vector3$1;const h=new Vector3$1;for(let a=0;a<=n;a++){for(let d=0;d<=i;d++){const f=d/i*r;const p=a/n*Math.PI*2;u.x=(t+e*Math.cos(p))*Math.cos(f);u.y=(t+e*Math.cos(p))*Math.sin(f);u.z=e*Math.sin(p);s.push(u.x,u.y,u.z);c.x=t*Math.cos(f);c.y=t*Math.sin(f);h.subVectors(u,c).normalize();o.push(h.x,h.y,h.z);l.push(d/i);l.push(a/n)}}for(let t=1;t<=n;t++){for(let e=1;e<=i;e++){const n=(i+1)*t+e-1;const r=(i+1)*(t-1)+e-1;const s=(i+1)*(t-1)+e;const o=(i+1)*t+e;a.push(n,r,o);a.push(r,s,o)}}this.setIndex(a);this.setAttribute("position",new Float32BufferAttribute$1(s,3));this.setAttribute("normal",new Float32BufferAttribute$1(o,3));this.setAttribute("uv",new Float32BufferAttribute$1(l,2))}static fromJSON(t){return new TorusGeometry$1(t.radius,t.tube,t.radialSegments,t.tubularSegments,t.arc)}}class TorusKnotGeometry extends BufferGeometry$1{constructor(t=1,e=.4,n=64,i=8,r=2,a=3){super();this.type="TorusKnotGeometry";this.parameters={radius:t,tube:e,tubularSegments:n,radialSegments:i,p:r,q:a};n=Math.floor(n);i=Math.floor(i);const s=[];const o=[];const l=[];const c=[];const u=new Vector3$1;const h=new Vector3$1;const d=new Vector3$1;const f=new Vector3$1;const p=new Vector3$1;const m=new Vector3$1;const g=new Vector3$1;for(let s=0;s<=n;++s){const y=s/n*r*Math.PI*2;_(y,r,a,t,d);_(y+.01,r,a,t,f);m.subVectors(f,d);g.addVectors(f,d);p.crossVectors(m,g);g.crossVectors(p,m);p.normalize();g.normalize();for(let t=0;t<=i;++t){const r=t/i*Math.PI*2;const a=-e*Math.cos(r);const f=e*Math.sin(r);u.x=d.x+(a*g.x+f*p.x);u.y=d.y+(a*g.y+f*p.y);u.z=d.z+(a*g.z+f*p.z);o.push(u.x,u.y,u.z);h.subVectors(u,d).normalize();l.push(h.x,h.y,h.z);c.push(s/n);c.push(t/i)}}for(let t=1;t<=n;t++){for(let e=1;e<=i;e++){const n=(i+1)*(t-1)+(e-1);const r=(i+1)*t+(e-1);const a=(i+1)*t+e;const o=(i+1)*(t-1)+e;s.push(n,r,o);s.push(r,a,o)}}this.setIndex(s);this.setAttribute("position",new Float32BufferAttribute$1(o,3));this.setAttribute("normal",new Float32BufferAttribute$1(l,3));this.setAttribute("uv",new Float32BufferAttribute$1(c,2));function _(t,e,n,i,r){const a=Math.cos(t);const s=Math.sin(t);const o=n/e*t;const l=Math.cos(o);r.x=i*(2+l)*.5*a;r.y=i*(2+l)*s*.5;r.z=i*Math.sin(o)*.5}}static fromJSON(t){return new TorusKnotGeometry(t.radius,t.tube,t.tubularSegments,t.radialSegments,t.p,t.q)}}class TubeGeometry extends BufferGeometry$1{constructor(t=new QuadraticBezierCurve3(new Vector3$1(-1,-1,0),new Vector3$1(-1,1,0),new Vector3$1(1,1,0)),e=64,n=1,i=8,r=false){super();this.type="TubeGeometry";this.parameters={path:t,tubularSegments:e,radius:n,radialSegments:i,closed:r};const a=t.computeFrenetFrames(e,r);this.tangents=a.tangents;this.normals=a.normals;this.binormals=a.binormals;const s=new Vector3$1;const o=new Vector3$1;const l=new Vector2;let c=new Vector3$1;const u=[];const h=[];const d=[];const f=[];p();this.setIndex(f);this.setAttribute("position",new Float32BufferAttribute$1(u,3));this.setAttribute("normal",new Float32BufferAttribute$1(h,3));this.setAttribute("uv",new Float32BufferAttribute$1(d,2));function p(){for(let t=0;t<e;t++){m(t)}m(r===false?e:0);_();g()}function m(r){c=t.getPointAt(r/e,c);const l=a.normals[r];const d=a.binormals[r];for(let t=0;t<=i;t++){const e=t/i*Math.PI*2;const r=Math.sin(e);const a=-Math.cos(e);o.x=a*l.x+r*d.x;o.y=a*l.y+r*d.y;o.z=a*l.z+r*d.z;o.normalize();h.push(o.x,o.y,o.z);s.x=c.x+n*o.x;s.y=c.y+n*o.y;s.z=c.z+n*o.z;u.push(s.x,s.y,s.z)}}function g(){for(let t=1;t<=e;t++){for(let e=1;e<=i;e++){const n=(i+1)*(t-1)+(e-1);const r=(i+1)*t+(e-1);const a=(i+1)*t+e;const s=(i+1)*(t-1)+e;f.push(n,r,s);f.push(r,a,s)}}}function _(){for(let t=0;t<=e;t++){for(let n=0;n<=i;n++){l.x=t/e;l.y=n/i;d.push(l.x,l.y)}}}}toJSON(){const t=super.toJSON();t.path=this.parameters.path.toJSON();return t}static fromJSON(t){return new TubeGeometry((new Curves[t.path.type]).fromJSON(t.path),t.tubularSegments,t.radius,t.radialSegments,t.closed)}}class WireframeGeometry extends BufferGeometry$1{constructor(t=null){super();this.type="WireframeGeometry";this.parameters={geometry:t};if(t!==null){const e=[];const n=new Set;const i=new Vector3$1;const r=new Vector3$1;if(t.index!==null){const a=t.attributes.position;const s=t.index;let o=t.groups;if(o.length===0){o=[{start:0,count:s.count,materialIndex:0}]}for(let t=0,l=o.length;t<l;++t){const l=o[t];const c=l.start;const u=l.count;for(let t=c,o=c+u;t<o;t+=3){for(let o=0;o<3;o++){const l=s.getX(t+o);const c=s.getX(t+(o+1)%3);i.fromBufferAttribute(a,l);r.fromBufferAttribute(a,c);if(isUniqueEdge(i,r,n)===true){e.push(i.x,i.y,i.z);e.push(r.x,r.y,r.z)}}}}}else{const a=t.attributes.position;for(let t=0,s=a.count/3;t<s;t++){for(let s=0;s<3;s++){const o=3*t+s;const l=3*t+(s+1)%3;i.fromBufferAttribute(a,o);r.fromBufferAttribute(a,l);if(isUniqueEdge(i,r,n)===true){e.push(i.x,i.y,i.z);e.push(r.x,r.y,r.z)}}}}this.setAttribute("position",new Float32BufferAttribute$1(e,3))}}}function isUniqueEdge(t,e,n){const i=`${t.x},${t.y},${t.z}-${e.x},${e.y},${e.z}`;const r=`${e.x},${e.y},${e.z}-${t.x},${t.y},${t.z}`;if(n.has(i)===true||n.has(r)===true){return false}else{n.add(i);n.add(r);return true}}var Geometries=Object.freeze({__proto__:null,BoxGeometry:BoxGeometry$1,BoxBufferGeometry:BoxGeometry$1,CircleGeometry:CircleGeometry,CircleBufferGeometry:CircleGeometry,ConeGeometry:ConeGeometry,ConeBufferGeometry:ConeGeometry,CylinderGeometry:CylinderGeometry$1,CylinderBufferGeometry:CylinderGeometry$1,DodecahedronGeometry:DodecahedronGeometry,DodecahedronBufferGeometry:DodecahedronGeometry,EdgesGeometry:EdgesGeometry,ExtrudeGeometry:ExtrudeGeometry,ExtrudeBufferGeometry:ExtrudeGeometry,IcosahedronGeometry:IcosahedronGeometry,IcosahedronBufferGeometry:IcosahedronGeometry,LatheGeometry:LatheGeometry,LatheBufferGeometry:LatheGeometry,OctahedronGeometry:OctahedronGeometry$1,OctahedronBufferGeometry:OctahedronGeometry$1,PlaneGeometry:PlaneGeometry$1,PlaneBufferGeometry:PlaneGeometry$1,PolyhedronGeometry:PolyhedronGeometry,PolyhedronBufferGeometry:PolyhedronGeometry,RingGeometry:RingGeometry,RingBufferGeometry:RingGeometry,ShapeGeometry:ShapeGeometry,ShapeBufferGeometry:ShapeGeometry,SphereGeometry:SphereGeometry$1,SphereBufferGeometry:SphereGeometry$1,TetrahedronGeometry:TetrahedronGeometry,TetrahedronBufferGeometry:TetrahedronGeometry,TorusGeometry:TorusGeometry$1,TorusBufferGeometry:TorusGeometry$1,TorusKnotGeometry:TorusKnotGeometry,TorusKnotBufferGeometry:TorusKnotGeometry,TubeGeometry:TubeGeometry,TubeBufferGeometry:TubeGeometry,WireframeGeometry:WireframeGeometry});class ShadowMaterial extends Material{constructor(t){super();this.type="ShadowMaterial";this.color=new Color$1(0);this.transparent=true;this.setValues(t)}copy(t){super.copy(t);this.color.copy(t.color);return this}}ShadowMaterial.prototype.isShadowMaterial=true;class RawShaderMaterial extends ShaderMaterial{constructor(t){super(t);this.type="RawShaderMaterial"}}RawShaderMaterial.prototype.isRawShaderMaterial=true;class MeshStandardMaterial extends Material{constructor(t){super();this.defines={STANDARD:""};this.type="MeshStandardMaterial";this.color=new Color$1(16777215);this.roughness=1;this.metalness=0;this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new Color$1(0);this.emissiveIntensity=1;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.roughnessMap=null;this.metalnessMap=null;this.alphaMap=null;this.envMap=null;this.envMapIntensity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.flatShading=false;this.setValues(t)}copy(t){super.copy(t);this.defines={STANDARD:""};this.color.copy(t.color);this.roughness=t.roughness;this.metalness=t.metalness;this.map=t.map;this.lightMap=t.lightMap;this.lightMapIntensity=t.lightMapIntensity;this.aoMap=t.aoMap;this.aoMapIntensity=t.aoMapIntensity;this.emissive.copy(t.emissive);this.emissiveMap=t.emissiveMap;this.emissiveIntensity=t.emissiveIntensity;this.bumpMap=t.bumpMap;this.bumpScale=t.bumpScale;this.normalMap=t.normalMap;this.normalMapType=t.normalMapType;this.normalScale.copy(t.normalScale);this.displacementMap=t.displacementMap;this.displacementScale=t.displacementScale;this.displacementBias=t.displacementBias;this.roughnessMap=t.roughnessMap;this.metalnessMap=t.metalnessMap;this.alphaMap=t.alphaMap;this.envMap=t.envMap;this.envMapIntensity=t.envMapIntensity;this.refractionRatio=t.refractionRatio;this.wireframe=t.wireframe;this.wireframeLinewidth=t.wireframeLinewidth;this.wireframeLinecap=t.wireframeLinecap;this.wireframeLinejoin=t.wireframeLinejoin;this.flatShading=t.flatShading;return this}}MeshStandardMaterial.prototype.isMeshStandardMaterial=true;class MeshPhysicalMaterial extends MeshStandardMaterial{constructor(t){super();this.defines={STANDARD:"",PHYSICAL:""};this.type="MeshPhysicalMaterial";this.clearcoatMap=null;this.clearcoatRoughness=0;this.clearcoatRoughnessMap=null;this.clearcoatNormalScale=new Vector2(1,1);this.clearcoatNormalMap=null;this.ior=1.5;Object.defineProperty(this,"reflectivity",{get:function(){return clamp(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}});this.sheenColor=new Color$1(0);this.sheenColorMap=null;this.sheenRoughness=1;this.sheenRoughnessMap=null;this.transmissionMap=null;this.thickness=0;this.thicknessMap=null;this.attenuationDistance=0;this.attenuationColor=new Color$1(1,1,1);this.specularIntensity=1;this.specularIntensityMap=null;this.specularColor=new Color$1(1,1,1);this.specularColorMap=null;this._sheen=0;this._clearcoat=0;this._transmission=0;this.setValues(t)}get sheen(){return this._sheen}set sheen(t){if(this._sheen>0!==t>0){this.version++}this._sheen=t}get clearcoat(){return this._clearcoat}set clearcoat(t){if(this._clearcoat>0!==t>0){this.version++}this._clearcoat=t}get transmission(){return this._transmission}set transmission(t){if(this._transmission>0!==t>0){this.version++}this._transmission=t}copy(t){super.copy(t);this.defines={STANDARD:"",PHYSICAL:""};this.clearcoat=t.clearcoat;this.clearcoatMap=t.clearcoatMap;this.clearcoatRoughness=t.clearcoatRoughness;this.clearcoatRoughnessMap=t.clearcoatRoughnessMap;this.clearcoatNormalMap=t.clearcoatNormalMap;this.clearcoatNormalScale.copy(t.clearcoatNormalScale);this.ior=t.ior;this.sheen=t.sheen;this.sheenColor.copy(t.sheenColor);this.sheenColorMap=t.sheenColorMap;this.sheenRoughness=t.sheenRoughness;this.sheenRoughnessMap=t.sheenRoughnessMap;this.transmission=t.transmission;this.transmissionMap=t.transmissionMap;this.thickness=t.thickness;this.thicknessMap=t.thicknessMap;this.attenuationDistance=t.attenuationDistance;this.attenuationColor.copy(t.attenuationColor);this.specularIntensity=t.specularIntensity;this.specularIntensityMap=t.specularIntensityMap;this.specularColor.copy(t.specularColor);this.specularColorMap=t.specularColorMap;return this}}MeshPhysicalMaterial.prototype.isMeshPhysicalMaterial=true;class MeshPhongMaterial extends Material{constructor(t){super();this.type="MeshPhongMaterial";this.color=new Color$1(16777215);this.specular=new Color$1(1118481);this.shininess=30;this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new Color$1(0);this.emissiveIntensity=1;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.flatShading=false;this.setValues(t)}copy(t){super.copy(t);this.color.copy(t.color);this.specular.copy(t.specular);this.shininess=t.shininess;this.map=t.map;this.lightMap=t.lightMap;this.lightMapIntensity=t.lightMapIntensity;this.aoMap=t.aoMap;this.aoMapIntensity=t.aoMapIntensity;this.emissive.copy(t.emissive);this.emissiveMap=t.emissiveMap;this.emissiveIntensity=t.emissiveIntensity;this.bumpMap=t.bumpMap;this.bumpScale=t.bumpScale;this.normalMap=t.normalMap;this.normalMapType=t.normalMapType;this.normalScale.copy(t.normalScale);this.displacementMap=t.displacementMap;this.displacementScale=t.displacementScale;this.displacementBias=t.displacementBias;this.specularMap=t.specularMap;this.alphaMap=t.alphaMap;this.envMap=t.envMap;this.combine=t.combine;this.reflectivity=t.reflectivity;this.refractionRatio=t.refractionRatio;this.wireframe=t.wireframe;this.wireframeLinewidth=t.wireframeLinewidth;this.wireframeLinecap=t.wireframeLinecap;this.wireframeLinejoin=t.wireframeLinejoin;this.flatShading=t.flatShading;return this}}MeshPhongMaterial.prototype.isMeshPhongMaterial=true;class MeshToonMaterial extends Material{constructor(t){super();this.defines={TOON:""};this.type="MeshToonMaterial";this.color=new Color$1(16777215);this.map=null;this.gradientMap=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new Color$1(0);this.emissiveIntensity=1;this.emissiveMap=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.alphaMap=null;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.setValues(t)}copy(t){super.copy(t);this.color.copy(t.color);this.map=t.map;this.gradientMap=t.gradientMap;this.lightMap=t.lightMap;this.lightMapIntensity=t.lightMapIntensity;this.aoMap=t.aoMap;this.aoMapIntensity=t.aoMapIntensity;this.emissive.copy(t.emissive);this.emissiveMap=t.emissiveMap;this.emissiveIntensity=t.emissiveIntensity;this.bumpMap=t.bumpMap;this.bumpScale=t.bumpScale;this.normalMap=t.normalMap;this.normalMapType=t.normalMapType;this.normalScale.copy(t.normalScale);this.displacementMap=t.displacementMap;this.displacementScale=t.displacementScale;this.displacementBias=t.displacementBias;this.alphaMap=t.alphaMap;this.wireframe=t.wireframe;this.wireframeLinewidth=t.wireframeLinewidth;this.wireframeLinecap=t.wireframeLinecap;this.wireframeLinejoin=t.wireframeLinejoin;return this}}MeshToonMaterial.prototype.isMeshToonMaterial=true;class MeshNormalMaterial extends Material{constructor(t){super();this.type="MeshNormalMaterial";this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.wireframe=false;this.wireframeLinewidth=1;this.fog=false;this.flatShading=false;this.setValues(t)}copy(t){super.copy(t);this.bumpMap=t.bumpMap;this.bumpScale=t.bumpScale;this.normalMap=t.normalMap;this.normalMapType=t.normalMapType;this.normalScale.copy(t.normalScale);this.displacementMap=t.displacementMap;this.displacementScale=t.displacementScale;this.displacementBias=t.displacementBias;this.wireframe=t.wireframe;this.wireframeLinewidth=t.wireframeLinewidth;this.flatShading=t.flatShading;return this}}MeshNormalMaterial.prototype.isMeshNormalMaterial=true;class MeshLambertMaterial extends Material{constructor(t){super();this.type="MeshLambertMaterial";this.color=new Color$1(16777215);this.map=null;this.lightMap=null;this.lightMapIntensity=1;this.aoMap=null;this.aoMapIntensity=1;this.emissive=new Color$1(0);this.emissiveIntensity=1;this.emissiveMap=null;this.specularMap=null;this.alphaMap=null;this.envMap=null;this.combine=MultiplyOperation;this.reflectivity=1;this.refractionRatio=.98;this.wireframe=false;this.wireframeLinewidth=1;this.wireframeLinecap="round";this.wireframeLinejoin="round";this.setValues(t)}copy(t){super.copy(t);this.color.copy(t.color);this.map=t.map;this.lightMap=t.lightMap;this.lightMapIntensity=t.lightMapIntensity;this.aoMap=t.aoMap;this.aoMapIntensity=t.aoMapIntensity;this.emissive.copy(t.emissive);this.emissiveMap=t.emissiveMap;this.emissiveIntensity=t.emissiveIntensity;this.specularMap=t.specularMap;this.alphaMap=t.alphaMap;this.envMap=t.envMap;this.combine=t.combine;this.reflectivity=t.reflectivity;this.refractionRatio=t.refractionRatio;this.wireframe=t.wireframe;this.wireframeLinewidth=t.wireframeLinewidth;this.wireframeLinecap=t.wireframeLinecap;this.wireframeLinejoin=t.wireframeLinejoin;return this}}MeshLambertMaterial.prototype.isMeshLambertMaterial=true;class MeshMatcapMaterial extends Material{constructor(t){super();this.defines={MATCAP:""};this.type="MeshMatcapMaterial";this.color=new Color$1(16777215);this.matcap=null;this.map=null;this.bumpMap=null;this.bumpScale=1;this.normalMap=null;this.normalMapType=TangentSpaceNormalMap;this.normalScale=new Vector2(1,1);this.displacementMap=null;this.displacementScale=1;this.displacementBias=0;this.alphaMap=null;this.flatShading=false;this.setValues(t)}copy(t){super.copy(t);this.defines={MATCAP:""};this.color.copy(t.color);this.matcap=t.matcap;this.map=t.map;this.bumpMap=t.bumpMap;this.bumpScale=t.bumpScale;this.normalMap=t.normalMap;this.normalMapType=t.normalMapType;this.normalScale.copy(t.normalScale);this.displacementMap=t.displacementMap;this.displacementScale=t.displacementScale;this.displacementBias=t.displacementBias;this.alphaMap=t.alphaMap;this.flatShading=t.flatShading;return this}}MeshMatcapMaterial.prototype.isMeshMatcapMaterial=true;class LineDashedMaterial extends LineBasicMaterial$1{constructor(t){super();this.type="LineDashedMaterial";this.scale=1;this.dashSize=3;this.gapSize=1;this.setValues(t)}copy(t){super.copy(t);this.scale=t.scale;this.dashSize=t.dashSize;this.gapSize=t.gapSize;return this}}LineDashedMaterial.prototype.isLineDashedMaterial=true;const materialLib={ShadowMaterial:ShadowMaterial,SpriteMaterial:SpriteMaterial,RawShaderMaterial:RawShaderMaterial,ShaderMaterial:ShaderMaterial,PointsMaterial:PointsMaterial,MeshPhysicalMaterial:MeshPhysicalMaterial,MeshStandardMaterial:MeshStandardMaterial,MeshPhongMaterial:MeshPhongMaterial,MeshToonMaterial:MeshToonMaterial,MeshNormalMaterial:MeshNormalMaterial,MeshLambertMaterial:MeshLambertMaterial,MeshDepthMaterial:MeshDepthMaterial,MeshDistanceMaterial:MeshDistanceMaterial,MeshBasicMaterial:MeshBasicMaterial$1,MeshMatcapMaterial:MeshMatcapMaterial,LineDashedMaterial:LineDashedMaterial,LineBasicMaterial:LineBasicMaterial$1,Material:Material};Material.fromType=function(t){return new materialLib[t]};const AnimationUtils={arraySlice:function(t,e,n){if(AnimationUtils.isTypedArray(t)){return new t.constructor(t.subarray(e,n!==undefined?n:t.length))}return t.slice(e,n)},convertArray:function(t,e,n){if(!t||!n&&t.constructor===e)return t;if(typeof e.BYTES_PER_ELEMENT==="number"){return new e(t)}return Array.prototype.slice.call(t)},isTypedArray:function(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)},getKeyframeOrder:function(t){function e(e,n){return t[e]-t[n]}const n=t.length;const i=new Array(n);for(let t=0;t!==n;++t)i[t]=t;i.sort(e);return i},sortedArray:function(t,e,n){const i=t.length;const r=new t.constructor(i);for(let a=0,s=0;s!==i;++a){const i=n[a]*e;for(let n=0;n!==e;++n){r[s++]=t[i+n]}}return r},flattenJSON:function(t,e,n,i){let r=1,a=t[0];while(a!==undefined&&a[i]===undefined){a=t[r++]}if(a===undefined)return;let s=a[i];if(s===undefined)return;if(Array.isArray(s)){do{s=a[i];if(s!==undefined){e.push(a.time);n.push.apply(n,s)}a=t[r++]}while(a!==undefined)}else if(s.toArray!==undefined){do{s=a[i];if(s!==undefined){e.push(a.time);s.toArray(n,n.length)}a=t[r++]}while(a!==undefined)}else{do{s=a[i];if(s!==undefined){e.push(a.time);n.push(s)}a=t[r++]}while(a!==undefined)}},subclip:function(t,e,n,i,r=30){const a=t.clone();a.name=e;const s=[];for(let t=0;t<a.tracks.length;++t){const e=a.tracks[t];const o=e.getValueSize();const l=[];const c=[];for(let t=0;t<e.times.length;++t){const a=e.times[t]*r;if(a<n||a>=i)continue;l.push(e.times[t]);for(let n=0;n<o;++n){c.push(e.values[t*o+n])}}if(l.length===0)continue;e.times=AnimationUtils.convertArray(l,e.times.constructor);e.values=AnimationUtils.convertArray(c,e.values.constructor);s.push(e)}a.tracks=s;let o=Infinity;for(let t=0;t<a.tracks.length;++t){if(o>a.tracks[t].times[0]){o=a.tracks[t].times[0]}}for(let t=0;t<a.tracks.length;++t){a.tracks[t].shift(-1*o)}a.resetDuration();return a},makeClipAdditive:function(t,e=0,n=t,i=30){if(i<=0)i=30;const r=n.tracks.length;const a=e/i;for(let e=0;e<r;++e){const i=n.tracks[e];const r=i.ValueTypeName;if(r==="bool"||r==="string")continue;const s=t.tracks.find((function(t){return t.name===i.name&&t.ValueTypeName===r}));if(s===undefined)continue;let o=0;const l=i.getValueSize();if(i.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline){o=l/3}let c=0;const u=s.getValueSize();if(s.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline){c=u/3}const h=i.times.length-1;let d;if(a<=i.times[0]){const t=o;const e=l-o;d=AnimationUtils.arraySlice(i.values,t,e)}else if(a>=i.times[h]){const t=h*l+o;const e=t+l-o;d=AnimationUtils.arraySlice(i.values,t,e)}else{const t=i.createInterpolant();const e=o;const n=l-o;t.evaluate(a);d=AnimationUtils.arraySlice(t.resultBuffer,e,n)}if(r==="quaternion"){const t=(new Quaternion$1).fromArray(d).normalize().conjugate();t.toArray(d)}const f=s.times.length;for(let t=0;t<f;++t){const e=t*u+c;if(r==="quaternion"){Quaternion$1.multiplyQuaternionsFlat(s.values,e,d,0,s.values,e)}else{const t=u-c*2;for(let n=0;n<t;++n){s.values[e+n]-=d[n]}}}}t.blendMode=AdditiveAnimationBlendMode;return t}};class Interpolant{constructor(t,e,n,i){this.parameterPositions=t;this._cachedIndex=0;this.resultBuffer=i!==undefined?i:new e.constructor(n);this.sampleValues=e;this.valueSize=n;this.settings=null;this.DefaultSettings_={}}evaluate(t){const e=this.parameterPositions;let n=this._cachedIndex,i=e[n],r=e[n-1];t:{e:{let a;n:{i:if(!(t<i)){for(let a=n+2;;){if(i===undefined){if(t<r)break i;n=e.length;this._cachedIndex=n;return this.afterEnd_(n-1,t,r)}if(n===a)break;r=i;i=e[++n];if(t<i){break e}}a=e.length;break n}if(!(t>=r)){const s=e[1];if(t<s){n=2;r=s}for(let a=n-2;;){if(r===undefined){this._cachedIndex=0;return this.beforeStart_(0,t,i)}if(n===a)break;i=r;r=e[--n-1];if(t>=r){break e}}a=n;n=0;break n}break t}while(n<a){const i=n+a>>>1;if(t<e[i]){a=i}else{n=i+1}}i=e[n];r=e[n-1];if(r===undefined){this._cachedIndex=0;return this.beforeStart_(0,t,i)}if(i===undefined){n=e.length;this._cachedIndex=n;return this.afterEnd_(n-1,r,t)}}this._cachedIndex=n;this.intervalChanged_(n,r,i)}return this.interpolate_(n,r,t,i)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(t){const e=this.resultBuffer,n=this.sampleValues,i=this.valueSize,r=t*i;for(let t=0;t!==i;++t){e[t]=n[r+t]}return e}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}Interpolant.prototype.beforeStart_=Interpolant.prototype.copySampleValue_;Interpolant.prototype.afterEnd_=Interpolant.prototype.copySampleValue_;class CubicInterpolant extends Interpolant{constructor(t,e,n,i){super(t,e,n,i);this._weightPrev=-0;this._offsetPrev=-0;this._weightNext=-0;this._offsetNext=-0;this.DefaultSettings_={endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding}}intervalChanged_(t,e,n){const i=this.parameterPositions;let r=t-2,a=t+1,s=i[r],o=i[a];if(s===undefined){switch(this.getSettings_().endingStart){case ZeroSlopeEnding:r=t;s=2*e-n;break;case WrapAroundEnding:r=i.length-2;s=e+i[r]-i[r+1];break;default:r=t;s=n}}if(o===undefined){switch(this.getSettings_().endingEnd){case ZeroSlopeEnding:a=t;o=2*n-e;break;case WrapAroundEnding:a=1;o=n+i[1]-i[0];break;default:a=t-1;o=e}}const l=(n-e)*.5,c=this.valueSize;this._weightPrev=l/(e-s);this._weightNext=l/(o-n);this._offsetPrev=r*c;this._offsetNext=a*c}interpolate_(t,e,n,i){const r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=t*s,l=o-s,c=this._offsetPrev,u=this._offsetNext,h=this._weightPrev,d=this._weightNext,f=(n-e)/(i-e),p=f*f,m=p*f;const g=-h*m+2*h*p-h*f;const _=(1+h)*m+(-1.5-2*h)*p+(-.5+h)*f+1;const y=(-1-d)*m+(1.5+d)*p+.5*f;const x=d*m-d*p;for(let t=0;t!==s;++t){r[t]=g*a[c+t]+_*a[l+t]+y*a[o+t]+x*a[u+t]}return r}}class LinearInterpolant extends Interpolant{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t,e,n,i){const r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=t*s,l=o-s,c=(n-e)/(i-e),u=1-c;for(let t=0;t!==s;++t){r[t]=a[l+t]*u+a[o+t]*c}return r}}class DiscreteInterpolant extends Interpolant{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t){return this.copySampleValue_(t-1)}}class KeyframeTrack{constructor(t,e,n,i){if(t===undefined)throw new Error("THREE.KeyframeTrack: track name is undefined");if(e===undefined||e.length===0)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t;this.times=AnimationUtils.convertArray(e,this.TimeBufferType);this.values=AnimationUtils.convertArray(n,this.ValueBufferType);this.setInterpolation(i||this.DefaultInterpolation)}static toJSON(t){const e=t.constructor;let n;if(e.toJSON!==this.toJSON){n=e.toJSON(t)}else{n={name:t.name,times:AnimationUtils.convertArray(t.times,Array),values:AnimationUtils.convertArray(t.values,Array)};const e=t.getInterpolation();if(e!==t.DefaultInterpolation){n.interpolation=e}}n.type=t.ValueTypeName;return n}InterpolantFactoryMethodDiscrete(t){return new DiscreteInterpolant(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodLinear(t){return new LinearInterpolant(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodSmooth(t){return new CubicInterpolant(this.times,this.values,this.getValueSize(),t)}setInterpolation(t){let e;switch(t){case InterpolateDiscrete:e=this.InterpolantFactoryMethodDiscrete;break;case InterpolateLinear:e=this.InterpolantFactoryMethodLinear;break;case InterpolateSmooth:e=this.InterpolantFactoryMethodSmooth;break}if(e===undefined){const e="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(this.createInterpolant===undefined){if(t!==this.DefaultInterpolation){this.setInterpolation(this.DefaultInterpolation)}else{throw new Error(e)}}console.warn("THREE.KeyframeTrack:",e);return this}this.createInterpolant=e;return this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return InterpolateDiscrete;case this.InterpolantFactoryMethodLinear:return InterpolateLinear;case this.InterpolantFactoryMethodSmooth:return InterpolateSmooth}}getValueSize(){return this.values.length/this.times.length}shift(t){if(t!==0){const e=this.times;for(let n=0,i=e.length;n!==i;++n){e[n]+=t}}return this}scale(t){if(t!==1){const e=this.times;for(let n=0,i=e.length;n!==i;++n){e[n]*=t}}return this}trim(t,e){const n=this.times,i=n.length;let r=0,a=i-1;while(r!==i&&n[r]<t){++r}while(a!==-1&&n[a]>e){--a}++a;if(r!==0||a!==i){if(r>=a){a=Math.max(a,1);r=a-1}const t=this.getValueSize();this.times=AnimationUtils.arraySlice(n,r,a);this.values=AnimationUtils.arraySlice(this.values,r*t,a*t)}return this}validate(){let t=true;const e=this.getValueSize();if(e-Math.floor(e)!==0){console.error("THREE.KeyframeTrack: Invalid value size in track.",this);t=false}const n=this.times,i=this.values,r=n.length;if(r===0){console.error("THREE.KeyframeTrack: Track is empty.",this);t=false}let a=null;for(let e=0;e!==r;e++){const i=n[e];if(typeof i==="number"&&isNaN(i)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,e,i);t=false;break}if(a!==null&&a>i){console.error("THREE.KeyframeTrack: Out of order keys.",this,e,i,a);t=false;break}a=i}if(i!==undefined){if(AnimationUtils.isTypedArray(i)){for(let e=0,n=i.length;e!==n;++e){const n=i[e];if(isNaN(n)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,e,n);t=false;break}}}}return t}optimize(){const t=AnimationUtils.arraySlice(this.times),e=AnimationUtils.arraySlice(this.values),n=this.getValueSize(),i=this.getInterpolation()===InterpolateSmooth,r=t.length-1;let a=1;for(let s=1;s<r;++s){let r=false;const o=t[s];const l=t[s+1];if(o!==l&&(s!==1||o!==t[0])){if(!i){const t=s*n,i=t-n,a=t+n;for(let s=0;s!==n;++s){const n=e[t+s];if(n!==e[i+s]||n!==e[a+s]){r=true;break}}}else{r=true}}if(r){if(s!==a){t[a]=t[s];const i=s*n,r=a*n;for(let t=0;t!==n;++t){e[r+t]=e[i+t]}}++a}}if(r>0){t[a]=t[r];for(let t=r*n,i=a*n,s=0;s!==n;++s){e[i+s]=e[t+s]}++a}if(a!==t.length){this.times=AnimationUtils.arraySlice(t,0,a);this.values=AnimationUtils.arraySlice(e,0,a*n)}else{this.times=t;this.values=e}return this}clone(){const t=AnimationUtils.arraySlice(this.times,0);const e=AnimationUtils.arraySlice(this.values,0);const n=this.constructor;const i=new n(this.name,t,e);i.createInterpolant=this.createInterpolant;return i}}KeyframeTrack.prototype.TimeBufferType=Float32Array;KeyframeTrack.prototype.ValueBufferType=Float32Array;KeyframeTrack.prototype.DefaultInterpolation=InterpolateLinear;class BooleanKeyframeTrack extends KeyframeTrack{}BooleanKeyframeTrack.prototype.ValueTypeName="bool";BooleanKeyframeTrack.prototype.ValueBufferType=Array;BooleanKeyframeTrack.prototype.DefaultInterpolation=InterpolateDiscrete;BooleanKeyframeTrack.prototype.InterpolantFactoryMethodLinear=undefined;BooleanKeyframeTrack.prototype.InterpolantFactoryMethodSmooth=undefined;class ColorKeyframeTrack extends KeyframeTrack{}ColorKeyframeTrack.prototype.ValueTypeName="color";class NumberKeyframeTrack extends KeyframeTrack{}NumberKeyframeTrack.prototype.ValueTypeName="number";class QuaternionLinearInterpolant extends Interpolant{constructor(t,e,n,i){super(t,e,n,i)}interpolate_(t,e,n,i){const r=this.resultBuffer,a=this.sampleValues,s=this.valueSize,o=(n-e)/(i-e);let l=t*s;for(let t=l+s;l!==t;l+=4){Quaternion$1.slerpFlat(r,0,a,l-s,a,l,o)}return r}}class QuaternionKeyframeTrack extends KeyframeTrack{InterpolantFactoryMethodLinear(t){return new QuaternionLinearInterpolant(this.times,this.values,this.getValueSize(),t)}}QuaternionKeyframeTrack.prototype.ValueTypeName="quaternion";QuaternionKeyframeTrack.prototype.DefaultInterpolation=InterpolateLinear;QuaternionKeyframeTrack.prototype.InterpolantFactoryMethodSmooth=undefined;class StringKeyframeTrack extends KeyframeTrack{}StringKeyframeTrack.prototype.ValueTypeName="string";StringKeyframeTrack.prototype.ValueBufferType=Array;StringKeyframeTrack.prototype.DefaultInterpolation=InterpolateDiscrete;StringKeyframeTrack.prototype.InterpolantFactoryMethodLinear=undefined;StringKeyframeTrack.prototype.InterpolantFactoryMethodSmooth=undefined;class VectorKeyframeTrack extends KeyframeTrack{}VectorKeyframeTrack.prototype.ValueTypeName="vector";class AnimationClip{constructor(t,e=-1,n,i=NormalAnimationBlendMode){this.name=t;this.tracks=n;this.duration=e;this.blendMode=i;this.uuid=generateUUID();if(this.duration<0){this.resetDuration()}}static parse(t){const e=[],n=t.tracks,i=1/(t.fps||1);for(let t=0,r=n.length;t!==r;++t){e.push(parseKeyframeTrack(n[t]).scale(i))}const r=new this(t.name,t.duration,e,t.blendMode);r.uuid=t.uuid;return r}static toJSON(t){const e=[],n=t.tracks;const i={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid,blendMode:t.blendMode};for(let t=0,i=n.length;t!==i;++t){e.push(KeyframeTrack.toJSON(n[t]))}return i}static CreateFromMorphTargetSequence(t,e,n,i){const r=e.length;const a=[];for(let t=0;t<r;t++){let s=[];let o=[];s.push((t+r-1)%r,t,(t+1)%r);o.push(0,1,0);const l=AnimationUtils.getKeyframeOrder(s);s=AnimationUtils.sortedArray(s,1,l);o=AnimationUtils.sortedArray(o,1,l);if(!i&&s[0]===0){s.push(r);o.push(o[0])}a.push(new NumberKeyframeTrack(".morphTargetInfluences["+e[t].name+"]",s,o).scale(1/n))}return new this(t,-1,a)}static findByName(t,e){let n=t;if(!Array.isArray(t)){const e=t;n=e.geometry&&e.geometry.animations||e.animations}for(let t=0;t<n.length;t++){if(n[t].name===e){return n[t]}}return null}static CreateClipsFromMorphTargetSequences(t,e,n){const i={};const r=/^([\w-]*?)([\d]+)$/;for(let e=0,n=t.length;e<n;e++){const n=t[e];const a=n.name.match(r);if(a&&a.length>1){const t=a[1];let e=i[t];if(!e){i[t]=e=[]}e.push(n)}}const a=[];for(const t in i){a.push(this.CreateFromMorphTargetSequence(t,i[t],e,n))}return a}static parseAnimation(t,e){if(!t){console.error("THREE.AnimationClip: No animation in JSONLoader data.");return null}const n=function(t,e,n,i,r){if(n.length!==0){const a=[];const s=[];AnimationUtils.flattenJSON(n,a,s,i);if(a.length!==0){r.push(new t(e,a,s))}}};const i=[];const r=t.name||"default";const a=t.fps||30;const s=t.blendMode;let o=t.length||-1;const l=t.hierarchy||[];for(let t=0;t<l.length;t++){const r=l[t].keys;if(!r||r.length===0)continue;if(r[0].morphTargets){const t={};let e;for(e=0;e<r.length;e++){if(r[e].morphTargets){for(let n=0;n<r[e].morphTargets.length;n++){t[r[e].morphTargets[n]]=-1}}}for(const n in t){const t=[];const a=[];for(let i=0;i!==r[e].morphTargets.length;++i){const i=r[e];t.push(i.time);a.push(i.morphTarget===n?1:0)}i.push(new NumberKeyframeTrack(".morphTargetInfluence["+n+"]",t,a))}o=t.length*a}else{const a=".bones["+e[t].name+"]";n(VectorKeyframeTrack,a+".position",r,"pos",i);n(QuaternionKeyframeTrack,a+".quaternion",r,"rot",i);n(VectorKeyframeTrack,a+".scale",r,"scl",i)}}if(i.length===0){return null}const c=new this(r,o,i,s);return c}resetDuration(){const t=this.tracks;let e=0;for(let n=0,i=t.length;n!==i;++n){const t=this.tracks[n];e=Math.max(e,t.times[t.times.length-1])}this.duration=e;return this}trim(){for(let t=0;t<this.tracks.length;t++){this.tracks[t].trim(0,this.duration)}return this}validate(){let t=true;for(let e=0;e<this.tracks.length;e++){t=t&&this.tracks[e].validate()}return t}optimize(){for(let t=0;t<this.tracks.length;t++){this.tracks[t].optimize()}return this}clone(){const t=[];for(let e=0;e<this.tracks.length;e++){t.push(this.tracks[e].clone())}return new this.constructor(this.name,this.duration,t,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function getTrackTypeForValueTypeName(t){switch(t.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return NumberKeyframeTrack;case"vector":case"vector2":case"vector3":case"vector4":return VectorKeyframeTrack;case"color":return ColorKeyframeTrack;case"quaternion":return QuaternionKeyframeTrack;case"bool":case"boolean":return BooleanKeyframeTrack;case"string":return StringKeyframeTrack}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+t)}function parseKeyframeTrack(t){if(t.type===undefined){throw new Error("THREE.KeyframeTrack: track type undefined, can not parse")}const e=getTrackTypeForValueTypeName(t.type);if(t.times===undefined){const e=[],n=[];AnimationUtils.flattenJSON(t.keys,e,n,"value");t.times=e;t.values=n}if(e.parse!==undefined){return e.parse(t)}else{return new e(t.name,t.times,t.values,t.interpolation)}}const Cache={enabled:false,files:{},add:function(t,e){if(this.enabled===false)return;this.files[t]=e},get:function(t){if(this.enabled===false)return;return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};class LoadingManager{constructor(t,e,n){const i=this;let r=false;let a=0;let s=0;let o=undefined;const l=[];this.onStart=undefined;this.onLoad=t;this.onProgress=e;this.onError=n;this.itemStart=function(t){s++;if(r===false){if(i.onStart!==undefined){i.onStart(t,a,s)}}r=true};this.itemEnd=function(t){a++;if(i.onProgress!==undefined){i.onProgress(t,a,s)}if(a===s){r=false;if(i.onLoad!==undefined){i.onLoad()}}};this.itemError=function(t){if(i.onError!==undefined){i.onError(t)}};this.resolveURL=function(t){if(o){return o(t)}return t};this.setURLModifier=function(t){o=t;return this};this.addHandler=function(t,e){l.push(t,e);return this};this.removeHandler=function(t){const e=l.indexOf(t);if(e!==-1){l.splice(e,2)}return this};this.getHandler=function(t){for(let e=0,n=l.length;e<n;e+=2){const n=l[e];const i=l[e+1];if(n.global)n.lastIndex=0;if(n.test(t)){return i}}return null}}}const DefaultLoadingManager=new LoadingManager;class Loader$1{constructor(t){this.manager=t!==undefined?t:DefaultLoadingManager;this.crossOrigin="anonymous";this.withCredentials=false;this.path="";this.resourcePath="";this.requestHeader={}}load(){}loadAsync(t,e){const n=this;return new Promise((function(i,r){n.load(t,i,e,r)}))}parse(){}setCrossOrigin(t){this.crossOrigin=t;return this}setWithCredentials(t){this.withCredentials=t;return this}setPath(t){this.path=t;return this}setResourcePath(t){this.resourcePath=t;return this}setRequestHeader(t){this.requestHeader=t;return this}}const loading={};class FileLoader extends Loader$1{constructor(t){super(t)}load(t,e,n,i){if(t===undefined)t="";if(this.path!==undefined)t=this.path+t;t=this.manager.resolveURL(t);const r=Cache.get(t);if(r!==undefined){this.manager.itemStart(t);setTimeout((()=>{if(e)e(r);this.manager.itemEnd(t)}),0);return r}if(loading[t]!==undefined){loading[t].push({onLoad:e,onProgress:n,onError:i});return}loading[t]=[];loading[t].push({onLoad:e,onProgress:n,onError:i});const a=new Request(t,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"});const s=this.mimeType;const o=this.responseType;fetch(a).then((e=>{if(e.status===200||e.status===0){if(e.status===0){console.warn("THREE.FileLoader: HTTP Status 0 received.")}if(typeof ReadableStream==="undefined"||e.body===undefined||e.body.getReader===undefined){return e}const n=loading[t];const i=e.body.getReader();const r=e.headers.get("Content-Length");const a=r?parseInt(r):0;const s=a!==0;let o=0;const l=new ReadableStream({start(t){e();function e(){i.read().then((({done:i,value:r})=>{if(i){t.close()}else{o+=r.byteLength;const i=new ProgressEvent("progress",{lengthComputable:s,loaded:o,total:a});for(let t=0,e=n.length;t<e;t++){const e=n[t];if(e.onProgress)e.onProgress(i)}t.enqueue(r);e()}}))}}});return new Response(l)}else{throw Error(`fetch for "${e.url}" responded with ${e.status}: ${e.statusText}`)}})).then((t=>{switch(o){case"arraybuffer":return t.arrayBuffer();case"blob":return t.blob();case"document":return t.text().then((t=>{const e=new DOMParser;return e.parseFromString(t,s)}));case"json":return t.json();default:if(s===undefined){return t.text()}else{const e=/charset="?([^;"\s]*)"?/i;const n=e.exec(s);const i=n&&n[1]?n[1].toLowerCase():undefined;const r=new TextDecoder(i);return t.arrayBuffer().then((t=>r.decode(t)))}}})).then((e=>{Cache.add(t,e);const n=loading[t];delete loading[t];for(let t=0,i=n.length;t<i;t++){const i=n[t];if(i.onLoad)i.onLoad(e)}})).catch((e=>{const n=loading[t];if(n===undefined){this.manager.itemError(t);throw e}delete loading[t];for(let t=0,i=n.length;t<i;t++){const i=n[t];if(i.onError)i.onError(e)}this.manager.itemError(t)})).finally((()=>{this.manager.itemEnd(t)}));this.manager.itemStart(t)}setResponseType(t){this.responseType=t;return this}setMimeType(t){this.mimeType=t;return this}}class AnimationLoader extends Loader$1{constructor(t){super(t)}load(t,e,n,i){const r=this;const a=new FileLoader(this.manager);a.setPath(this.path);a.setRequestHeader(this.requestHeader);a.setWithCredentials(this.withCredentials);a.load(t,(function(n){try{e(r.parse(JSON.parse(n)))}catch(e){if(i){i(e)}else{console.error(e)}r.manager.itemError(t)}}),n,i)}parse(t){const e=[];for(let n=0;n<t.length;n++){const i=AnimationClip.parse(t[n]);e.push(i)}return e}}class CompressedTextureLoader extends Loader$1{constructor(t){super(t)}load(t,e,n,i){const r=this;const a=[];const s=new CompressedTexture;const o=new FileLoader(this.manager);o.setPath(this.path);o.setResponseType("arraybuffer");o.setRequestHeader(this.requestHeader);o.setWithCredentials(r.withCredentials);let l=0;function c(c){o.load(t[c],(function(t){const n=r.parse(t,true);a[c]={width:n.width,height:n.height,format:n.format,mipmaps:n.mipmaps};l+=1;if(l===6){if(n.mipmapCount===1)s.minFilter=LinearFilter;s.image=a;s.format=n.format;s.needsUpdate=true;if(e)e(s)}}),n,i)}if(Array.isArray(t)){for(let e=0,n=t.length;e<n;++e){c(e)}}else{o.load(t,(function(t){const n=r.parse(t,true);if(n.isCubemap){const t=n.mipmaps.length/n.mipmapCount;for(let e=0;e<t;e++){a[e]={mipmaps:[]};for(let t=0;t<n.mipmapCount;t++){a[e].mipmaps.push(n.mipmaps[e*n.mipmapCount+t]);a[e].format=n.format;a[e].width=n.width;a[e].height=n.height}}s.image=a}else{s.image.width=n.width;s.image.height=n.height;s.mipmaps=n.mipmaps}if(n.mipmapCount===1){s.minFilter=LinearFilter}s.format=n.format;s.needsUpdate=true;if(e)e(s)}),n,i)}return s}}class ImageLoader extends Loader$1{constructor(t){super(t)}load(t,e,n,i){if(this.path!==undefined)t=this.path+t;t=this.manager.resolveURL(t);const r=this;const a=Cache.get(t);if(a!==undefined){r.manager.itemStart(t);setTimeout((function(){if(e)e(a);r.manager.itemEnd(t)}),0);return a}const s=createElementNS("img");function o(){c();Cache.add(t,this);if(e)e(this);r.manager.itemEnd(t)}function l(e){c();if(i)i(e);r.manager.itemError(t);r.manager.itemEnd(t)}function c(){s.removeEventListener("load",o,false);s.removeEventListener("error",l,false)}s.addEventListener("load",o,false);s.addEventListener("error",l,false);if(t.slice(0,5)!=="data:"){if(this.crossOrigin!==undefined)s.crossOrigin=this.crossOrigin}r.manager.itemStart(t);s.src=t;return s}}class CubeTextureLoader extends Loader$1{constructor(t){super(t)}load(t,e,n,i){const r=new CubeTexture;const a=new ImageLoader(this.manager);a.setCrossOrigin(this.crossOrigin);a.setPath(this.path);let s=0;function o(n){a.load(t[n],(function(t){r.images[n]=t;s++;if(s===6){r.needsUpdate=true;if(e)e(r)}}),undefined,i)}for(let e=0;e<t.length;++e){o(e)}return r}}class DataTextureLoader extends Loader$1{constructor(t){super(t)}load(t,e,n,i){const r=this;const a=new DataTexture;const s=new FileLoader(this.manager);s.setResponseType("arraybuffer");s.setRequestHeader(this.requestHeader);s.setPath(this.path);s.setWithCredentials(r.withCredentials);s.load(t,(function(t){const n=r.parse(t);if(!n)return;if(n.image!==undefined){a.image=n.image}else if(n.data!==undefined){a.image.width=n.width;a.image.height=n.height;a.image.data=n.data}a.wrapS=n.wrapS!==undefined?n.wrapS:ClampToEdgeWrapping;a.wrapT=n.wrapT!==undefined?n.wrapT:ClampToEdgeWrapping;a.magFilter=n.magFilter!==undefined?n.magFilter:LinearFilter;a.minFilter=n.minFilter!==undefined?n.minFilter:LinearFilter;a.anisotropy=n.anisotropy!==undefined?n.anisotropy:1;if(n.encoding!==undefined){a.encoding=n.encoding}if(n.flipY!==undefined){a.flipY=n.flipY}if(n.format!==undefined){a.format=n.format}if(n.type!==undefined){a.type=n.type}if(n.mipmaps!==undefined){a.mipmaps=n.mipmaps;a.minFilter=LinearMipmapLinearFilter}if(n.mipmapCount===1){a.minFilter=LinearFilter}if(n.generateMipmaps!==undefined){a.generateMipmaps=n.generateMipmaps}a.needsUpdate=true;if(e)e(a,n)}),n,i);return a}}class TextureLoader extends Loader$1{constructor(t){super(t)}load(t,e,n,i){const r=new Texture;const a=new ImageLoader(this.manager);a.setCrossOrigin(this.crossOrigin);a.setPath(this.path);a.load(t,(function(t){r.image=t;r.needsUpdate=true;if(e!==undefined){e(r)}}),n,i);return r}}class Light extends Object3D$1{constructor(t,e=1){super();this.type="Light";this.color=new Color$1(t);this.intensity=e}dispose(){}copy(t){super.copy(t);this.color.copy(t.color);this.intensity=t.intensity;return this}toJSON(t){const e=super.toJSON(t);e.object.color=this.color.getHex();e.object.intensity=this.intensity;if(this.groundColor!==undefined)e.object.groundColor=this.groundColor.getHex();if(this.distance!==undefined)e.object.distance=this.distance;if(this.angle!==undefined)e.object.angle=this.angle;if(this.decay!==undefined)e.object.decay=this.decay;if(this.penumbra!==undefined)e.object.penumbra=this.penumbra;if(this.shadow!==undefined)e.object.shadow=this.shadow.toJSON();return e}}Light.prototype.isLight=true;class HemisphereLight extends Light{constructor(t,e,n){super(t,n);this.type="HemisphereLight";this.position.copy(Object3D$1.DefaultUp);this.updateMatrix();this.groundColor=new Color$1(e)}copy(t){Light.prototype.copy.call(this,t);this.groundColor.copy(t.groundColor);return this}}HemisphereLight.prototype.isHemisphereLight=true;const _projScreenMatrix$1=new Matrix4$1;const _lightPositionWorld$1=new Vector3$1;const _lookTarget$1=new Vector3$1;class LightShadow{constructor(t){this.camera=t;this.bias=0;this.normalBias=0;this.radius=1;this.blurSamples=8;this.mapSize=new Vector2(512,512);this.map=null;this.mapPass=null;this.matrix=new Matrix4$1;this.autoUpdate=true;this.needsUpdate=false;this._frustum=new Frustum;this._frameExtents=new Vector2(1,1);this._viewportCount=1;this._viewports=[new Vector4(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera;const n=this.matrix;_lightPositionWorld$1.setFromMatrixPosition(t.matrixWorld);e.position.copy(_lightPositionWorld$1);_lookTarget$1.setFromMatrixPosition(t.target.matrixWorld);e.lookAt(_lookTarget$1);e.updateMatrixWorld();_projScreenMatrix$1.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse);this._frustum.setFromProjectionMatrix(_projScreenMatrix$1);n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1);n.multiply(e.projectionMatrix);n.multiply(e.matrixWorldInverse)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){if(this.map){this.map.dispose()}if(this.mapPass){this.mapPass.dispose()}}copy(t){this.camera=t.camera.clone();this.bias=t.bias;this.radius=t.radius;this.mapSize.copy(t.mapSize);return this}clone(){return(new this.constructor).copy(this)}toJSON(){const t={};if(this.bias!==0)t.bias=this.bias;if(this.normalBias!==0)t.normalBias=this.normalBias;if(this.radius!==1)t.radius=this.radius;if(this.mapSize.x!==512||this.mapSize.y!==512)t.mapSize=this.mapSize.toArray();t.camera=this.camera.toJSON(false).object;delete t.camera.matrix;return t}}class SpotLightShadow extends LightShadow{constructor(){super(new PerspectiveCamera(50,1,.5,500));this.focus=1}updateMatrices(t){const e=this.camera;const n=RAD2DEG*2*t.angle*this.focus;const i=this.mapSize.width/this.mapSize.height;const r=t.distance||e.far;if(n!==e.fov||i!==e.aspect||r!==e.far){e.fov=n;e.aspect=i;e.far=r;e.updateProjectionMatrix()}super.updateMatrices(t)}copy(t){super.copy(t);this.focus=t.focus;return this}}SpotLightShadow.prototype.isSpotLightShadow=true;class SpotLight extends Light{constructor(t,e,n=0,i=Math.PI/3,r=0,a=1){super(t,e);this.type="SpotLight";this.position.copy(Object3D$1.DefaultUp);this.updateMatrix();this.target=new Object3D$1;this.distance=n;this.angle=i;this.penumbra=r;this.decay=a;this.shadow=new SpotLightShadow}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}dispose(){this.shadow.dispose()}copy(t){super.copy(t);this.distance=t.distance;this.angle=t.angle;this.penumbra=t.penumbra;this.decay=t.decay;this.target=t.target.clone();this.shadow=t.shadow.clone();return this}}SpotLight.prototype.isSpotLight=true;const _projScreenMatrix=new Matrix4$1;const _lightPositionWorld=new Vector3$1;const _lookTarget=new Vector3$1;class PointLightShadow extends LightShadow{constructor(){super(new PerspectiveCamera(90,1,.5,500));this._frameExtents=new Vector2(4,2);this._viewportCount=6;this._viewports=[new Vector4(2,1,1,1),new Vector4(0,1,1,1),new Vector4(3,1,1,1),new Vector4(1,1,1,1),new Vector4(3,0,1,1),new Vector4(1,0,1,1)];this._cubeDirections=[new Vector3$1(1,0,0),new Vector3$1(-1,0,0),new Vector3$1(0,0,1),new Vector3$1(0,0,-1),new Vector3$1(0,1,0),new Vector3$1(0,-1,0)];this._cubeUps=[new Vector3$1(0,1,0),new Vector3$1(0,1,0),new Vector3$1(0,1,0),new Vector3$1(0,1,0),new Vector3$1(0,0,1),new Vector3$1(0,0,-1)]}updateMatrices(t,e=0){const n=this.camera;const i=this.matrix;const r=t.distance||n.far;if(r!==n.far){n.far=r;n.updateProjectionMatrix()}_lightPositionWorld.setFromMatrixPosition(t.matrixWorld);n.position.copy(_lightPositionWorld);_lookTarget.copy(n.position);_lookTarget.add(this._cubeDirections[e]);n.up.copy(this._cubeUps[e]);n.lookAt(_lookTarget);n.updateMatrixWorld();i.makeTranslation(-_lightPositionWorld.x,-_lightPositionWorld.y,-_lightPositionWorld.z);_projScreenMatrix.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse);this._frustum.setFromProjectionMatrix(_projScreenMatrix)}}PointLightShadow.prototype.isPointLightShadow=true;class PointLight extends Light{constructor(t,e,n=0,i=1){super(t,e);this.type="PointLight";this.distance=n;this.decay=i;this.shadow=new PointLightShadow}get power(){return this.intensity*4*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(t){super.copy(t);this.distance=t.distance;this.decay=t.decay;this.shadow=t.shadow.clone();return this}}PointLight.prototype.isPointLight=true;class DirectionalLightShadow extends LightShadow{constructor(){super(new OrthographicCamera(-5,5,5,-5,.5,500))}}DirectionalLightShadow.prototype.isDirectionalLightShadow=true;class DirectionalLight extends Light{constructor(t,e){super(t,e);this.type="DirectionalLight";this.position.copy(Object3D$1.DefaultUp);this.updateMatrix();this.target=new Object3D$1;this.shadow=new DirectionalLightShadow}dispose(){this.shadow.dispose()}copy(t){super.copy(t);this.target=t.target.clone();this.shadow=t.shadow.clone();return this}}DirectionalLight.prototype.isDirectionalLight=true;class AmbientLight extends Light{constructor(t,e){super(t,e);this.type="AmbientLight"}}AmbientLight.prototype.isAmbientLight=true;class RectAreaLight extends Light{constructor(t,e,n=10,i=10){super(t,e);this.type="RectAreaLight";this.width=n;this.height=i}get power(){return this.intensity*this.width*this.height*Math.PI}set power(t){this.intensity=t/(this.width*this.height*Math.PI)}copy(t){super.copy(t);this.width=t.width;this.height=t.height;return this}toJSON(t){const e=super.toJSON(t);e.object.width=this.width;e.object.height=this.height;return e}}RectAreaLight.prototype.isRectAreaLight=true;class SphericalHarmonics3{constructor(){this.coefficients=[];for(let t=0;t<9;t++){this.coefficients.push(new Vector3$1)}}set(t){for(let e=0;e<9;e++){this.coefficients[e].copy(t[e])}return this}zero(){for(let t=0;t<9;t++){this.coefficients[t].set(0,0,0)}return this}getAt(t,e){const n=t.x,i=t.y,r=t.z;const a=this.coefficients;e.copy(a[0]).multiplyScalar(.282095);e.addScaledVector(a[1],.488603*i);e.addScaledVector(a[2],.488603*r);e.addScaledVector(a[3],.488603*n);e.addScaledVector(a[4],1.092548*(n*i));e.addScaledVector(a[5],1.092548*(i*r));e.addScaledVector(a[6],.315392*(3*r*r-1));e.addScaledVector(a[7],1.092548*(n*r));e.addScaledVector(a[8],.546274*(n*n-i*i));return e}getIrradianceAt(t,e){const n=t.x,i=t.y,r=t.z;const a=this.coefficients;e.copy(a[0]).multiplyScalar(.886227);e.addScaledVector(a[1],2*.511664*i);e.addScaledVector(a[2],2*.511664*r);e.addScaledVector(a[3],2*.511664*n);e.addScaledVector(a[4],2*.429043*n*i);e.addScaledVector(a[5],2*.429043*i*r);e.addScaledVector(a[6],.743125*r*r-.247708);e.addScaledVector(a[7],2*.429043*n*r);e.addScaledVector(a[8],.429043*(n*n-i*i));return e}add(t){for(let e=0;e<9;e++){this.coefficients[e].add(t.coefficients[e])}return this}addScaledSH(t,e){for(let n=0;n<9;n++){this.coefficients[n].addScaledVector(t.coefficients[n],e)}return this}scale(t){for(let e=0;e<9;e++){this.coefficients[e].multiplyScalar(t)}return this}lerp(t,e){for(let n=0;n<9;n++){this.coefficients[n].lerp(t.coefficients[n],e)}return this}equals(t){for(let e=0;e<9;e++){if(!this.coefficients[e].equals(t.coefficients[e])){return false}}return true}copy(t){return this.set(t.coefficients)}clone(){return(new this.constructor).copy(this)}fromArray(t,e=0){const n=this.coefficients;for(let i=0;i<9;i++){n[i].fromArray(t,e+i*3)}return this}toArray(t=[],e=0){const n=this.coefficients;for(let i=0;i<9;i++){n[i].toArray(t,e+i*3)}return t}static getBasisAt(t,e){const n=t.x,i=t.y,r=t.z;e[0]=.282095;e[1]=.488603*i;e[2]=.488603*r;e[3]=.488603*n;e[4]=1.092548*n*i;e[5]=1.092548*i*r;e[6]=.315392*(3*r*r-1);e[7]=1.092548*n*r;e[8]=.546274*(n*n-i*i)}}SphericalHarmonics3.prototype.isSphericalHarmonics3=true;class LightProbe extends Light{constructor(t=new SphericalHarmonics3,e=1){super(undefined,e);this.sh=t}copy(t){super.copy(t);this.sh.copy(t.sh);return this}fromJSON(t){this.intensity=t.intensity;this.sh.fromArray(t.sh);return this}toJSON(t){const e=super.toJSON(t);e.object.sh=this.sh.toArray();return e}}LightProbe.prototype.isLightProbe=true;class MaterialLoader extends Loader$1{constructor(t){super(t);this.textures={}}load(t,e,n,i){const r=this;const a=new FileLoader(r.manager);a.setPath(r.path);a.setRequestHeader(r.requestHeader);a.setWithCredentials(r.withCredentials);a.load(t,(function(n){try{e(r.parse(JSON.parse(n)))}catch(e){if(i){i(e)}else{console.error(e)}r.manager.itemError(t)}}),n,i)}parse(t){const e=this.textures;function n(t){if(e[t]===undefined){console.warn("THREE.MaterialLoader: Undefined texture",t)}return e[t]}const i=Material.fromType(t.type);if(t.uuid!==undefined)i.uuid=t.uuid;if(t.name!==undefined)i.name=t.name;if(t.color!==undefined&&i.color!==undefined)i.color.setHex(t.color);if(t.roughness!==undefined)i.roughness=t.roughness;if(t.metalness!==undefined)i.metalness=t.metalness;if(t.sheen!==undefined)i.sheen=t.sheen;if(t.sheenColor!==undefined)i.sheenColor=(new Color$1).setHex(t.sheenColor);if(t.sheenRoughness!==undefined)i.sheenRoughness=t.sheenRoughness;if(t.emissive!==undefined&&i.emissive!==undefined)i.emissive.setHex(t.emissive);if(t.specular!==undefined&&i.specular!==undefined)i.specular.setHex(t.specular);if(t.specularIntensity!==undefined)i.specularIntensity=t.specularIntensity;if(t.specularColor!==undefined&&i.specularColor!==undefined)i.specularColor.setHex(t.specularColor);if(t.shininess!==undefined)i.shininess=t.shininess;if(t.clearcoat!==undefined)i.clearcoat=t.clearcoat;if(t.clearcoatRoughness!==undefined)i.clearcoatRoughness=t.clearcoatRoughness;if(t.transmission!==undefined)i.transmission=t.transmission;if(t.thickness!==undefined)i.thickness=t.thickness;if(t.attenuationDistance!==undefined)i.attenuationDistance=t.attenuationDistance;if(t.attenuationColor!==undefined&&i.attenuationColor!==undefined)i.attenuationColor.setHex(t.attenuationColor);if(t.fog!==undefined)i.fog=t.fog;if(t.flatShading!==undefined)i.flatShading=t.flatShading;if(t.blending!==undefined)i.blending=t.blending;if(t.combine!==undefined)i.combine=t.combine;if(t.side!==undefined)i.side=t.side;if(t.shadowSide!==undefined)i.shadowSide=t.shadowSide;if(t.opacity!==undefined)i.opacity=t.opacity;if(t.transparent!==undefined)i.transparent=t.transparent;if(t.alphaTest!==undefined)i.alphaTest=t.alphaTest;if(t.depthTest!==undefined)i.depthTest=t.depthTest;if(t.depthWrite!==undefined)i.depthWrite=t.depthWrite;if(t.colorWrite!==undefined)i.colorWrite=t.colorWrite;if(t.stencilWrite!==undefined)i.stencilWrite=t.stencilWrite;if(t.stencilWriteMask!==undefined)i.stencilWriteMask=t.stencilWriteMask;if(t.stencilFunc!==undefined)i.stencilFunc=t.stencilFunc;if(t.stencilRef!==undefined)i.stencilRef=t.stencilRef;if(t.stencilFuncMask!==undefined)i.stencilFuncMask=t.stencilFuncMask;if(t.stencilFail!==undefined)i.stencilFail=t.stencilFail;if(t.stencilZFail!==undefined)i.stencilZFail=t.stencilZFail;if(t.stencilZPass!==undefined)i.stencilZPass=t.stencilZPass;if(t.wireframe!==undefined)i.wireframe=t.wireframe;if(t.wireframeLinewidth!==undefined)i.wireframeLinewidth=t.wireframeLinewidth;if(t.wireframeLinecap!==undefined)i.wireframeLinecap=t.wireframeLinecap;if(t.wireframeLinejoin!==undefined)i.wireframeLinejoin=t.wireframeLinejoin;if(t.rotation!==undefined)i.rotation=t.rotation;if(t.linewidth!==1)i.linewidth=t.linewidth;if(t.dashSize!==undefined)i.dashSize=t.dashSize;if(t.gapSize!==undefined)i.gapSize=t.gapSize;if(t.scale!==undefined)i.scale=t.scale;if(t.polygonOffset!==undefined)i.polygonOffset=t.polygonOffset;if(t.polygonOffsetFactor!==undefined)i.polygonOffsetFactor=t.polygonOffsetFactor;if(t.polygonOffsetUnits!==undefined)i.polygonOffsetUnits=t.polygonOffsetUnits;if(t.dithering!==undefined)i.dithering=t.dithering;if(t.alphaToCoverage!==undefined)i.alphaToCoverage=t.alphaToCoverage;if(t.premultipliedAlpha!==undefined)i.premultipliedAlpha=t.premultipliedAlpha;if(t.visible!==undefined)i.visible=t.visible;if(t.toneMapped!==undefined)i.toneMapped=t.toneMapped;if(t.userData!==undefined)i.userData=t.userData;if(t.vertexColors!==undefined){if(typeof t.vertexColors==="number"){i.vertexColors=t.vertexColors>0?true:false}else{i.vertexColors=t.vertexColors}}if(t.uniforms!==undefined){for(const e in t.uniforms){const r=t.uniforms[e];i.uniforms[e]={};switch(r.type){case"t":i.uniforms[e].value=n(r.value);break;case"c":i.uniforms[e].value=(new Color$1).setHex(r.value);break;case"v2":i.uniforms[e].value=(new Vector2).fromArray(r.value);break;case"v3":i.uniforms[e].value=(new Vector3$1).fromArray(r.value);break;case"v4":i.uniforms[e].value=(new Vector4).fromArray(r.value);break;case"m3":i.uniforms[e].value=(new Matrix3).fromArray(r.value);break;case"m4":i.uniforms[e].value=(new Matrix4$1).fromArray(r.value);break;default:i.uniforms[e].value=r.value}}}if(t.defines!==undefined)i.defines=t.defines;if(t.vertexShader!==undefined)i.vertexShader=t.vertexShader;if(t.fragmentShader!==undefined)i.fragmentShader=t.fragmentShader;if(t.extensions!==undefined){for(const e in t.extensions){i.extensions[e]=t.extensions[e]}}if(t.shading!==undefined)i.flatShading=t.shading===1;if(t.size!==undefined)i.size=t.size;if(t.sizeAttenuation!==undefined)i.sizeAttenuation=t.sizeAttenuation;if(t.map!==undefined)i.map=n(t.map);if(t.matcap!==undefined)i.matcap=n(t.matcap);if(t.alphaMap!==undefined)i.alphaMap=n(t.alphaMap);if(t.bumpMap!==undefined)i.bumpMap=n(t.bumpMap);if(t.bumpScale!==undefined)i.bumpScale=t.bumpScale;if(t.normalMap!==undefined)i.normalMap=n(t.normalMap);if(t.normalMapType!==undefined)i.normalMapType=t.normalMapType;if(t.normalScale!==undefined){let e=t.normalScale;if(Array.isArray(e)===false){e=[e,e]}i.normalScale=(new Vector2).fromArray(e)}if(t.displacementMap!==undefined)i.displacementMap=n(t.displacementMap);if(t.displacementScale!==undefined)i.displacementScale=t.displacementScale;if(t.displacementBias!==undefined)i.displacementBias=t.displacementBias;if(t.roughnessMap!==undefined)i.roughnessMap=n(t.roughnessMap);if(t.metalnessMap!==undefined)i.metalnessMap=n(t.metalnessMap);if(t.emissiveMap!==undefined)i.emissiveMap=n(t.emissiveMap);if(t.emissiveIntensity!==undefined)i.emissiveIntensity=t.emissiveIntensity;if(t.specularMap!==undefined)i.specularMap=n(t.specularMap);if(t.specularIntensityMap!==undefined)i.specularIntensityMap=n(t.specularIntensityMap);if(t.specularColorMap!==undefined)i.specularColorMap=n(t.specularColorMap);if(t.envMap!==undefined)i.envMap=n(t.envMap);if(t.envMapIntensity!==undefined)i.envMapIntensity=t.envMapIntensity;if(t.reflectivity!==undefined)i.reflectivity=t.reflectivity;if(t.refractionRatio!==undefined)i.refractionRatio=t.refractionRatio;if(t.lightMap!==undefined)i.lightMap=n(t.lightMap);if(t.lightMapIntensity!==undefined)i.lightMapIntensity=t.lightMapIntensity;if(t.aoMap!==undefined)i.aoMap=n(t.aoMap);if(t.aoMapIntensity!==undefined)i.aoMapIntensity=t.aoMapIntensity;if(t.gradientMap!==undefined)i.gradientMap=n(t.gradientMap);if(t.clearcoatMap!==undefined)i.clearcoatMap=n(t.clearcoatMap);if(t.clearcoatRoughnessMap!==undefined)i.clearcoatRoughnessMap=n(t.clearcoatRoughnessMap);if(t.clearcoatNormalMap!==undefined)i.clearcoatNormalMap=n(t.clearcoatNormalMap);if(t.clearcoatNormalScale!==undefined)i.clearcoatNormalScale=(new Vector2).fromArray(t.clearcoatNormalScale);if(t.transmissionMap!==undefined)i.transmissionMap=n(t.transmissionMap);if(t.thicknessMap!==undefined)i.thicknessMap=n(t.thicknessMap);if(t.sheenColorMap!==undefined)i.sheenColorMap=n(t.sheenColorMap);if(t.sheenRoughnessMap!==undefined)i.sheenRoughnessMap=n(t.sheenRoughnessMap);return i}setTextures(t){this.textures=t;return this}}class LoaderUtils$1{static decodeText(t){if(typeof TextDecoder!=="undefined"){return(new TextDecoder).decode(t)}let e="";for(let n=0,i=t.length;n<i;n++){e+=String.fromCharCode(t[n])}try{return decodeURIComponent(escape(e))}catch(t){return e}}static extractUrlBase(t){const e=t.lastIndexOf("/");if(e===-1)return"./";return t.slice(0,e+1)}static resolveURL(t,e){if(typeof t!=="string"||t==="")return"";if(/^https?:\/\//i.test(e)&&/^\//.test(t)){e=e.replace(/(^https?:\/\/[^\/]+).*/i,"$1")}if(/^(https?:)?\/\//i.test(t))return t;if(/^data:.*,.*$/i.test(t))return t;if(/^blob:.*$/i.test(t))return t;return e+t}}class InstancedBufferGeometry extends BufferGeometry$1{constructor(){super();this.type="InstancedBufferGeometry";this.instanceCount=Infinity}copy(t){super.copy(t);this.instanceCount=t.instanceCount;return this}clone(){return(new this.constructor).copy(this)}toJSON(){const t=super.toJSON(this);t.instanceCount=this.instanceCount;t.isInstancedBufferGeometry=true;return t}}InstancedBufferGeometry.prototype.isInstancedBufferGeometry=true;class BufferGeometryLoader extends Loader$1{constructor(t){super(t)}load(t,e,n,i){const r=this;const a=new FileLoader(r.manager);a.setPath(r.path);a.setRequestHeader(r.requestHeader);a.setWithCredentials(r.withCredentials);a.load(t,(function(n){try{e(r.parse(JSON.parse(n)))}catch(e){if(i){i(e)}else{console.error(e)}r.manager.itemError(t)}}),n,i)}parse(t){const e={};const n={};function i(t,n){if(e[n]!==undefined)return e[n];const i=t.interleavedBuffers;const a=i[n];const s=r(t,a.buffer);const o=getTypedArray(a.type,s);const l=new InterleavedBuffer(o,a.stride);l.uuid=a.uuid;e[n]=l;return l}function r(t,e){if(n[e]!==undefined)return n[e];const i=t.arrayBuffers;const r=i[e];const a=new Uint32Array(r).buffer;n[e]=a;return a}const a=t.isInstancedBufferGeometry?new InstancedBufferGeometry:new BufferGeometry$1;const s=t.data.index;if(s!==undefined){const t=getTypedArray(s.type,s.array);a.setIndex(new BufferAttribute(t,1))}const o=t.data.attributes;for(const e in o){const n=o[e];let r;if(n.isInterleavedBufferAttribute){const e=i(t.data,n.data);r=new InterleavedBufferAttribute(e,n.itemSize,n.offset,n.normalized)}else{const t=getTypedArray(n.type,n.array);const e=n.isInstancedBufferAttribute?InstancedBufferAttribute:BufferAttribute;r=new e(t,n.itemSize,n.normalized)}if(n.name!==undefined)r.name=n.name;if(n.usage!==undefined)r.setUsage(n.usage);if(n.updateRange!==undefined){r.updateRange.offset=n.updateRange.offset;r.updateRange.count=n.updateRange.count}a.setAttribute(e,r)}const l=t.data.morphAttributes;if(l){for(const e in l){const n=l[e];const r=[];for(let e=0,a=n.length;e<a;e++){const a=n[e];let s;if(a.isInterleavedBufferAttribute){const e=i(t.data,a.data);s=new InterleavedBufferAttribute(e,a.itemSize,a.offset,a.normalized)}else{const t=getTypedArray(a.type,a.array);s=new BufferAttribute(t,a.itemSize,a.normalized)}if(a.name!==undefined)s.name=a.name;r.push(s)}a.morphAttributes[e]=r}}const c=t.data.morphTargetsRelative;if(c){a.morphTargetsRelative=true}const u=t.data.groups||t.data.drawcalls||t.data.offsets;if(u!==undefined){for(let t=0,e=u.length;t!==e;++t){const e=u[t];a.addGroup(e.start,e.count,e.materialIndex)}}const h=t.data.boundingSphere;if(h!==undefined){const t=new Vector3$1;if(h.center!==undefined){t.fromArray(h.center)}a.boundingSphere=new Sphere(t,h.radius)}if(t.name)a.name=t.name;if(t.userData)a.userData=t.userData;return a}}class ObjectLoader extends Loader$1{constructor(t){super(t)}load(t,e,n,i){const r=this;const a=this.path===""?LoaderUtils$1.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||a;const s=new FileLoader(this.manager);s.setPath(this.path);s.setRequestHeader(this.requestHeader);s.setWithCredentials(this.withCredentials);s.load(t,(function(n){let a=null;try{a=JSON.parse(n)}catch(e){if(i!==undefined)i(e);console.error("THREE:ObjectLoader: Can't parse "+t+".",e.message);return}const s=a.metadata;if(s===undefined||s.type===undefined||s.type.toLowerCase()==="geometry"){console.error("THREE.ObjectLoader: Can't load "+t);return}r.parse(a,e)}),n,i)}async loadAsync(t,e){const n=this;const i=this.path===""?LoaderUtils$1.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||i;const r=new FileLoader(this.manager);r.setPath(this.path);r.setRequestHeader(this.requestHeader);r.setWithCredentials(this.withCredentials);const a=await r.loadAsync(t,e);const s=JSON.parse(a);const o=s.metadata;if(o===undefined||o.type===undefined||o.type.toLowerCase()==="geometry"){throw new Error("THREE.ObjectLoader: Can't load "+t)}return await n.parseAsync(s)}parse(t,e){const n=this.parseAnimations(t.animations);const i=this.parseShapes(t.shapes);const r=this.parseGeometries(t.geometries,i);const a=this.parseImages(t.images,(function(){if(e!==undefined)e(l)}));const s=this.parseTextures(t.textures,a);const o=this.parseMaterials(t.materials,s);const l=this.parseObject(t.object,r,o,s,n);const c=this.parseSkeletons(t.skeletons,l);this.bindSkeletons(l,c);if(e!==undefined){let t=false;for(const e in a){if(a[e]instanceof HTMLImageElement){t=true;break}}if(t===false)e(l)}return l}async parseAsync(t){const e=this.parseAnimations(t.animations);const n=this.parseShapes(t.shapes);const i=this.parseGeometries(t.geometries,n);const r=await this.parseImagesAsync(t.images);const a=this.parseTextures(t.textures,r);const s=this.parseMaterials(t.materials,a);const o=this.parseObject(t.object,i,s,a,e);const l=this.parseSkeletons(t.skeletons,o);this.bindSkeletons(o,l);return o}parseShapes(t){const e={};if(t!==undefined){for(let n=0,i=t.length;n<i;n++){const i=(new Shape).fromJSON(t[n]);e[i.uuid]=i}}return e}parseSkeletons(t,e){const n={};const i={};e.traverse((function(t){if(t.isBone)i[t.uuid]=t}));if(t!==undefined){for(let e=0,r=t.length;e<r;e++){const r=(new Skeleton).fromJSON(t[e],i);n[r.uuid]=r}}return n}parseGeometries(t,e){const n={};if(t!==undefined){const i=new BufferGeometryLoader;for(let r=0,a=t.length;r<a;r++){let a;const s=t[r];switch(s.type){case"BufferGeometry":case"InstancedBufferGeometry":a=i.parse(s);break;case"Geometry":console.error("THREE.ObjectLoader: The legacy Geometry type is no longer supported.");break;default:if(s.type in Geometries){a=Geometries[s.type].fromJSON(s,e)}else{console.warn(`THREE.ObjectLoader: Unsupported geometry type "${s.type}"`)}}a.uuid=s.uuid;if(s.name!==undefined)a.name=s.name;if(a.isBufferGeometry===true&&s.userData!==undefined)a.userData=s.userData;n[s.uuid]=a}}return n}parseMaterials(t,e){const n={};const i={};if(t!==undefined){const r=new MaterialLoader;r.setTextures(e);for(let e=0,a=t.length;e<a;e++){const a=t[e];if(a.type==="MultiMaterial"){const t=[];for(let e=0;e<a.materials.length;e++){const i=a.materials[e];if(n[i.uuid]===undefined){n[i.uuid]=r.parse(i)}t.push(n[i.uuid])}i[a.uuid]=t}else{if(n[a.uuid]===undefined){n[a.uuid]=r.parse(a)}i[a.uuid]=n[a.uuid]}}}return i}parseAnimations(t){const e={};if(t!==undefined){for(let n=0;n<t.length;n++){const i=t[n];const r=AnimationClip.parse(i);e[r.uuid]=r}}return e}parseImages(t,e){const n=this;const i={};let r;function a(t){n.manager.itemStart(t);return r.load(t,(function(){n.manager.itemEnd(t)}),undefined,(function(){n.manager.itemError(t);n.manager.itemEnd(t)}))}function s(t){if(typeof t==="string"){const e=t;const i=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(e)?e:n.resourcePath+e;return a(i)}else{if(t.data){return{data:getTypedArray(t.type,t.data),width:t.width,height:t.height}}else{return null}}}if(t!==undefined&&t.length>0){const n=new LoadingManager(e);r=new ImageLoader(n);r.setCrossOrigin(this.crossOrigin);for(let e=0,n=t.length;e<n;e++){const n=t[e];const r=n.url;if(Array.isArray(r)){const t=[];for(let e=0,n=r.length;e<n;e++){const n=r[e];const i=s(n);if(i!==null){if(i instanceof HTMLImageElement){t.push(i)}else{t.push(new DataTexture(i.data,i.width,i.height))}}}i[n.uuid]=new Source(t)}else{const t=s(n.url);i[n.uuid]=new Source(t)}}}return i}async parseImagesAsync(t){const e=this;const n={};let i;async function r(t){if(typeof t==="string"){const n=t;const r=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(n)?n:e.resourcePath+n;return await i.loadAsync(r)}else{if(t.data){return{data:getTypedArray(t.type,t.data),width:t.width,height:t.height}}else{return null}}}if(t!==undefined&&t.length>0){i=new ImageLoader(this.manager);i.setCrossOrigin(this.crossOrigin);for(let e=0,i=t.length;e<i;e++){const i=t[e];const a=i.url;if(Array.isArray(a)){const t=[];for(let e=0,n=a.length;e<n;e++){const n=a[e];const i=await r(n);if(i!==null){if(i instanceof HTMLImageElement){t.push(i)}else{t.push(new DataTexture(i.data,i.width,i.height))}}}n[i.uuid]=new Source(t)}else{const t=await r(i.url);n[i.uuid]=new Source(t)}}}return n}parseTextures(t,e){function n(t,e){if(typeof t==="number")return t;console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",t);return e[t]}const i={};if(t!==undefined){for(let r=0,a=t.length;r<a;r++){const a=t[r];if(a.image===undefined){console.warn('THREE.ObjectLoader: No "image" specified for',a.uuid)}if(e[a.image]===undefined){console.warn("THREE.ObjectLoader: Undefined image",a.image)}const s=e[a.image];const o=s.data;let l;if(Array.isArray(o)){l=new CubeTexture;if(o.length===6)l.needsUpdate=true}else{if(o&&o.data){l=new DataTexture}else{l=new Texture}if(o)l.needsUpdate=true}l.source=s;l.uuid=a.uuid;if(a.name!==undefined)l.name=a.name;if(a.mapping!==undefined)l.mapping=n(a.mapping,TEXTURE_MAPPING);if(a.offset!==undefined)l.offset.fromArray(a.offset);if(a.repeat!==undefined)l.repeat.fromArray(a.repeat);if(a.center!==undefined)l.center.fromArray(a.center);if(a.rotation!==undefined)l.rotation=a.rotation;if(a.wrap!==undefined){l.wrapS=n(a.wrap[0],TEXTURE_WRAPPING);l.wrapT=n(a.wrap[1],TEXTURE_WRAPPING)}if(a.format!==undefined)l.format=a.format;if(a.type!==undefined)l.type=a.type;if(a.encoding!==undefined)l.encoding=a.encoding;if(a.minFilter!==undefined)l.minFilter=n(a.minFilter,TEXTURE_FILTER);if(a.magFilter!==undefined)l.magFilter=n(a.magFilter,TEXTURE_FILTER);if(a.anisotropy!==undefined)l.anisotropy=a.anisotropy;if(a.flipY!==undefined)l.flipY=a.flipY;if(a.premultiplyAlpha!==undefined)l.premultiplyAlpha=a.premultiplyAlpha;if(a.unpackAlignment!==undefined)l.unpackAlignment=a.unpackAlignment;if(a.userData!==undefined)l.userData=a.userData;i[a.uuid]=l}}return i}parseObject(t,e,n,i,r){let a;function s(t){if(e[t]===undefined){console.warn("THREE.ObjectLoader: Undefined geometry",t)}return e[t]}function o(t){if(t===undefined)return undefined;if(Array.isArray(t)){const e=[];for(let i=0,r=t.length;i<r;i++){const r=t[i];if(n[r]===undefined){console.warn("THREE.ObjectLoader: Undefined material",r)}e.push(n[r])}return e}if(n[t]===undefined){console.warn("THREE.ObjectLoader: Undefined material",t)}return n[t]}function l(t){if(i[t]===undefined){console.warn("THREE.ObjectLoader: Undefined texture",t)}return i[t]}let c,u;switch(t.type){case"Scene":a=new Scene;if(t.background!==undefined){if(Number.isInteger(t.background)){a.background=new Color$1(t.background)}else{a.background=l(t.background)}}if(t.environment!==undefined){a.environment=l(t.environment)}if(t.fog!==undefined){if(t.fog.type==="Fog"){a.fog=new Fog(t.fog.color,t.fog.near,t.fog.far)}else if(t.fog.type==="FogExp2"){a.fog=new FogExp2(t.fog.color,t.fog.density)}}break;case"PerspectiveCamera":a=new PerspectiveCamera(t.fov,t.aspect,t.near,t.far);if(t.focus!==undefined)a.focus=t.focus;if(t.zoom!==undefined)a.zoom=t.zoom;if(t.filmGauge!==undefined)a.filmGauge=t.filmGauge;if(t.filmOffset!==undefined)a.filmOffset=t.filmOffset;if(t.view!==undefined)a.view=Object.assign({},t.view);break;case"OrthographicCamera":a=new OrthographicCamera(t.left,t.right,t.top,t.bottom,t.near,t.far);if(t.zoom!==undefined)a.zoom=t.zoom;if(t.view!==undefined)a.view=Object.assign({},t.view);break;case"AmbientLight":a=new AmbientLight(t.color,t.intensity);break;case"DirectionalLight":a=new DirectionalLight(t.color,t.intensity);break;case"PointLight":a=new PointLight(t.color,t.intensity,t.distance,t.decay);break;case"RectAreaLight":a=new RectAreaLight(t.color,t.intensity,t.width,t.height);break;case"SpotLight":a=new SpotLight(t.color,t.intensity,t.distance,t.angle,t.penumbra,t.decay);break;case"HemisphereLight":a=new HemisphereLight(t.color,t.groundColor,t.intensity);break;case"LightProbe":a=(new LightProbe).fromJSON(t);break;case"SkinnedMesh":c=s(t.geometry);u=o(t.material);a=new SkinnedMesh(c,u);if(t.bindMode!==undefined)a.bindMode=t.bindMode;if(t.bindMatrix!==undefined)a.bindMatrix.fromArray(t.bindMatrix);if(t.skeleton!==undefined)a.skeleton=t.skeleton;break;case"Mesh":c=s(t.geometry);u=o(t.material);a=new Mesh$1(c,u);break;case"InstancedMesh":c=s(t.geometry);u=o(t.material);const e=t.count;const n=t.instanceMatrix;const i=t.instanceColor;a=new InstancedMesh(c,u,e);a.instanceMatrix=new InstancedBufferAttribute(new Float32Array(n.array),16);if(i!==undefined)a.instanceColor=new InstancedBufferAttribute(new Float32Array(i.array),i.itemSize);break;case"LOD":a=new LOD;break;case"Line":a=new Line$1(s(t.geometry),o(t.material));break;case"LineLoop":a=new LineLoop(s(t.geometry),o(t.material));break;case"LineSegments":a=new LineSegments(s(t.geometry),o(t.material));break;case"PointCloud":case"Points":a=new Points(s(t.geometry),o(t.material));break;case"Sprite":a=new Sprite(o(t.material));break;case"Group":a=new Group;break;case"Bone":a=new Bone;break;default:a=new Object3D$1}a.uuid=t.uuid;if(t.name!==undefined)a.name=t.name;if(t.matrix!==undefined){a.matrix.fromArray(t.matrix);if(t.matrixAutoUpdate!==undefined)a.matrixAutoUpdate=t.matrixAutoUpdate;if(a.matrixAutoUpdate)a.matrix.decompose(a.position,a.quaternion,a.scale)}else{if(t.position!==undefined)a.position.fromArray(t.position);if(t.rotation!==undefined)a.rotation.fromArray(t.rotation);if(t.quaternion!==undefined)a.quaternion.fromArray(t.quaternion);if(t.scale!==undefined)a.scale.fromArray(t.scale)}if(t.castShadow!==undefined)a.castShadow=t.castShadow;if(t.receiveShadow!==undefined)a.receiveShadow=t.receiveShadow;if(t.shadow){if(t.shadow.bias!==undefined)a.shadow.bias=t.shadow.bias;if(t.shadow.normalBias!==undefined)a.shadow.normalBias=t.shadow.normalBias;if(t.shadow.radius!==undefined)a.shadow.radius=t.shadow.radius;if(t.shadow.mapSize!==undefined)a.shadow.mapSize.fromArray(t.shadow.mapSize);if(t.shadow.camera!==undefined)a.shadow.camera=this.parseObject(t.shadow.camera)}if(t.visible!==undefined)a.visible=t.visible;if(t.frustumCulled!==undefined)a.frustumCulled=t.frustumCulled;if(t.renderOrder!==undefined)a.renderOrder=t.renderOrder;if(t.userData!==undefined)a.userData=t.userData;if(t.layers!==undefined)a.layers.mask=t.layers;if(t.children!==undefined){const s=t.children;for(let t=0;t<s.length;t++){a.add(this.parseObject(s[t],e,n,i,r))}}if(t.animations!==undefined){const e=t.animations;for(let t=0;t<e.length;t++){const n=e[t];a.animations.push(r[n])}}if(t.type==="LOD"){if(t.autoUpdate!==undefined)a.autoUpdate=t.autoUpdate;const e=t.levels;for(let t=0;t<e.length;t++){const n=e[t];const i=a.getObjectByProperty("uuid",n.object);if(i!==undefined){a.addLevel(i,n.distance)}}}return a}bindSkeletons(t,e){if(Object.keys(e).length===0)return;t.traverse((function(t){if(t.isSkinnedMesh===true&&t.skeleton!==undefined){const n=e[t.skeleton];if(n===undefined){console.warn("THREE.ObjectLoader: No skeleton found with UUID:",t.skeleton)}else{t.bind(n,t.bindMatrix)}}}))}setTexturePath(t){console.warn("THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().");return this.setResourcePath(t)}}const TEXTURE_MAPPING={UVMapping:UVMapping,CubeReflectionMapping:CubeReflectionMapping,CubeRefractionMapping:CubeRefractionMapping,EquirectangularReflectionMapping:EquirectangularReflectionMapping,EquirectangularRefractionMapping:EquirectangularRefractionMapping,CubeUVReflectionMapping:CubeUVReflectionMapping,CubeUVRefractionMapping:CubeUVRefractionMapping};const TEXTURE_WRAPPING={RepeatWrapping:RepeatWrapping,ClampToEdgeWrapping:ClampToEdgeWrapping,MirroredRepeatWrapping:MirroredRepeatWrapping};const TEXTURE_FILTER={NearestFilter:NearestFilter,NearestMipmapNearestFilter:NearestMipmapNearestFilter,NearestMipmapLinearFilter:NearestMipmapLinearFilter,LinearFilter:LinearFilter,LinearMipmapNearestFilter:LinearMipmapNearestFilter,LinearMipmapLinearFilter:LinearMipmapLinearFilter};class ImageBitmapLoader extends Loader$1{constructor(t){super(t);if(typeof createImageBitmap==="undefined"){console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported.")}if(typeof fetch==="undefined"){console.warn("THREE.ImageBitmapLoader: fetch() not supported.")}this.options={premultiplyAlpha:"none"}}setOptions(t){this.options=t;return this}load(t,e,n,i){if(t===undefined)t="";if(this.path!==undefined)t=this.path+t;t=this.manager.resolveURL(t);const r=this;const a=Cache.get(t);if(a!==undefined){r.manager.itemStart(t);setTimeout((function(){if(e)e(a);r.manager.itemEnd(t)}),0);return a}const s={};s.credentials=this.crossOrigin==="anonymous"?"same-origin":"include";s.headers=this.requestHeader;fetch(t,s).then((function(t){return t.blob()})).then((function(t){return createImageBitmap(t,Object.assign(r.options,{colorSpaceConversion:"none"}))})).then((function(n){Cache.add(t,n);if(e)e(n);r.manager.itemEnd(t)})).catch((function(e){if(i)i(e);r.manager.itemError(t);r.manager.itemEnd(t)}));r.manager.itemStart(t)}}ImageBitmapLoader.prototype.isImageBitmapLoader=true;let _context;const AudioContext={getContext:function(){if(_context===undefined){_context=new(window.AudioContext||window.webkitAudioContext)}return _context},setContext:function(t){_context=t}};class AudioLoader extends Loader$1{constructor(t){super(t)}load(t,e,n,i){const r=this;const a=new FileLoader(this.manager);a.setResponseType("arraybuffer");a.setPath(this.path);a.setRequestHeader(this.requestHeader);a.setWithCredentials(this.withCredentials);a.load(t,(function(n){try{const t=n.slice(0);const i=AudioContext.getContext();i.decodeAudioData(t,(function(t){e(t)}))}catch(e){if(i){i(e)}else{console.error(e)}r.manager.itemError(t)}}),n,i)}}class HemisphereLightProbe extends LightProbe{constructor(t,e,n=1){super(undefined,n);const i=(new Color$1).set(t);const r=(new Color$1).set(e);const a=new Vector3$1(i.r,i.g,i.b);const s=new Vector3$1(r.r,r.g,r.b);const o=Math.sqrt(Math.PI);const l=o*Math.sqrt(.75);this.sh.coefficients[0].copy(a).add(s).multiplyScalar(o);this.sh.coefficients[1].copy(a).sub(s).multiplyScalar(l)}}HemisphereLightProbe.prototype.isHemisphereLightProbe=true;class AmbientLightProbe extends LightProbe{constructor(t,e=1){super(undefined,e);const n=(new Color$1).set(t);this.sh.coefficients[0].set(n.r,n.g,n.b).multiplyScalar(2*Math.sqrt(Math.PI))}}AmbientLightProbe.prototype.isAmbientLightProbe=true;const _eyeRight=new Matrix4$1;const _eyeLeft=new Matrix4$1;const _projectionMatrix=new Matrix4$1;class StereoCamera{constructor(){this.type="StereoCamera";this.aspect=1;this.eyeSep=.064;this.cameraL=new PerspectiveCamera;this.cameraL.layers.enable(1);this.cameraL.matrixAutoUpdate=false;this.cameraR=new PerspectiveCamera;this.cameraR.layers.enable(2);this.cameraR.matrixAutoUpdate=false;this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(t){const e=this._cache;const n=e.focus!==t.focus||e.fov!==t.fov||e.aspect!==t.aspect*this.aspect||e.near!==t.near||e.far!==t.far||e.zoom!==t.zoom||e.eyeSep!==this.eyeSep;if(n){e.focus=t.focus;e.fov=t.fov;e.aspect=t.aspect*this.aspect;e.near=t.near;e.far=t.far;e.zoom=t.zoom;e.eyeSep=this.eyeSep;_projectionMatrix.copy(t.projectionMatrix);const n=e.eyeSep/2;const i=n*e.near/e.focus;const r=e.near*Math.tan(DEG2RAD*e.fov*.5)/e.zoom;let a,s;_eyeLeft.elements[12]=-n;_eyeRight.elements[12]=n;a=-r*e.aspect+i;s=r*e.aspect+i;_projectionMatrix.elements[0]=2*e.near/(s-a);_projectionMatrix.elements[8]=(s+a)/(s-a);this.cameraL.projectionMatrix.copy(_projectionMatrix);a=-r*e.aspect-i;s=r*e.aspect-i;_projectionMatrix.elements[0]=2*e.near/(s-a);_projectionMatrix.elements[8]=(s+a)/(s-a);this.cameraR.projectionMatrix.copy(_projectionMatrix)}this.cameraL.matrixWorld.copy(t.matrixWorld).multiply(_eyeLeft);this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(_eyeRight)}}class Clock{constructor(t=true){this.autoStart=t;this.startTime=0;this.oldTime=0;this.elapsedTime=0;this.running=false}start(){this.startTime=now();this.oldTime=this.startTime;this.elapsedTime=0;this.running=true}stop(){this.getElapsedTime();this.running=false;this.autoStart=false}getElapsedTime(){this.getDelta();return this.elapsedTime}getDelta(){let t=0;if(this.autoStart&&!this.running){this.start();return 0}if(this.running){const e=now();t=(e-this.oldTime)/1e3;this.oldTime=e;this.elapsedTime+=t}return t}}function now(){return(typeof performance==="undefined"?Date:performance).now()}const _position$1=new Vector3$1;const _quaternion$1=new Quaternion$1;const _scale$1=new Vector3$1;const _orientation$1=new Vector3$1;class AudioListener extends Object3D$1{constructor(){super();this.type="AudioListener";this.context=AudioContext.getContext();this.gain=this.context.createGain();this.gain.connect(this.context.destination);this.filter=null;this.timeDelta=0;this._clock=new Clock}getInput(){return this.gain}removeFilter(){if(this.filter!==null){this.gain.disconnect(this.filter);this.filter.disconnect(this.context.destination);this.gain.connect(this.context.destination);this.filter=null}return this}getFilter(){return this.filter}setFilter(t){if(this.filter!==null){this.gain.disconnect(this.filter);this.filter.disconnect(this.context.destination)}else{this.gain.disconnect(this.context.destination)}this.filter=t;this.gain.connect(this.filter);this.filter.connect(this.context.destination);return this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(t){this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01);return this}updateMatrixWorld(t){super.updateMatrixWorld(t);const e=this.context.listener;const n=this.up;this.timeDelta=this._clock.getDelta();this.matrixWorld.decompose(_position$1,_quaternion$1,_scale$1);_orientation$1.set(0,0,-1).applyQuaternion(_quaternion$1);if(e.positionX){const t=this.context.currentTime+this.timeDelta;e.positionX.linearRampToValueAtTime(_position$1.x,t);e.positionY.linearRampToValueAtTime(_position$1.y,t);e.positionZ.linearRampToValueAtTime(_position$1.z,t);e.forwardX.linearRampToValueAtTime(_orientation$1.x,t);e.forwardY.linearRampToValueAtTime(_orientation$1.y,t);e.forwardZ.linearRampToValueAtTime(_orientation$1.z,t);e.upX.linearRampToValueAtTime(n.x,t);e.upY.linearRampToValueAtTime(n.y,t);e.upZ.linearRampToValueAtTime(n.z,t)}else{e.setPosition(_position$1.x,_position$1.y,_position$1.z);e.setOrientation(_orientation$1.x,_orientation$1.y,_orientation$1.z,n.x,n.y,n.z)}}}class Audio extends Object3D$1{constructor(t){super();this.type="Audio";this.listener=t;this.context=t.context;this.gain=this.context.createGain();this.gain.connect(t.getInput());this.autoplay=false;this.buffer=null;this.detune=0;this.loop=false;this.loopStart=0;this.loopEnd=0;this.offset=0;this.duration=undefined;this.playbackRate=1;this.isPlaying=false;this.hasPlaybackControl=true;this.source=null;this.sourceType="empty";this._startedAt=0;this._progress=0;this._connected=false;this.filters=[]}getOutput(){return this.gain}setNodeSource(t){this.hasPlaybackControl=false;this.sourceType="audioNode";this.source=t;this.connect();return this}setMediaElementSource(t){this.hasPlaybackControl=false;this.sourceType="mediaNode";this.source=this.context.createMediaElementSource(t);this.connect();return this}setMediaStreamSource(t){this.hasPlaybackControl=false;this.sourceType="mediaStreamNode";this.source=this.context.createMediaStreamSource(t);this.connect();return this}setBuffer(t){this.buffer=t;this.sourceType="buffer";if(this.autoplay)this.play();return this}play(t=0){if(this.isPlaying===true){console.warn("THREE.Audio: Audio is already playing.");return}if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}this._startedAt=this.context.currentTime+t;const e=this.context.createBufferSource();e.buffer=this.buffer;e.loop=this.loop;e.loopStart=this.loopStart;e.loopEnd=this.loopEnd;e.onended=this.onEnded.bind(this);e.start(this._startedAt,this._progress+this.offset,this.duration);this.isPlaying=true;this.source=e;this.setDetune(this.detune);this.setPlaybackRate(this.playbackRate);return this.connect()}pause(){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}if(this.isPlaying===true){this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate;if(this.loop===true){this._progress=this._progress%(this.duration||this.buffer.duration)}this.source.stop();this.source.onended=null;this.isPlaying=false}return this}stop(){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}this._progress=0;this.source.stop();this.source.onended=null;this.isPlaying=false;return this}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++){this.filters[t-1].connect(this.filters[t])}this.filters[this.filters.length-1].connect(this.getOutput())}else{this.source.connect(this.getOutput())}this._connected=true;return this}disconnect(){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let t=1,e=this.filters.length;t<e;t++){this.filters[t-1].disconnect(this.filters[t])}this.filters[this.filters.length-1].disconnect(this.getOutput())}else{this.source.disconnect(this.getOutput())}this._connected=false;return this}getFilters(){return this.filters}setFilters(t){if(!t)t=[];if(this._connected===true){this.disconnect();this.filters=t.slice();this.connect()}else{this.filters=t.slice()}return this}setDetune(t){this.detune=t;if(this.source.detune===undefined)return;if(this.isPlaying===true){this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01)}return this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(t){return this.setFilters(t?[t]:[])}setPlaybackRate(t){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}this.playbackRate=t;if(this.isPlaying===true){this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01)}return this}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=false}getLoop(){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return false}return this.loop}setLoop(t){if(this.hasPlaybackControl===false){console.warn("THREE.Audio: this Audio has no playback control.");return}this.loop=t;if(this.isPlaying===true){this.source.loop=this.loop}return this}setLoopStart(t){this.loopStart=t;return this}setLoopEnd(t){this.loopEnd=t;return this}getVolume(){return this.gain.gain.value}setVolume(t){this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01);return this}}const _position=new Vector3$1;const _quaternion=new Quaternion$1;const _scale=new Vector3$1;const _orientation=new Vector3$1;class PositionalAudio extends Audio{constructor(t){super(t);this.panner=this.context.createPanner();this.panner.panningModel="HRTF";this.panner.connect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(t){this.panner.refDistance=t;return this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(t){this.panner.rolloffFactor=t;return this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(t){this.panner.distanceModel=t;return this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(t){this.panner.maxDistance=t;return this}setDirectionalCone(t,e,n){this.panner.coneInnerAngle=t;this.panner.coneOuterAngle=e;this.panner.coneOuterGain=n;return this}updateMatrixWorld(t){super.updateMatrixWorld(t);if(this.hasPlaybackControl===true&&this.isPlaying===false)return;this.matrixWorld.decompose(_position,_quaternion,_scale);_orientation.set(0,0,1).applyQuaternion(_quaternion);const e=this.panner;if(e.positionX){const t=this.context.currentTime+this.listener.timeDelta;e.positionX.linearRampToValueAtTime(_position.x,t);e.positionY.linearRampToValueAtTime(_position.y,t);e.positionZ.linearRampToValueAtTime(_position.z,t);e.orientationX.linearRampToValueAtTime(_orientation.x,t);e.orientationY.linearRampToValueAtTime(_orientation.y,t);e.orientationZ.linearRampToValueAtTime(_orientation.z,t)}else{e.setPosition(_position.x,_position.y,_position.z);e.setOrientation(_orientation.x,_orientation.y,_orientation.z)}}}class AudioAnalyser{constructor(t,e=2048){this.analyser=t.context.createAnalyser();this.analyser.fftSize=e;this.data=new Uint8Array(this.analyser.frequencyBinCount);t.getOutput().connect(this.analyser)}getFrequencyData(){this.analyser.getByteFrequencyData(this.data);return this.data}getAverageFrequency(){let t=0;const e=this.getFrequencyData();for(let n=0;n<e.length;n++){t+=e[n]}return t/e.length}}class PropertyMixer{constructor(t,e,n){this.binding=t;this.valueSize=n;let i,r,a;switch(e){case"quaternion":i=this._slerp;r=this._slerpAdditive;a=this._setAdditiveIdentityQuaternion;this.buffer=new Float64Array(n*6);this._workIndex=5;break;case"string":case"bool":i=this._select;r=this._select;a=this._setAdditiveIdentityOther;this.buffer=new Array(n*5);break;default:i=this._lerp;r=this._lerpAdditive;a=this._setAdditiveIdentityNumeric;this.buffer=new Float64Array(n*5)}this._mixBufferRegion=i;this._mixBufferRegionAdditive=r;this._setIdentity=a;this._origIndex=3;this._addIndex=4;this.cumulativeWeight=0;this.cumulativeWeightAdditive=0;this.useCount=0;this.referenceCount=0}accumulate(t,e){const n=this.buffer,i=this.valueSize,r=t*i+i;let a=this.cumulativeWeight;if(a===0){for(let t=0;t!==i;++t){n[r+t]=n[t]}a=e}else{a+=e;const t=e/a;this._mixBufferRegion(n,r,0,t,i)}this.cumulativeWeight=a}accumulateAdditive(t){const e=this.buffer,n=this.valueSize,i=n*this._addIndex;if(this.cumulativeWeightAdditive===0){this._setIdentity()}this._mixBufferRegionAdditive(e,i,0,t,n);this.cumulativeWeightAdditive+=t}apply(t){const e=this.valueSize,n=this.buffer,i=t*e+e,r=this.cumulativeWeight,a=this.cumulativeWeightAdditive,s=this.binding;this.cumulativeWeight=0;this.cumulativeWeightAdditive=0;if(r<1){const t=e*this._origIndex;this._mixBufferRegion(n,i,t,1-r,e)}if(a>0){this._mixBufferRegionAdditive(n,i,this._addIndex*e,1,e)}for(let t=e,r=e+e;t!==r;++t){if(n[t]!==n[t+e]){s.setValue(n,i);break}}}saveOriginalState(){const t=this.binding;const e=this.buffer,n=this.valueSize,i=n*this._origIndex;t.getValue(e,i);for(let t=n,r=i;t!==r;++t){e[t]=e[i+t%n]}this._setIdentity();this.cumulativeWeight=0;this.cumulativeWeightAdditive=0}restoreOriginalState(){const t=this.valueSize*3;this.binding.setValue(this.buffer,t)}_setAdditiveIdentityNumeric(){const t=this._addIndex*this.valueSize;const e=t+this.valueSize;for(let n=t;n<e;n++){this.buffer[n]=0}}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric();this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const t=this._origIndex*this.valueSize;const e=this._addIndex*this.valueSize;for(let n=0;n<this.valueSize;n++){this.buffer[e+n]=this.buffer[t+n]}}_select(t,e,n,i,r){if(i>=.5){for(let i=0;i!==r;++i){t[e+i]=t[n+i]}}}_slerp(t,e,n,i){Quaternion$1.slerpFlat(t,e,t,e,t,n,i)}_slerpAdditive(t,e,n,i,r){const a=this._workIndex*r;Quaternion$1.multiplyQuaternionsFlat(t,a,t,e,t,n);Quaternion$1.slerpFlat(t,e,t,e,t,a,i)}_lerp(t,e,n,i,r){const a=1-i;for(let s=0;s!==r;++s){const r=e+s;t[r]=t[r]*a+t[n+s]*i}}_lerpAdditive(t,e,n,i,r){for(let a=0;a!==r;++a){const r=e+a;t[r]=t[r]+t[n+a]*i}}}const _RESERVED_CHARS_RE="\\[\\]\\.:\\/";const _reservedRe=new RegExp("["+_RESERVED_CHARS_RE+"]","g");const _wordChar="[^"+_RESERVED_CHARS_RE+"]";const _wordCharOrDot="[^"+_RESERVED_CHARS_RE.replace("\\.","")+"]";const _directoryRe=/((?:WC+[\/:])*)/.source.replace("WC",_wordChar);const _nodeRe=/(WCOD+)?/.source.replace("WCOD",_wordCharOrDot);const _objectRe=/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",_wordChar);const _propertyRe=/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",_wordChar);const _trackRe=new RegExp(""+"^"+_directoryRe+_nodeRe+_objectRe+_propertyRe+"$");const _supportedObjectNames=["material","materials","bones"];class Composite{constructor(t,e,n){const i=n||PropertyBinding.parseTrackName(e);this._targetGroup=t;this._bindings=t.subscribe_(e,i)}getValue(t,e){this.bind();const n=this._targetGroup.nCachedObjects_,i=this._bindings[n];if(i!==undefined)i.getValue(t,e)}setValue(t,e){const n=this._bindings;for(let i=this._targetGroup.nCachedObjects_,r=n.length;i!==r;++i){n[i].setValue(t,e)}}bind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e){t[e].bind()}}unbind(){const t=this._bindings;for(let e=this._targetGroup.nCachedObjects_,n=t.length;e!==n;++e){t[e].unbind()}}}class PropertyBinding{constructor(t,e,n){this.path=e;this.parsedPath=n||PropertyBinding.parseTrackName(e);this.node=PropertyBinding.findNode(t,this.parsedPath.nodeName)||t;this.rootNode=t;this.getValue=this._getValue_unbound;this.setValue=this._setValue_unbound}static create(t,e,n){if(!(t&&t.isAnimationObjectGroup)){return new PropertyBinding(t,e,n)}else{return new PropertyBinding.Composite(t,e,n)}}static sanitizeNodeName(t){return t.replace(/\s/g,"_").replace(_reservedRe,"")}static parseTrackName(t){const e=_trackRe.exec(t);if(e===null){throw new Error("PropertyBinding: Cannot parse trackName: "+t)}const n={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]};const i=n.nodeName&&n.nodeName.lastIndexOf(".");if(i!==undefined&&i!==-1){const t=n.nodeName.substring(i+1);if(_supportedObjectNames.indexOf(t)!==-1){n.nodeName=n.nodeName.substring(0,i);n.objectName=t}}if(n.propertyName===null||n.propertyName.length===0){throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t)}return n}static findNode(t,e){if(e===undefined||e===""||e==="."||e===-1||e===t.name||e===t.uuid){return t}if(t.skeleton){const n=t.skeleton.getBoneByName(e);if(n!==undefined){return n}}if(t.children){const n=function(t){for(let i=0;i<t.length;i++){const r=t[i];if(r.name===e||r.uuid===e){return r}const a=n(r.children);if(a)return a}return null};const i=n(t.children);if(i){return i}}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(t,e){t[e]=this.targetObject[this.propertyName]}_getValue_array(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i){t[e++]=n[i]}}_getValue_arrayElement(t,e){t[e]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(t,e){this.resolvedProperty.toArray(t,e)}_setValue_direct(t,e){this.targetObject[this.propertyName]=t[e]}_setValue_direct_setNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e];this.targetObject.needsUpdate=true}_setValue_direct_setMatrixWorldNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e];this.targetObject.matrixWorldNeedsUpdate=true}_setValue_array(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i){n[i]=t[e++]}}_setValue_array_setNeedsUpdate(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i){n[i]=t[e++]}this.targetObject.needsUpdate=true}_setValue_array_setMatrixWorldNeedsUpdate(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i){n[i]=t[e++]}this.targetObject.matrixWorldNeedsUpdate=true}_setValue_arrayElement(t,e){this.resolvedProperty[this.propertyIndex]=t[e]}_setValue_arrayElement_setNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e];this.targetObject.needsUpdate=true}_setValue_arrayElement_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e];this.targetObject.matrixWorldNeedsUpdate=true}_setValue_fromArray(t,e){this.resolvedProperty.fromArray(t,e)}_setValue_fromArray_setNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e);this.targetObject.needsUpdate=true}_setValue_fromArray_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e);this.targetObject.matrixWorldNeedsUpdate=true}_getValue_unbound(t,e){this.bind();this.getValue(t,e)}_setValue_unbound(t,e){this.bind();this.setValue(t,e)}bind(){let t=this.node;const e=this.parsedPath;const n=e.objectName;const i=e.propertyName;let r=e.propertyIndex;if(!t){t=PropertyBinding.findNode(this.rootNode,e.nodeName)||this.rootNode;this.node=t}this.getValue=this._getValue_unavailable;this.setValue=this._setValue_unavailable;if(!t){console.error("THREE.PropertyBinding: Trying to update node for track: "+this.path+" but it wasn't found.");return}if(n){let i=e.objectIndex;switch(n){case"materials":if(!t.material){console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);return}if(!t.material.materials){console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);return}t=t.material.materials;break;case"bones":if(!t.skeleton){console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);return}t=t.skeleton.bones;for(let e=0;e<t.length;e++){if(t[e].name===i){i=e;break}}break;default:if(t[n]===undefined){console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);return}t=t[n]}if(i!==undefined){if(t[i]===undefined){console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);return}t=t[i]}}const a=t[i];if(a===undefined){const n=e.nodeName;console.error("THREE.PropertyBinding: Trying to update property for track: "+n+"."+i+" but it wasn't found.",t);return}let s=this.Versioning.None;this.targetObject=t;if(t.needsUpdate!==undefined){s=this.Versioning.NeedsUpdate}else if(t.matrixWorldNeedsUpdate!==undefined){s=this.Versioning.MatrixWorldNeedsUpdate}let o=this.BindingType.Direct;if(r!==undefined){if(i==="morphTargetInfluences"){if(!t.geometry){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);return}if(t.geometry.isBufferGeometry){if(!t.geometry.morphAttributes){console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);return}if(t.morphTargetDictionary[r]!==undefined){r=t.morphTargetDictionary[r]}}else{console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE.Geometry. Use THREE.BufferGeometry instead.",this);return}}o=this.BindingType.ArrayElement;this.resolvedProperty=a;this.propertyIndex=r}else if(a.fromArray!==undefined&&a.toArray!==undefined){o=this.BindingType.HasFromToArray;this.resolvedProperty=a}else if(Array.isArray(a)){o=this.BindingType.EntireArray;this.resolvedProperty=a}else{this.propertyName=i}this.getValue=this.GetterByBindingType[o];this.setValue=this.SetterByBindingTypeAndVersioning[o][s]}unbind(){this.node=null;this.getValue=this._getValue_unbound;this.setValue=this._setValue_unbound}}PropertyBinding.Composite=Composite;PropertyBinding.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3};PropertyBinding.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2};PropertyBinding.prototype.GetterByBindingType=[PropertyBinding.prototype._getValue_direct,PropertyBinding.prototype._getValue_array,PropertyBinding.prototype._getValue_arrayElement,PropertyBinding.prototype._getValue_toArray];PropertyBinding.prototype.SetterByBindingTypeAndVersioning=[[PropertyBinding.prototype._setValue_direct,PropertyBinding.prototype._setValue_direct_setNeedsUpdate,PropertyBinding.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[PropertyBinding.prototype._setValue_array,PropertyBinding.prototype._setValue_array_setNeedsUpdate,PropertyBinding.prototype._setValue_array_setMatrixWorldNeedsUpdate],[PropertyBinding.prototype._setValue_arrayElement,PropertyBinding.prototype._setValue_arrayElement_setNeedsUpdate,PropertyBinding.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[PropertyBinding.prototype._setValue_fromArray,PropertyBinding.prototype._setValue_fromArray_setNeedsUpdate,PropertyBinding.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class AnimationObjectGroup{constructor(){this.uuid=generateUUID();this._objects=Array.prototype.slice.call(arguments);this.nCachedObjects_=0;const t={};this._indicesByUUID=t;for(let e=0,n=arguments.length;e!==n;++e){t[arguments[e].uuid]=e}this._paths=[];this._parsedPaths=[];this._bindings=[];this._bindingsIndicesByPath={};const e=this;this.stats={objects:{get total(){return e._objects.length},get inUse(){return this.total-e.nCachedObjects_}},get bindingsPerObject(){return e._bindings.length}}}add(){const t=this._objects,e=this._indicesByUUID,n=this._paths,i=this._parsedPaths,r=this._bindings,a=r.length;let s=undefined,o=t.length,l=this.nCachedObjects_;for(let c=0,u=arguments.length;c!==u;++c){const u=arguments[c],h=u.uuid;let d=e[h];if(d===undefined){d=o++;e[h]=d;t.push(u);for(let t=0,e=a;t!==e;++t){r[t].push(new PropertyBinding(u,n[t],i[t]))}}else if(d<l){s=t[d];const o=--l,c=t[o];e[c.uuid]=d;t[d]=c;e[h]=o;t[o]=u;for(let t=0,e=a;t!==e;++t){const e=r[t],a=e[o];let s=e[d];e[d]=a;if(s===undefined){s=new PropertyBinding(u,n[t],i[t])}e[o]=s}}else if(t[d]!==s){console.error("THREE.AnimationObjectGroup: Different objects with the same UUID "+"detected. Clean the caches or recreate your infrastructure when reloading scenes.")}}this.nCachedObjects_=l}remove(){const t=this._objects,e=this._indicesByUUID,n=this._bindings,i=n.length;let r=this.nCachedObjects_;for(let a=0,s=arguments.length;a!==s;++a){const s=arguments[a],o=s.uuid,l=e[o];if(l!==undefined&&l>=r){const a=r++,c=t[a];e[c.uuid]=l;t[l]=c;e[o]=a;t[a]=s;for(let t=0,e=i;t!==e;++t){const e=n[t],i=e[a],r=e[l];e[l]=i;e[a]=r}}}this.nCachedObjects_=r}uncache(){const t=this._objects,e=this._indicesByUUID,n=this._bindings,i=n.length;let r=this.nCachedObjects_,a=t.length;for(let s=0,o=arguments.length;s!==o;++s){const o=arguments[s],l=o.uuid,c=e[l];if(c!==undefined){delete e[l];if(c<r){const s=--r,o=t[s],l=--a,u=t[l];e[o.uuid]=c;t[c]=o;e[u.uuid]=s;t[s]=u;t.pop();for(let t=0,e=i;t!==e;++t){const e=n[t],i=e[s],r=e[l];e[c]=i;e[s]=r;e.pop()}}else{const r=--a,s=t[r];if(r>0){e[s.uuid]=c}t[c]=s;t.pop();for(let t=0,e=i;t!==e;++t){const e=n[t];e[c]=e[r];e.pop()}}}}this.nCachedObjects_=r}subscribe_(t,e){const n=this._bindingsIndicesByPath;let i=n[t];const r=this._bindings;if(i!==undefined)return r[i];const a=this._paths,s=this._parsedPaths,o=this._objects,l=o.length,c=this.nCachedObjects_,u=new Array(l);i=r.length;n[t]=i;a.push(t);s.push(e);r.push(u);for(let n=c,i=o.length;n!==i;++n){const i=o[n];u[n]=new PropertyBinding(i,t,e)}return u}unsubscribe_(t){const e=this._bindingsIndicesByPath,n=e[t];if(n!==undefined){const i=this._paths,r=this._parsedPaths,a=this._bindings,s=a.length-1,o=a[s],l=t[s];e[l]=n;a[n]=o;a.pop();r[n]=r[s];r.pop();i[n]=i[s];i.pop()}}}AnimationObjectGroup.prototype.isAnimationObjectGroup=true;class AnimationAction{constructor(t,e,n=null,i=e.blendMode){this._mixer=t;this._clip=e;this._localRoot=n;this.blendMode=i;const r=e.tracks,a=r.length,s=new Array(a);const o={endingStart:ZeroCurvatureEnding,endingEnd:ZeroCurvatureEnding};for(let t=0;t!==a;++t){const e=r[t].createInterpolant(null);s[t]=e;e.settings=o}this._interpolantSettings=o;this._interpolants=s;this._propertyBindings=new Array(a);this._cacheIndex=null;this._byClipCacheIndex=null;this._timeScaleInterpolant=null;this._weightInterpolant=null;this.loop=LoopRepeat;this._loopCount=-1;this._startTime=null;this.time=0;this.timeScale=1;this._effectiveTimeScale=1;this.weight=1;this._effectiveWeight=1;this.repetitions=Infinity;this.paused=false;this.enabled=true;this.clampWhenFinished=false;this.zeroSlopeAtStart=true;this.zeroSlopeAtEnd=true}play(){this._mixer._activateAction(this);return this}stop(){this._mixer._deactivateAction(this);return this.reset()}reset(){this.paused=false;this.enabled=true;this.time=0;this._loopCount=-1;this._startTime=null;return this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&this.timeScale!==0&&this._startTime===null&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(t){this._startTime=t;return this}setLoop(t,e){this.loop=t;this.repetitions=e;return this}setEffectiveWeight(t){this.weight=t;this._effectiveWeight=this.enabled?t:0;return this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(t){return this._scheduleFading(t,0,1)}fadeOut(t){return this._scheduleFading(t,1,0)}crossFadeFrom(t,e,n){t.fadeOut(e);this.fadeIn(e);if(n){const n=this._clip.duration,i=t._clip.duration,r=i/n,a=n/i;t.warp(1,r,e);this.warp(a,1,e)}return this}crossFadeTo(t,e,n){return t.crossFadeFrom(this,e,n)}stopFading(){const t=this._weightInterpolant;if(t!==null){this._weightInterpolant=null;this._mixer._takeBackControlInterpolant(t)}return this}setEffectiveTimeScale(t){this.timeScale=t;this._effectiveTimeScale=this.paused?0:t;return this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(t){this.timeScale=this._clip.duration/t;return this.stopWarping()}syncWith(t){this.time=t.time;this.timeScale=t.timeScale;return this.stopWarping()}halt(t){return this.warp(this._effectiveTimeScale,0,t)}warp(t,e,n){const i=this._mixer,r=i.time,a=this.timeScale;let s=this._timeScaleInterpolant;if(s===null){s=i._lendControlInterpolant();this._timeScaleInterpolant=s}const o=s.parameterPositions,l=s.sampleValues;o[0]=r;o[1]=r+n;l[0]=t/a;l[1]=e/a;return this}stopWarping(){const t=this._timeScaleInterpolant;if(t!==null){this._timeScaleInterpolant=null;this._mixer._takeBackControlInterpolant(t)}return this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(t,e,n,i){if(!this.enabled){this._updateWeight(t);return}const r=this._startTime;if(r!==null){const i=(t-r)*n;if(i<0||n===0){return}this._startTime=null;e=n*i}e*=this._updateTimeScale(t);const a=this._updateTime(e);const s=this._updateWeight(t);if(s>0){const t=this._interpolants;const e=this._propertyBindings;switch(this.blendMode){case AdditiveAnimationBlendMode:for(let n=0,i=t.length;n!==i;++n){t[n].evaluate(a);e[n].accumulateAdditive(s)}break;case NormalAnimationBlendMode:default:for(let n=0,r=t.length;n!==r;++n){t[n].evaluate(a);e[n].accumulate(i,s)}}}}_updateWeight(t){let e=0;if(this.enabled){e=this.weight;const n=this._weightInterpolant;if(n!==null){const i=n.evaluate(t)[0];e*=i;if(t>n.parameterPositions[1]){this.stopFading();if(i===0){this.enabled=false}}}}this._effectiveWeight=e;return e}_updateTimeScale(t){let e=0;if(!this.paused){e=this.timeScale;const n=this._timeScaleInterpolant;if(n!==null){const i=n.evaluate(t)[0];e*=i;if(t>n.parameterPositions[1]){this.stopWarping();if(e===0){this.paused=true}else{this.timeScale=e}}}}this._effectiveTimeScale=e;return e}_updateTime(t){const e=this._clip.duration;const n=this.loop;let i=this.time+t;let r=this._loopCount;const a=n===LoopPingPong;if(t===0){if(r===-1)return i;return a&&(r&1)===1?e-i:i}if(n===LoopOnce){if(r===-1){this._loopCount=0;this._setEndings(true,true,false)}t:{if(i>=e){i=e}else if(i<0){i=0}else{this.time=i;break t}if(this.clampWhenFinished)this.paused=true;else this.enabled=false;this.time=i;this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1})}}else{if(r===-1){if(t>=0){r=0;this._setEndings(true,this.repetitions===0,a)}else{this._setEndings(this.repetitions===0,true,a)}}if(i>=e||i<0){const n=Math.floor(i/e);i-=e*n;r+=Math.abs(n);const s=this.repetitions-r;if(s<=0){if(this.clampWhenFinished)this.paused=true;else this.enabled=false;i=t>0?e:0;this.time=i;this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1})}else{if(s===1){const e=t<0;this._setEndings(e,!e,a)}else{this._setEndings(false,false,a)}this._loopCount=r;this.time=i;this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:n})}}else{this.time=i}if(a&&(r&1)===1){return e-i}}return i}_setEndings(t,e,n){const i=this._interpolantSettings;if(n){i.endingStart=ZeroSlopeEnding;i.endingEnd=ZeroSlopeEnding}else{if(t){i.endingStart=this.zeroSlopeAtStart?ZeroSlopeEnding:ZeroCurvatureEnding}else{i.endingStart=WrapAroundEnding}if(e){i.endingEnd=this.zeroSlopeAtEnd?ZeroSlopeEnding:ZeroCurvatureEnding}else{i.endingEnd=WrapAroundEnding}}}_scheduleFading(t,e,n){const i=this._mixer,r=i.time;let a=this._weightInterpolant;if(a===null){a=i._lendControlInterpolant();this._weightInterpolant=a}const s=a.parameterPositions,o=a.sampleValues;s[0]=r;o[0]=e;s[1]=r+t;o[1]=n;return this}}class AnimationMixer extends EventDispatcher{constructor(t){super();this._root=t;this._initMemoryManager();this._accuIndex=0;this.time=0;this.timeScale=1}_bindAction(t,e){const n=t._localRoot||this._root,i=t._clip.tracks,r=i.length,a=t._propertyBindings,s=t._interpolants,o=n.uuid,l=this._bindingsByRootAndName;let c=l[o];if(c===undefined){c={};l[o]=c}for(let t=0;t!==r;++t){const r=i[t],l=r.name;let u=c[l];if(u!==undefined){++u.referenceCount;a[t]=u}else{u=a[t];if(u!==undefined){if(u._cacheIndex===null){++u.referenceCount;this._addInactiveBinding(u,o,l)}continue}const i=e&&e._propertyBindings[t].binding.parsedPath;u=new PropertyMixer(PropertyBinding.create(n,l,i),r.ValueTypeName,r.getValueSize());++u.referenceCount;this._addInactiveBinding(u,o,l);a[t]=u}s[t].resultBuffer=u.buffer}}_activateAction(t){if(!this._isActiveAction(t)){if(t._cacheIndex===null){const e=(t._localRoot||this._root).uuid,n=t._clip.uuid,i=this._actionsByClip[n];this._bindAction(t,i&&i.knownActions[0]);this._addInactiveAction(t,n,e)}const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];if(n.useCount++===0){this._lendBinding(n);n.saveOriginalState()}}this._lendAction(t)}}_deactivateAction(t){if(this._isActiveAction(t)){const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];if(--n.useCount===0){n.restoreOriginalState();this._takeBackBinding(n)}}this._takeBackAction(t)}}_initMemoryManager(){this._actions=[];this._nActiveActions=0;this._actionsByClip={};this._bindings=[];this._nActiveBindings=0;this._bindingsByRootAndName={};this._controlInterpolants=[];this._nActiveControlInterpolants=0;const t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}}_isActiveAction(t){const e=t._cacheIndex;return e!==null&&e<this._nActiveActions}_addInactiveAction(t,e,n){const i=this._actions,r=this._actionsByClip;let a=r[e];if(a===undefined){a={knownActions:[t],actionByRoot:{}};t._byClipCacheIndex=0;r[e]=a}else{const e=a.knownActions;t._byClipCacheIndex=e.length;e.push(t)}t._cacheIndex=i.length;i.push(t);a.actionByRoot[n]=t}_removeInactiveAction(t){const e=this._actions,n=e[e.length-1],i=t._cacheIndex;n._cacheIndex=i;e[i]=n;e.pop();t._cacheIndex=null;const r=t._clip.uuid,a=this._actionsByClip,s=a[r],o=s.knownActions,l=o[o.length-1],c=t._byClipCacheIndex;l._byClipCacheIndex=c;o[c]=l;o.pop();t._byClipCacheIndex=null;const u=s.actionByRoot,h=(t._localRoot||this._root).uuid;delete u[h];if(o.length===0){delete a[r]}this._removeInactiveBindingsForAction(t)}_removeInactiveBindingsForAction(t){const e=t._propertyBindings;for(let t=0,n=e.length;t!==n;++t){const n=e[t];if(--n.referenceCount===0){this._removeInactiveBinding(n)}}}_lendAction(t){const e=this._actions,n=t._cacheIndex,i=this._nActiveActions++,r=e[i];t._cacheIndex=i;e[i]=t;r._cacheIndex=n;e[n]=r}_takeBackAction(t){const e=this._actions,n=t._cacheIndex,i=--this._nActiveActions,r=e[i];t._cacheIndex=i;e[i]=t;r._cacheIndex=n;e[n]=r}_addInactiveBinding(t,e,n){const i=this._bindingsByRootAndName,r=this._bindings;let a=i[e];if(a===undefined){a={};i[e]=a}a[n]=t;t._cacheIndex=r.length;r.push(t)}_removeInactiveBinding(t){const e=this._bindings,n=t.binding,i=n.rootNode.uuid,r=n.path,a=this._bindingsByRootAndName,s=a[i],o=e[e.length-1],l=t._cacheIndex;o._cacheIndex=l;e[l]=o;e.pop();delete s[r];if(Object.keys(s).length===0){delete a[i]}}_lendBinding(t){const e=this._bindings,n=t._cacheIndex,i=this._nActiveBindings++,r=e[i];t._cacheIndex=i;e[i]=t;r._cacheIndex=n;e[n]=r}_takeBackBinding(t){const e=this._bindings,n=t._cacheIndex,i=--this._nActiveBindings,r=e[i];t._cacheIndex=i;e[i]=t;r._cacheIndex=n;e[n]=r}_lendControlInterpolant(){const t=this._controlInterpolants,e=this._nActiveControlInterpolants++;let n=t[e];if(n===undefined){n=new LinearInterpolant(new Float32Array(2),new Float32Array(2),1,this._controlInterpolantsResultBuffer);n.__cacheIndex=e;t[e]=n}return n}_takeBackControlInterpolant(t){const e=this._controlInterpolants,n=t.__cacheIndex,i=--this._nActiveControlInterpolants,r=e[i];t.__cacheIndex=i;e[i]=t;r.__cacheIndex=n;e[n]=r}clipAction(t,e,n){const i=e||this._root,r=i.uuid;let a=typeof t==="string"?AnimationClip.findByName(i,t):t;const s=a!==null?a.uuid:t;const o=this._actionsByClip[s];let l=null;if(n===undefined){if(a!==null){n=a.blendMode}else{n=NormalAnimationBlendMode}}if(o!==undefined){const t=o.actionByRoot[r];if(t!==undefined&&t.blendMode===n){return t}l=o.knownActions[0];if(a===null)a=l._clip}if(a===null)return null;const c=new AnimationAction(this,a,e,n);this._bindAction(c,l);this._addInactiveAction(c,s,r);return c}existingAction(t,e){const n=e||this._root,i=n.uuid,r=typeof t==="string"?AnimationClip.findByName(n,t):t,a=r?r.uuid:t,s=this._actionsByClip[a];if(s!==undefined){return s.actionByRoot[i]||null}return null}stopAllAction(){const t=this._actions,e=this._nActiveActions;for(let n=e-1;n>=0;--n){t[n].stop()}return this}update(t){t*=this.timeScale;const e=this._actions,n=this._nActiveActions,i=this.time+=t,r=Math.sign(t),a=this._accuIndex^=1;for(let s=0;s!==n;++s){const n=e[s];n._update(i,t,r,a)}const s=this._bindings,o=this._nActiveBindings;for(let t=0;t!==o;++t){s[t].apply(a)}return this}setTime(t){this.time=0;for(let t=0;t<this._actions.length;t++){this._actions[t].time=0}return this.update(t)}getRoot(){return this._root}uncacheClip(t){const e=this._actions,n=t.uuid,i=this._actionsByClip,r=i[n];if(r!==undefined){const t=r.knownActions;for(let n=0,i=t.length;n!==i;++n){const i=t[n];this._deactivateAction(i);const r=i._cacheIndex,a=e[e.length-1];i._cacheIndex=null;i._byClipCacheIndex=null;a._cacheIndex=r;e[r]=a;e.pop();this._removeInactiveBindingsForAction(i)}delete i[n]}}uncacheRoot(t){const e=t.uuid,n=this._actionsByClip;for(const t in n){const i=n[t].actionByRoot,r=i[e];if(r!==undefined){this._deactivateAction(r);this._removeInactiveAction(r)}}const i=this._bindingsByRootAndName,r=i[e];if(r!==undefined){for(const t in r){const e=r[t];e.restoreOriginalState();this._removeInactiveBinding(e)}}}uncacheAction(t,e){const n=this.existingAction(t,e);if(n!==null){this._deactivateAction(n);this._removeInactiveAction(n)}}}AnimationMixer.prototype._controlInterpolantsResultBuffer=new Float32Array(1);class Uniform{constructor(t){if(typeof t==="string"){console.warn("THREE.Uniform: Type parameter is no longer needed.");t=arguments[1]}this.value=t}clone(){return new Uniform(this.value.clone===undefined?this.value:this.value.clone())}}class InstancedInterleavedBuffer extends InterleavedBuffer{constructor(t,e,n=1){super(t,e);this.meshPerAttribute=n}copy(t){super.copy(t);this.meshPerAttribute=t.meshPerAttribute;return this}clone(t){const e=super.clone(t);e.meshPerAttribute=this.meshPerAttribute;return e}toJSON(t){const e=super.toJSON(t);e.isInstancedInterleavedBuffer=true;e.meshPerAttribute=this.meshPerAttribute;return e}}InstancedInterleavedBuffer.prototype.isInstancedInterleavedBuffer=true;class GLBufferAttribute{constructor(t,e,n,i,r){this.buffer=t;this.type=e;this.itemSize=n;this.elementSize=i;this.count=r;this.version=0}set needsUpdate(t){if(t===true)this.version++}setBuffer(t){this.buffer=t;return this}setType(t,e){this.type=t;this.elementSize=e;return this}setItemSize(t){this.itemSize=t;return this}setCount(t){this.count=t;return this}}GLBufferAttribute.prototype.isGLBufferAttribute=true;class Raycaster$1{constructor(t,e,n=0,i=Infinity){this.ray=new Ray(t,e);this.near=n;this.far=i;this.camera=null;this.layers=new Layers;this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(t,e){this.ray.set(t,e)}setFromCamera(t,e){if(e.isPerspectiveCamera){this.ray.origin.setFromMatrixPosition(e.matrixWorld);this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize();this.camera=e}else if(e.isOrthographicCamera){this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e);this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld);this.camera=e}else{console.error("THREE.Raycaster: Unsupported camera type: "+e.type)}}intersectObject(t,e=true,n=[]){intersectObject(t,this,n,e);n.sort(ascSort);return n}intersectObjects(t,e=true,n=[]){for(let i=0,r=t.length;i<r;i++){intersectObject(t[i],this,n,e)}n.sort(ascSort);return n}}function ascSort(t,e){return t.distance-e.distance}function intersectObject(t,e,n,i){if(t.layers.test(e.layers)){t.raycast(e,n)}if(i===true){const i=t.children;for(let t=0,r=i.length;t<r;t++){intersectObject(i[t],e,n,true)}}}class Spherical{constructor(t=1,e=0,n=0){this.radius=t;this.phi=e;this.theta=n;return this}set(t,e,n){this.radius=t;this.phi=e;this.theta=n;return this}copy(t){this.radius=t.radius;this.phi=t.phi;this.theta=t.theta;return this}makeSafe(){const t=1e-6;this.phi=Math.max(t,Math.min(Math.PI-t,this.phi));return this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,n){this.radius=Math.sqrt(t*t+e*e+n*n);if(this.radius===0){this.theta=0;this.phi=0}else{this.theta=Math.atan2(t,n);this.phi=Math.acos(clamp(e/this.radius,-1,1))}return this}clone(){return(new this.constructor).copy(this)}}class Cylindrical{constructor(t=1,e=0,n=0){this.radius=t;this.theta=e;this.y=n;return this}set(t,e,n){this.radius=t;this.theta=e;this.y=n;return this}copy(t){this.radius=t.radius;this.theta=t.theta;this.y=t.y;return this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,n){this.radius=Math.sqrt(t*t+n*n);this.theta=Math.atan2(t,n);this.y=e;return this}clone(){return(new this.constructor).copy(this)}}const _vector$4=new Vector2;class Box2{constructor(t=new Vector2(+Infinity,+Infinity),e=new Vector2(-Infinity,-Infinity)){this.min=t;this.max=e}set(t,e){this.min.copy(t);this.max.copy(e);return this}setFromPoints(t){this.makeEmpty();for(let e=0,n=t.length;e<n;e++){this.expandByPoint(t[e])}return this}setFromCenterAndSize(t,e){const n=_vector$4.copy(e).multiplyScalar(.5);this.min.copy(t).sub(n);this.max.copy(t).add(n);return this}clone(){return(new this.constructor).copy(this)}copy(t){this.min.copy(t.min);this.max.copy(t.max);return this}makeEmpty(){this.min.x=this.min.y=+Infinity;this.max.x=this.max.y=-Infinity;return this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(t){return this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)}expandByPoint(t){this.min.min(t);this.max.max(t);return this}expandByVector(t){this.min.sub(t);this.max.add(t);return this}expandByScalar(t){this.min.addScalar(-t);this.max.addScalar(t);return this}containsPoint(t){return t.x<this.min.x||t.x>this.max.x||t.y<this.min.y||t.y>this.max.y?false:true}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(t){return t.max.x<this.min.x||t.min.x>this.max.x||t.max.y<this.min.y||t.min.y>this.max.y?false:true}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){const e=_vector$4.copy(t).clamp(this.min,this.max);return e.sub(t).length()}intersect(t){this.min.max(t.min);this.max.min(t.max);return this}union(t){this.min.min(t.min);this.max.max(t.max);return this}translate(t){this.min.add(t);this.max.add(t);return this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}Box2.prototype.isBox2=true;const _startP=new Vector3$1;const _startEnd=new Vector3$1;class Line3{constructor(t=new Vector3$1,e=new Vector3$1){this.start=t;this.end=e}set(t,e){this.start.copy(t);this.end.copy(e);return this}copy(t){this.start.copy(t.start);this.end.copy(t.end);return this}getCenter(t){return t.addVectors(this.start,this.end).multiplyScalar(.5)}delta(t){return t.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(t,e){return this.delta(e).multiplyScalar(t).add(this.start)}closestPointToPointParameter(t,e){_startP.subVectors(t,this.start);_startEnd.subVectors(this.end,this.start);const n=_startEnd.dot(_startEnd);const i=_startEnd.dot(_startP);let r=i/n;if(e){r=clamp(r,0,1)}return r}closestPointToPoint(t,e,n){const i=this.closestPointToPointParameter(t,e);return this.delta(n).multiplyScalar(i).add(this.start)}applyMatrix4(t){this.start.applyMatrix4(t);this.end.applyMatrix4(t);return this}equals(t){return t.start.equals(this.start)&&t.end.equals(this.end)}clone(){return(new this.constructor).copy(this)}}const _vector$3=new Vector3$1;class SpotLightHelper extends Object3D$1{constructor(t,e){super();this.light=t;this.light.updateMatrixWorld();this.matrix=t.matrixWorld;this.matrixAutoUpdate=false;this.color=e;const n=new BufferGeometry$1;const i=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let t=0,e=1,n=32;t<n;t++,e++){const r=t/n*Math.PI*2;const a=e/n*Math.PI*2;i.push(Math.cos(r),Math.sin(r),1,Math.cos(a),Math.sin(a),1)}n.setAttribute("position",new Float32BufferAttribute$1(i,3));const r=new LineBasicMaterial$1({fog:false,toneMapped:false});this.cone=new LineSegments(n,r);this.add(this.cone);this.update()}dispose(){this.cone.geometry.dispose();this.cone.material.dispose()}update(){this.light.updateMatrixWorld();const t=this.light.distance?this.light.distance:1e3;const e=t*Math.tan(this.light.angle);this.cone.scale.set(e,e,t);_vector$3.setFromMatrixPosition(this.light.target.matrixWorld);this.cone.lookAt(_vector$3);if(this.color!==undefined){this.cone.material.color.set(this.color)}else{this.cone.material.color.copy(this.light.color)}}}const _vector$2=new Vector3$1;const _boneMatrix=new Matrix4$1;const _matrixWorldInv=new Matrix4$1;class SkeletonHelper extends LineSegments{constructor(t){const e=getBoneList(t);const n=new BufferGeometry$1;const i=[];const r=[];const a=new Color$1(0,0,1);const s=new Color$1(0,1,0);for(let t=0;t<e.length;t++){const n=e[t];if(n.parent&&n.parent.isBone){i.push(0,0,0);i.push(0,0,0);r.push(a.r,a.g,a.b);r.push(s.r,s.g,s.b)}}n.setAttribute("position",new Float32BufferAttribute$1(i,3));n.setAttribute("color",new Float32BufferAttribute$1(r,3));const o=new LineBasicMaterial$1({vertexColors:true,depthTest:false,depthWrite:false,toneMapped:false,transparent:true});super(n,o);this.type="SkeletonHelper";this.isSkeletonHelper=true;this.root=t;this.bones=e;this.matrix=t.matrixWorld;this.matrixAutoUpdate=false}updateMatrixWorld(t){const e=this.bones;const n=this.geometry;const i=n.getAttribute("position");_matrixWorldInv.copy(this.root.matrixWorld).invert();for(let t=0,n=0;t<e.length;t++){const r=e[t];if(r.parent&&r.parent.isBone){_boneMatrix.multiplyMatrices(_matrixWorldInv,r.matrixWorld);_vector$2.setFromMatrixPosition(_boneMatrix);i.setXYZ(n,_vector$2.x,_vector$2.y,_vector$2.z);_boneMatrix.multiplyMatrices(_matrixWorldInv,r.parent.matrixWorld);_vector$2.setFromMatrixPosition(_boneMatrix);i.setXYZ(n+1,_vector$2.x,_vector$2.y,_vector$2.z);n+=2}}n.getAttribute("position").needsUpdate=true;super.updateMatrixWorld(t)}}function getBoneList(t){const e=[];if(t.isBone===true){e.push(t)}for(let n=0;n<t.children.length;n++){e.push.apply(e,getBoneList(t.children[n]))}return e}class PointLightHelper extends Mesh$1{constructor(t,e,n){const i=new SphereGeometry$1(e,4,2);const r=new MeshBasicMaterial$1({wireframe:true,fog:false,toneMapped:false});super(i,r);this.light=t;this.light.updateMatrixWorld();this.color=n;this.type="PointLightHelper";this.matrix=this.light.matrixWorld;this.matrixAutoUpdate=false;this.update()}dispose(){this.geometry.dispose();this.material.dispose()}update(){if(this.color!==undefined){this.material.color.set(this.color)}else{this.material.color.copy(this.light.color)}}}const _vector$1=new Vector3$1;const _color1=new Color$1;const _color2=new Color$1;class HemisphereLightHelper extends Object3D$1{constructor(t,e,n){super();this.light=t;this.light.updateMatrixWorld();this.matrix=t.matrixWorld;this.matrixAutoUpdate=false;this.color=n;const i=new OctahedronGeometry$1(e);i.rotateY(Math.PI*.5);this.material=new MeshBasicMaterial$1({wireframe:true,fog:false,toneMapped:false});if(this.color===undefined)this.material.vertexColors=true;const r=i.getAttribute("position");const a=new Float32Array(r.count*3);i.setAttribute("color",new BufferAttribute(a,3));this.add(new Mesh$1(i,this.material));this.update()}dispose(){this.children[0].geometry.dispose();this.children[0].material.dispose()}update(){const t=this.children[0];if(this.color!==undefined){this.material.color.set(this.color)}else{const e=t.geometry.getAttribute("color");_color1.copy(this.light.color);_color2.copy(this.light.groundColor);for(let t=0,n=e.count;t<n;t++){const i=t<n/2?_color1:_color2;e.setXYZ(t,i.r,i.g,i.b)}e.needsUpdate=true}t.lookAt(_vector$1.setFromMatrixPosition(this.light.matrixWorld).negate())}}class GridHelper extends LineSegments{constructor(t=10,e=10,n=4473924,i=8947848){n=new Color$1(n);i=new Color$1(i);const r=e/2;const a=t/e;const s=t/2;const o=[],l=[];for(let t=0,c=0,u=-s;t<=e;t++,u+=a){o.push(-s,0,u,s,0,u);o.push(u,0,-s,u,0,s);const e=t===r?n:i;e.toArray(l,c);c+=3;e.toArray(l,c);c+=3;e.toArray(l,c);c+=3;e.toArray(l,c);c+=3}const c=new BufferGeometry$1;c.setAttribute("position",new Float32BufferAttribute$1(o,3));c.setAttribute("color",new Float32BufferAttribute$1(l,3));const u=new LineBasicMaterial$1({vertexColors:true,toneMapped:false});super(c,u);this.type="GridHelper"}}class PolarGridHelper extends LineSegments{constructor(t=10,e=16,n=8,i=64,r=4473924,a=8947848){r=new Color$1(r);a=new Color$1(a);const s=[];const o=[];for(let n=0;n<=e;n++){const i=n/e*(Math.PI*2);const l=Math.sin(i)*t;const c=Math.cos(i)*t;s.push(0,0,0);s.push(l,0,c);const u=n&1?r:a;o.push(u.r,u.g,u.b);o.push(u.r,u.g,u.b)}for(let e=0;e<=n;e++){const l=e&1?r:a;const c=t-t/n*e;for(let t=0;t<i;t++){let e=t/i*(Math.PI*2);let n=Math.sin(e)*c;let r=Math.cos(e)*c;s.push(n,0,r);o.push(l.r,l.g,l.b);e=(t+1)/i*(Math.PI*2);n=Math.sin(e)*c;r=Math.cos(e)*c;s.push(n,0,r);o.push(l.r,l.g,l.b)}}const l=new BufferGeometry$1;l.setAttribute("position",new Float32BufferAttribute$1(s,3));l.setAttribute("color",new Float32BufferAttribute$1(o,3));const c=new LineBasicMaterial$1({vertexColors:true,toneMapped:false});super(l,c);this.type="PolarGridHelper"}}const _v1$8=new Vector3$1;const _v2$4=new Vector3$1;const _v3$2=new Vector3$1;class DirectionalLightHelper extends Object3D$1{constructor(t,e,n){super();this.light=t;this.light.updateMatrixWorld();this.matrix=t.matrixWorld;this.matrixAutoUpdate=false;this.color=n;if(e===undefined)e=1;let i=new BufferGeometry$1;i.setAttribute("position",new Float32BufferAttribute$1([-e,e,0,e,e,0,e,-e,0,-e,-e,0,-e,e,0],3));const r=new LineBasicMaterial$1({fog:false,toneMapped:false});this.lightPlane=new Line$1(i,r);this.add(this.lightPlane);i=new BufferGeometry$1;i.setAttribute("position",new Float32BufferAttribute$1([0,0,0,0,0,1],3));this.targetLine=new Line$1(i,r);this.add(this.targetLine);this.update()}dispose(){this.lightPlane.geometry.dispose();this.lightPlane.material.dispose();this.targetLine.geometry.dispose();this.targetLine.material.dispose()}update(){_v1$8.setFromMatrixPosition(this.light.matrixWorld);_v2$4.setFromMatrixPosition(this.light.target.matrixWorld);_v3$2.subVectors(_v2$4,_v1$8);this.lightPlane.lookAt(_v2$4);if(this.color!==undefined){this.lightPlane.material.color.set(this.color);this.targetLine.material.color.set(this.color)}else{this.lightPlane.material.color.copy(this.light.color);this.targetLine.material.color.copy(this.light.color)}this.targetLine.lookAt(_v2$4);this.targetLine.scale.z=_v3$2.length()}}const _vector=new Vector3$1;const _camera$2=new Camera;class CameraHelper extends LineSegments{constructor(t){const e=new BufferGeometry$1;const n=new LineBasicMaterial$1({color:16777215,vertexColors:true,toneMapped:false});const i=[];const r=[];const a={};const s=new Color$1(16755200);const o=new Color$1(16711680);const l=new Color$1(43775);const c=new Color$1(16777215);const u=new Color$1(3355443);h("n1","n2",s);h("n2","n4",s);h("n4","n3",s);h("n3","n1",s);h("f1","f2",s);h("f2","f4",s);h("f4","f3",s);h("f3","f1",s);h("n1","f1",s);h("n2","f2",s);h("n3","f3",s);h("n4","f4",s);h("p","n1",o);h("p","n2",o);h("p","n3",o);h("p","n4",o);h("u1","u2",l);h("u2","u3",l);h("u3","u1",l);h("c","t",c);h("p","c",u);h("cn1","cn2",u);h("cn3","cn4",u);h("cf1","cf2",u);h("cf3","cf4",u);function h(t,e,n){d(t,n);d(e,n)}function d(t,e){i.push(0,0,0);r.push(e.r,e.g,e.b);if(a[t]===undefined){a[t]=[]}a[t].push(i.length/3-1)}e.setAttribute("position",new Float32BufferAttribute$1(i,3));e.setAttribute("color",new Float32BufferAttribute$1(r,3));super(e,n);this.type="CameraHelper";this.camera=t;if(this.camera.updateProjectionMatrix)this.camera.updateProjectionMatrix();this.matrix=t.matrixWorld;this.matrixAutoUpdate=false;this.pointMap=a;this.update()}update(){const t=this.geometry;const e=this.pointMap;const n=1,i=1;_camera$2.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse);setPoint("c",e,t,_camera$2,0,0,-1);setPoint("t",e,t,_camera$2,0,0,1);setPoint("n1",e,t,_camera$2,-n,-i,-1);setPoint("n2",e,t,_camera$2,n,-i,-1);setPoint("n3",e,t,_camera$2,-n,i,-1);setPoint("n4",e,t,_camera$2,n,i,-1);setPoint("f1",e,t,_camera$2,-n,-i,1);setPoint("f2",e,t,_camera$2,n,-i,1);setPoint("f3",e,t,_camera$2,-n,i,1);setPoint("f4",e,t,_camera$2,n,i,1);setPoint("u1",e,t,_camera$2,n*.7,i*1.1,-1);setPoint("u2",e,t,_camera$2,-n*.7,i*1.1,-1);setPoint("u3",e,t,_camera$2,0,i*2,-1);setPoint("cf1",e,t,_camera$2,-n,0,1);setPoint("cf2",e,t,_camera$2,n,0,1);setPoint("cf3",e,t,_camera$2,0,-i,1);setPoint("cf4",e,t,_camera$2,0,i,1);setPoint("cn1",e,t,_camera$2,-n,0,-1);setPoint("cn2",e,t,_camera$2,n,0,-1);setPoint("cn3",e,t,_camera$2,0,-i,-1);setPoint("cn4",e,t,_camera$2,0,i,-1);t.getAttribute("position").needsUpdate=true}dispose(){this.geometry.dispose();this.material.dispose()}}function setPoint(t,e,n,i,r,a,s){_vector.set(r,a,s).unproject(i);const o=e[t];if(o!==undefined){const t=n.getAttribute("position");for(let e=0,n=o.length;e<n;e++){t.setXYZ(o[e],_vector.x,_vector.y,_vector.z)}}}const _box=new Box3;class BoxHelper extends LineSegments{constructor(t,e=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);const i=new Float32Array(8*3);const r=new BufferGeometry$1;r.setIndex(new BufferAttribute(n,1));r.setAttribute("position",new BufferAttribute(i,3));super(r,new LineBasicMaterial$1({color:e,toneMapped:false}));this.object=t;this.type="BoxHelper";this.matrixAutoUpdate=false;this.update()}update(t){if(t!==undefined){console.warn("THREE.BoxHelper: .update() has no longer arguments.")}if(this.object!==undefined){_box.setFromObject(this.object)}if(_box.isEmpty())return;const e=_box.min;const n=_box.max;const i=this.geometry.attributes.position;const r=i.array;r[0]=n.x;r[1]=n.y;r[2]=n.z;r[3]=e.x;r[4]=n.y;r[5]=n.z;r[6]=e.x;r[7]=e.y;r[8]=n.z;r[9]=n.x;r[10]=e.y;r[11]=n.z;r[12]=n.x;r[13]=n.y;r[14]=e.z;r[15]=e.x;r[16]=n.y;r[17]=e.z;r[18]=e.x;r[19]=e.y;r[20]=e.z;r[21]=n.x;r[22]=e.y;r[23]=e.z;i.needsUpdate=true;this.geometry.computeBoundingSphere()}setFromObject(t){this.object=t;this.update();return this}copy(t){LineSegments.prototype.copy.call(this,t);this.object=t.object;return this}}class Box3Helper extends LineSegments{constructor(t,e=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]);const i=[1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1];const r=new BufferGeometry$1;r.setIndex(new BufferAttribute(n,1));r.setAttribute("position",new Float32BufferAttribute$1(i,3));super(r,new LineBasicMaterial$1({color:e,toneMapped:false}));this.box=t;this.type="Box3Helper";this.geometry.computeBoundingSphere()}updateMatrixWorld(t){const e=this.box;if(e.isEmpty())return;e.getCenter(this.position);e.getSize(this.scale);this.scale.multiplyScalar(.5);super.updateMatrixWorld(t)}}class PlaneHelper extends Line$1{constructor(t,e=1,n=16776960){const i=n;const r=[1,-1,1,-1,1,1,-1,-1,1,1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,1,0,0,1,0,0,0];const a=new BufferGeometry$1;a.setAttribute("position",new Float32BufferAttribute$1(r,3));a.computeBoundingSphere();super(a,new LineBasicMaterial$1({color:i,toneMapped:false}));this.type="PlaneHelper";this.plane=t;this.size=e;const s=[1,1,1,-1,1,1,-1,-1,1,1,1,1,-1,-1,1,1,-1,1];const o=new BufferGeometry$1;o.setAttribute("position",new Float32BufferAttribute$1(s,3));o.computeBoundingSphere();this.add(new Mesh$1(o,new MeshBasicMaterial$1({color:i,opacity:.2,transparent:true,depthWrite:false,toneMapped:false})))}updateMatrixWorld(t){let e=-this.plane.constant;if(Math.abs(e)<1e-8)e=1e-8;this.scale.set(.5*this.size,.5*this.size,e);this.children[0].material.side=e<0?BackSide:FrontSide;this.lookAt(this.plane.normal);super.updateMatrixWorld(t)}}const _axis=new Vector3$1;let _lineGeometry,_coneGeometry;class ArrowHelper extends Object3D$1{constructor(t=new Vector3$1(0,0,1),e=new Vector3$1(0,0,0),n=1,i=16776960,r=n*.2,a=r*.2){super();this.type="ArrowHelper";if(_lineGeometry===undefined){_lineGeometry=new BufferGeometry$1;_lineGeometry.setAttribute("position",new Float32BufferAttribute$1([0,0,0,0,1,0],3));_coneGeometry=new CylinderGeometry$1(0,.5,1,5,1);_coneGeometry.translate(0,-.5,0)}this.position.copy(e);this.line=new Line$1(_lineGeometry,new LineBasicMaterial$1({color:i,toneMapped:false}));this.line.matrixAutoUpdate=false;this.add(this.line);this.cone=new Mesh$1(_coneGeometry,new MeshBasicMaterial$1({color:i,toneMapped:false}));this.cone.matrixAutoUpdate=false;this.add(this.cone);this.setDirection(t);this.setLength(n,r,a)}setDirection(t){if(t.y>.99999){this.quaternion.set(0,0,0,1)}else if(t.y<-.99999){this.quaternion.set(1,0,0,0)}else{_axis.set(t.z,0,-t.x).normalize();const e=Math.acos(t.y);this.quaternion.setFromAxisAngle(_axis,e)}}setLength(t,e=t*.2,n=e*.2){this.line.scale.set(1,Math.max(1e-4,t-e),1);this.line.updateMatrix();this.cone.scale.set(n,e,n);this.cone.position.y=t;this.cone.updateMatrix()}setColor(t){this.line.material.color.set(t);this.cone.material.color.set(t)}copy(t){super.copy(t,false);this.line.copy(t.line);this.cone.copy(t.cone);return this}}class AxesHelper extends LineSegments{constructor(t=1){const e=[0,0,0,t,0,0,0,0,0,0,t,0,0,0,0,0,0,t];const n=[1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1];const i=new BufferGeometry$1;i.setAttribute("position",new Float32BufferAttribute$1(e,3));i.setAttribute("color",new Float32BufferAttribute$1(n,3));const r=new LineBasicMaterial$1({vertexColors:true,toneMapped:false});super(i,r);this.type="AxesHelper"}setColors(t,e,n){const i=new Color$1;const r=this.geometry.attributes.color.array;i.set(t);i.toArray(r,0);i.toArray(r,3);i.set(e);i.toArray(r,6);i.toArray(r,9);i.set(n);i.toArray(r,12);i.toArray(r,15);this.geometry.attributes.color.needsUpdate=true;return this}dispose(){this.geometry.dispose();this.material.dispose()}}class ShapePath{constructor(){this.type="ShapePath";this.color=new Color$1;this.subPaths=[];this.currentPath=null}moveTo(t,e){this.currentPath=new Path;this.subPaths.push(this.currentPath);this.currentPath.moveTo(t,e);return this}lineTo(t,e){this.currentPath.lineTo(t,e);return this}quadraticCurveTo(t,e,n,i){this.currentPath.quadraticCurveTo(t,e,n,i);return this}bezierCurveTo(t,e,n,i,r,a){this.currentPath.bezierCurveTo(t,e,n,i,r,a);return this}splineThru(t){this.currentPath.splineThru(t);return this}toShapes(t,e){function n(t){const e=[];for(let n=0,i=t.length;n<i;n++){const i=t[n];const r=new Shape;r.curves=i.curves;e.push(r)}return e}function i(t,e){const n=e.length;let i=false;for(let r=n-1,a=0;a<n;r=a++){let n=e[r];let s=e[a];let o=s.x-n.x;let l=s.y-n.y;if(Math.abs(l)>Number.EPSILON){if(l<0){n=e[a];o=-o;s=e[r];l=-l}if(t.y<n.y||t.y>s.y)continue;if(t.y===n.y){if(t.x===n.x)return true}else{const e=l*(t.x-n.x)-o*(t.y-n.y);if(e===0)return true;if(e<0)continue;i=!i}}else{if(t.y!==n.y)continue;if(s.x<=t.x&&t.x<=n.x||n.x<=t.x&&t.x<=s.x)return true}}return i}const r=ShapeUtils.isClockWise;const a=this.subPaths;if(a.length===0)return[];if(e===true)return n(a);let s,o,l;const c=[];if(a.length===1){o=a[0];l=new Shape;l.curves=o.curves;c.push(l);return c}let u=!r(a[0].getPoints());u=t?!u:u;const h=[];const d=[];let f=[];let p=0;let m;d[p]=undefined;f[p]=[];for(let e=0,n=a.length;e<n;e++){o=a[e];m=o.getPoints();s=r(m);s=t?!s:s;if(s){if(!u&&d[p])p++;d[p]={s:new Shape,p:m};d[p].s.curves=o.curves;if(u)p++;f[p]=[]}else{f[p].push({h:o,p:m[0]})}}if(!d[0])return n(a);if(d.length>1){let t=false;let e=0;for(let t=0,e=d.length;t<e;t++){h[t]=[]}for(let n=0,r=d.length;n<r;n++){const r=f[n];for(let a=0;a<r.length;a++){const s=r[a];let o=true;for(let r=0;r<d.length;r++){if(i(s.p,d[r].p)){if(n!==r)e++;if(o){o=false;h[r].push(s)}else{t=true}}}if(o){h[n].push(s)}}}if(e>0&&t===false){f=h}}let g;for(let t=0,e=d.length;t<e;t++){l=d[t].s;c.push(l);g=f[t];for(let t=0,e=g.length;t<e;t++){l.holes.push(g[t].h)}}return c}}const _floatView=new Float32Array(1);const _int32View=new Int32Array(_floatView.buffer);class DataUtils{static toHalfFloat(t){if(t>65504){console.warn("THREE.DataUtils.toHalfFloat(): value exceeds 65504.");t=65504}_floatView[0]=t;const e=_int32View[0];let n=e>>16&32768;let i=e>>12&2047;const r=e>>23&255;if(r<103)return n;if(r>142){n|=31744;n|=(r==255?0:1)&&e&8388607;return n}if(r<113){i|=2048;n|=(i>>114-r)+(i>>113-r&1);return n}n|=r-112<<10|i>>1;n+=i&1;return n}}const LineStrip=0;const LinePieces=1;const NoColors=0;const FaceColors=1;const VertexColors=2;function MeshFaceMaterial(t){console.warn("THREE.MeshFaceMaterial has been removed. Use an Array instead.");return t}function MultiMaterial(t=[]){console.warn("THREE.MultiMaterial has been removed. Use an Array instead.");t.isMultiMaterial=true;t.materials=t;t.clone=function(){return t.slice()};return t}function PointCloud(t,e){console.warn("THREE.PointCloud has been renamed to THREE.Points.");return new Points(t,e)}function Particle(t){console.warn("THREE.Particle has been renamed to THREE.Sprite.");return new Sprite(t)}function ParticleSystem(t,e){console.warn("THREE.ParticleSystem has been renamed to THREE.Points.");return new Points(t,e)}function PointCloudMaterial(t){console.warn("THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.");return new PointsMaterial(t)}function ParticleBasicMaterial(t){console.warn("THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.");return new PointsMaterial(t)}function ParticleSystemMaterial(t){console.warn("THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.");return new PointsMaterial(t)}function Vertex(t,e,n){console.warn("THREE.Vertex has been removed. Use THREE.Vector3 instead.");return new Vector3$1(t,e,n)}function DynamicBufferAttribute(t,e){console.warn("THREE.DynamicBufferAttribute has been removed. Use new THREE.BufferAttribute().setUsage( THREE.DynamicDrawUsage ) instead.");return new BufferAttribute(t,e).setUsage(DynamicDrawUsage)}function Int8Attribute(t,e){console.warn("THREE.Int8Attribute has been removed. Use new THREE.Int8BufferAttribute() instead.");return new Int8BufferAttribute(t,e)}function Uint8Attribute(t,e){console.warn("THREE.Uint8Attribute has been removed. Use new THREE.Uint8BufferAttribute() instead.");return new Uint8BufferAttribute(t,e)}function Uint8ClampedAttribute(t,e){console.warn("THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8ClampedBufferAttribute() instead.");return new Uint8ClampedBufferAttribute(t,e)}function Int16Attribute(t,e){console.warn("THREE.Int16Attribute has been removed. Use new THREE.Int16BufferAttribute() instead.");return new Int16BufferAttribute(t,e)}function Uint16Attribute(t,e){console.warn("THREE.Uint16Attribute has been removed. Use new THREE.Uint16BufferAttribute() instead.");return new Uint16BufferAttribute(t,e)}function Int32Attribute(t,e){console.warn("THREE.Int32Attribute has been removed. Use new THREE.Int32BufferAttribute() instead.");return new Int32BufferAttribute(t,e)}function Uint32Attribute(t,e){console.warn("THREE.Uint32Attribute has been removed. Use new THREE.Uint32BufferAttribute() instead.");return new Uint32BufferAttribute(t,e)}function Float32Attribute(t,e){console.warn("THREE.Float32Attribute has been removed. Use new THREE.Float32BufferAttribute() instead.");return new Float32BufferAttribute$1(t,e)}function Float64Attribute(t,e){console.warn("THREE.Float64Attribute has been removed. Use new THREE.Float64BufferAttribute() instead.");return new Float64BufferAttribute(t,e)}Curve.create=function(t,e){console.log("THREE.Curve.create() has been deprecated");t.prototype=Object.create(Curve.prototype);t.prototype.constructor=t;t.prototype.getPoint=e;return t};Path.prototype.fromPoints=function(t){console.warn("THREE.Path: .fromPoints() has been renamed to .setFromPoints().");return this.setFromPoints(t)};function AxisHelper(t){console.warn("THREE.AxisHelper has been renamed to THREE.AxesHelper.");return new AxesHelper(t)}function BoundingBoxHelper(t,e){console.warn("THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.");return new BoxHelper(t,e)}function EdgesHelper(t,e){console.warn("THREE.EdgesHelper has been removed. Use THREE.EdgesGeometry instead.");return new LineSegments(new EdgesGeometry(t.geometry),new LineBasicMaterial$1({color:e!==undefined?e:16777215}))}GridHelper.prototype.setColors=function(){console.error("THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.")};SkeletonHelper.prototype.update=function(){console.error("THREE.SkeletonHelper: update() no longer needs to be called.")};function WireframeHelper(t,e){console.warn("THREE.WireframeHelper has been removed. Use THREE.WireframeGeometry instead.");return new LineSegments(new WireframeGeometry(t.geometry),new LineBasicMaterial$1({color:e!==undefined?e:16777215}))}Loader$1.prototype.extractUrlBase=function(t){console.warn("THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.");return LoaderUtils$1.extractUrlBase(t)};Loader$1.Handlers={add:function(){console.error("THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.")},get:function(){console.error("THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.")}};function XHRLoader(t){console.warn("THREE.XHRLoader has been renamed to THREE.FileLoader.");return new FileLoader(t)}function BinaryTextureLoader(t){console.warn("THREE.BinaryTextureLoader has been renamed to THREE.DataTextureLoader.");return new DataTextureLoader(t)}Box2.prototype.center=function(t){console.warn("THREE.Box2: .center() has been renamed to .getCenter().");return this.getCenter(t)};Box2.prototype.empty=function(){console.warn("THREE.Box2: .empty() has been renamed to .isEmpty().");return this.isEmpty()};Box2.prototype.isIntersectionBox=function(t){console.warn("THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().");return this.intersectsBox(t)};Box2.prototype.size=function(t){console.warn("THREE.Box2: .size() has been renamed to .getSize().");return this.getSize(t)};Box3.prototype.center=function(t){console.warn("THREE.Box3: .center() has been renamed to .getCenter().");return this.getCenter(t)};Box3.prototype.empty=function(){console.warn("THREE.Box3: .empty() has been renamed to .isEmpty().");return this.isEmpty()};Box3.prototype.isIntersectionBox=function(t){console.warn("THREE.Box3: .isIntersectionBox() has been renamed to .intersectsBox().");return this.intersectsBox(t)};Box3.prototype.isIntersectionSphere=function(t){console.warn("THREE.Box3: .isIntersectionSphere() has been renamed to .intersectsSphere().");return this.intersectsSphere(t)};Box3.prototype.size=function(t){console.warn("THREE.Box3: .size() has been renamed to .getSize().");return this.getSize(t)};Euler$1.prototype.toVector3=function(){console.error("THREE.Euler: .toVector3() has been removed. Use Vector3.setFromEuler() instead")};Sphere.prototype.empty=function(){console.warn("THREE.Sphere: .empty() has been renamed to .isEmpty().");return this.isEmpty()};Frustum.prototype.setFromMatrix=function(t){console.warn("THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().");return this.setFromProjectionMatrix(t)};Line3.prototype.center=function(t){console.warn("THREE.Line3: .center() has been renamed to .getCenter().");return this.getCenter(t)};Matrix3.prototype.flattenToArrayOffset=function(t,e){console.warn("THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");return this.toArray(t,e)};Matrix3.prototype.multiplyVector3=function(t){console.warn("THREE.Matrix3: .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");return t.applyMatrix3(this)};Matrix3.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix3: .multiplyVector3Array() has been removed.")};Matrix3.prototype.applyToBufferAttribute=function(t){console.warn("THREE.Matrix3: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix3( matrix ) instead.");return t.applyMatrix3(this)};Matrix3.prototype.applyToVector3Array=function(){console.error("THREE.Matrix3: .applyToVector3Array() has been removed.")};Matrix3.prototype.getInverse=function(t){console.warn("THREE.Matrix3: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.");return this.copy(t).invert()};Matrix4$1.prototype.extractPosition=function(t){console.warn("THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().");return this.copyPosition(t)};Matrix4$1.prototype.flattenToArrayOffset=function(t,e){console.warn("THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.");return this.toArray(t,e)};Matrix4$1.prototype.getPosition=function(){console.warn("THREE.Matrix4: .getPosition() has been removed. Use Vector3.setFromMatrixPosition( matrix ) instead.");return(new Vector3$1).setFromMatrixColumn(this,3)};Matrix4$1.prototype.setRotationFromQuaternion=function(t){console.warn("THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().");return this.makeRotationFromQuaternion(t)};Matrix4$1.prototype.multiplyToArray=function(){console.warn("THREE.Matrix4: .multiplyToArray() has been removed.")};Matrix4$1.prototype.multiplyVector3=function(t){console.warn("THREE.Matrix4: .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) instead.");return t.applyMatrix4(this)};Matrix4$1.prototype.multiplyVector4=function(t){console.warn("THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");return t.applyMatrix4(this)};Matrix4$1.prototype.multiplyVector3Array=function(){console.error("THREE.Matrix4: .multiplyVector3Array() has been removed.")};Matrix4$1.prototype.rotateAxis=function(t){console.warn("THREE.Matrix4: .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.");t.transformDirection(this)};Matrix4$1.prototype.crossVector=function(t){console.warn("THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.");return t.applyMatrix4(this)};Matrix4$1.prototype.translate=function(){console.error("THREE.Matrix4: .translate() has been removed.")};Matrix4$1.prototype.rotateX=function(){console.error("THREE.Matrix4: .rotateX() has been removed.")};Matrix4$1.prototype.rotateY=function(){console.error("THREE.Matrix4: .rotateY() has been removed.")};Matrix4$1.prototype.rotateZ=function(){console.error("THREE.Matrix4: .rotateZ() has been removed.")};Matrix4$1.prototype.rotateByAxis=function(){console.error("THREE.Matrix4: .rotateByAxis() has been removed.")};Matrix4$1.prototype.applyToBufferAttribute=function(t){console.warn("THREE.Matrix4: .applyToBufferAttribute() has been removed. Use attribute.applyMatrix4( matrix ) instead.");return t.applyMatrix4(this)};Matrix4$1.prototype.applyToVector3Array=function(){console.error("THREE.Matrix4: .applyToVector3Array() has been removed.")};Matrix4$1.prototype.makeFrustum=function(t,e,n,i,r,a){console.warn("THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.");return this.makePerspective(t,e,i,n,r,a)};Matrix4$1.prototype.getInverse=function(t){console.warn("THREE.Matrix4: .getInverse() has been removed. Use matrixInv.copy( matrix ).invert(); instead.");return this.copy(t).invert()};Plane.prototype.isIntersectionLine=function(t){console.warn("THREE.Plane: .isIntersectionLine() has been renamed to .intersectsLine().");return this.intersectsLine(t)};Quaternion$1.prototype.multiplyVector3=function(t){console.warn("THREE.Quaternion: .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");return t.applyQuaternion(this)};Quaternion$1.prototype.inverse=function(){console.warn("THREE.Quaternion: .inverse() has been renamed to invert().");return this.invert()};Ray.prototype.isIntersectionBox=function(t){console.warn("THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().");return this.intersectsBox(t)};Ray.prototype.isIntersectionPlane=function(t){console.warn("THREE.Ray: .isIntersectionPlane() has been renamed to .intersectsPlane().");return this.intersectsPlane(t)};Ray.prototype.isIntersectionSphere=function(t){console.warn("THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().");return this.intersectsSphere(t)};Triangle.prototype.area=function(){console.warn("THREE.Triangle: .area() has been renamed to .getArea().");return this.getArea()};Triangle.prototype.barycoordFromPoint=function(t,e){console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");return this.getBarycoord(t,e)};Triangle.prototype.midpoint=function(t){console.warn("THREE.Triangle: .midpoint() has been renamed to .getMidpoint().");return this.getMidpoint(t)};Triangle.prototypenormal=function(t){console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");return this.getNormal(t)};Triangle.prototype.plane=function(t){console.warn("THREE.Triangle: .plane() has been renamed to .getPlane().");return this.getPlane(t)};Triangle.barycoordFromPoint=function(t,e,n,i,r){console.warn("THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().");return Triangle.getBarycoord(t,e,n,i,r)};Triangle.normal=function(t,e,n,i){console.warn("THREE.Triangle: .normal() has been renamed to .getNormal().");return Triangle.getNormal(t,e,n,i)};Shape.prototype.extractAllPoints=function(t){console.warn("THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.");return this.extractPoints(t)};Shape.prototype.extrude=function(t){console.warn("THREE.Shape: .extrude() has been removed. Use ExtrudeGeometry() instead.");return new ExtrudeGeometry(this,t)};Shape.prototype.makeGeometry=function(t){console.warn("THREE.Shape: .makeGeometry() has been removed. Use ShapeGeometry() instead.");return new ShapeGeometry(this,t)};Vector2.prototype.fromAttribute=function(t,e,n){console.warn("THREE.Vector2: .fromAttribute() has been renamed to .fromBufferAttribute().");return this.fromBufferAttribute(t,e,n)};Vector2.prototype.distanceToManhattan=function(t){console.warn("THREE.Vector2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");return this.manhattanDistanceTo(t)};Vector2.prototype.lengthManhattan=function(){console.warn("THREE.Vector2: .lengthManhattan() has been renamed to .manhattanLength().");return this.manhattanLength()};Vector3$1.prototype.setEulerFromRotationMatrix=function(){console.error("THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.")};Vector3$1.prototype.setEulerFromQuaternion=function(){console.error("THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.")};Vector3$1.prototype.getPositionFromMatrix=function(t){console.warn("THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().");return this.setFromMatrixPosition(t)};Vector3$1.prototype.getScaleFromMatrix=function(t){console.warn("THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().");return this.setFromMatrixScale(t)};Vector3$1.prototype.getColumnFromMatrix=function(t,e){console.warn("THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().");return this.setFromMatrixColumn(e,t)};Vector3$1.prototype.applyProjection=function(t){console.warn("THREE.Vector3: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.");return this.applyMatrix4(t)};Vector3$1.prototype.fromAttribute=function(t,e,n){console.warn("THREE.Vector3: .fromAttribute() has been renamed to .fromBufferAttribute().");return this.fromBufferAttribute(t,e,n)};Vector3$1.prototype.distanceToManhattan=function(t){console.warn("THREE.Vector3: .distanceToManhattan() has been renamed to .manhattanDistanceTo().");return this.manhattanDistanceTo(t)};Vector3$1.prototype.lengthManhattan=function(){console.warn("THREE.Vector3: .lengthManhattan() has been renamed to .manhattanLength().");return this.manhattanLength()};Vector4.prototype.fromAttribute=function(t,e,n){console.warn("THREE.Vector4: .fromAttribute() has been renamed to .fromBufferAttribute().");return this.fromBufferAttribute(t,e,n)};Vector4.prototype.lengthManhattan=function(){console.warn("THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().");return this.manhattanLength()};Object3D$1.prototype.getChildByName=function(t){console.warn("THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().");return this.getObjectByName(t)};Object3D$1.prototype.renderDepth=function(){console.warn("THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.")};Object3D$1.prototype.translate=function(t,e){console.warn("THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.");return this.translateOnAxis(e,t)};Object3D$1.prototype.getWorldRotation=function(){console.error("THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.")};Object3D$1.prototype.applyMatrix=function(t){console.warn("THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().");return this.applyMatrix4(t)};Object.defineProperties(Object3D$1.prototype,{eulerOrder:{get:function(){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");return this.rotation.order},set:function(t){console.warn("THREE.Object3D: .eulerOrder is now .rotation.order.");this.rotation.order=t}},useQuaternion:{get:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")},set:function(){console.warn("THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.")}}});Mesh$1.prototype.setDrawMode=function(){console.error("THREE.Mesh: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")};Object.defineProperties(Mesh$1.prototype,{drawMode:{get:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.");return TrianglesDrawMode},set:function(){console.error("THREE.Mesh: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via BufferGeometryUtils.toTrianglesDrawMode() if necessary.")}}});SkinnedMesh.prototype.initBones=function(){console.error("THREE.SkinnedMesh: initBones() has been removed.")};PerspectiveCamera.prototype.setLens=function(t,e){console.warn("THREE.PerspectiveCamera.setLens is deprecated. "+"Use .setFocalLength and .filmGauge for a photographic setup.");if(e!==undefined)this.filmGauge=e;this.setFocalLength(t)};Object.defineProperties(Light.prototype,{onlyShadow:{set:function(){console.warn("THREE.Light: .onlyShadow has been removed.")}},shadowCameraFov:{set:function(t){console.warn("THREE.Light: .shadowCameraFov is now .shadow.camera.fov.");this.shadow.camera.fov=t}},shadowCameraLeft:{set:function(t){console.warn("THREE.Light: .shadowCameraLeft is now .shadow.camera.left.");this.shadow.camera.left=t}},shadowCameraRight:{set:function(t){console.warn("THREE.Light: .shadowCameraRight is now .shadow.camera.right.");this.shadow.camera.right=t}},shadowCameraTop:{set:function(t){console.warn("THREE.Light: .shadowCameraTop is now .shadow.camera.top.");this.shadow.camera.top=t}},shadowCameraBottom:{set:function(t){console.warn("THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.");this.shadow.camera.bottom=t}},shadowCameraNear:{set:function(t){console.warn("THREE.Light: .shadowCameraNear is now .shadow.camera.near.");this.shadow.camera.near=t}},shadowCameraFar:{set:function(t){console.warn("THREE.Light: .shadowCameraFar is now .shadow.camera.far.");this.shadow.camera.far=t}},shadowCameraVisible:{set:function(){console.warn("THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.")}},shadowBias:{set:function(t){console.warn("THREE.Light: .shadowBias is now .shadow.bias.");this.shadow.bias=t}},shadowDarkness:{set:function(){console.warn("THREE.Light: .shadowDarkness has been removed.")}},shadowMapWidth:{set:function(t){console.warn("THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.");this.shadow.mapSize.width=t}},shadowMapHeight:{set:function(t){console.warn("THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.");this.shadow.mapSize.height=t}}});Object.defineProperties(BufferAttribute.prototype,{length:{get:function(){console.warn("THREE.BufferAttribute: .length has been deprecated. Use .count instead.");return this.array.length}},dynamic:{get:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");return this.usage===DynamicDrawUsage},set:function(){console.warn("THREE.BufferAttribute: .dynamic has been deprecated. Use .usage instead.");this.setUsage(DynamicDrawUsage)}}});BufferAttribute.prototype.setDynamic=function(t){console.warn("THREE.BufferAttribute: .setDynamic() has been deprecated. Use .setUsage() instead.");this.setUsage(t===true?DynamicDrawUsage:StaticDrawUsage);return this};BufferAttribute.prototype.copyIndicesArray=function(){console.error("THREE.BufferAttribute: .copyIndicesArray() has been removed.")},BufferAttribute.prototype.setArray=function(){console.error("THREE.BufferAttribute: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")};BufferGeometry$1.prototype.addIndex=function(t){console.warn("THREE.BufferGeometry: .addIndex() has been renamed to .setIndex().");this.setIndex(t)};BufferGeometry$1.prototype.addAttribute=function(t,e){console.warn("THREE.BufferGeometry: .addAttribute() has been renamed to .setAttribute().");if(!(e&&e.isBufferAttribute)&&!(e&&e.isInterleavedBufferAttribute)){console.warn("THREE.BufferGeometry: .addAttribute() now expects ( name, attribute ).");return this.setAttribute(t,new BufferAttribute(arguments[1],arguments[2]))}if(t==="index"){console.warn("THREE.BufferGeometry.addAttribute: Use .setIndex() for index attribute.");this.setIndex(e);return this}return this.setAttribute(t,e)};BufferGeometry$1.prototype.addDrawCall=function(t,e,n){if(n!==undefined){console.warn("THREE.BufferGeometry: .addDrawCall() no longer supports indexOffset.")}console.warn("THREE.BufferGeometry: .addDrawCall() is now .addGroup().");this.addGroup(t,e)};BufferGeometry$1.prototype.clearDrawCalls=function(){console.warn("THREE.BufferGeometry: .clearDrawCalls() is now .clearGroups().");this.clearGroups()};BufferGeometry$1.prototype.computeOffsets=function(){console.warn("THREE.BufferGeometry: .computeOffsets() has been removed.")};BufferGeometry$1.prototype.removeAttribute=function(t){console.warn("THREE.BufferGeometry: .removeAttribute() has been renamed to .deleteAttribute().");return this.deleteAttribute(t)};BufferGeometry$1.prototype.applyMatrix=function(t){console.warn("THREE.BufferGeometry: .applyMatrix() has been renamed to .applyMatrix4().");return this.applyMatrix4(t)};Object.defineProperties(BufferGeometry$1.prototype,{drawcalls:{get:function(){console.error("THREE.BufferGeometry: .drawcalls has been renamed to .groups.");return this.groups}},offsets:{get:function(){console.warn("THREE.BufferGeometry: .offsets has been renamed to .groups.");return this.groups}}});InterleavedBuffer.prototype.setDynamic=function(t){console.warn("THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.");this.setUsage(t===true?DynamicDrawUsage:StaticDrawUsage);return this};InterleavedBuffer.prototype.setArray=function(){console.error("THREE.InterleavedBuffer: .setArray has been removed. Use BufferGeometry .setAttribute to replace/resize attribute buffers")};ExtrudeGeometry.prototype.getArrays=function(){console.error("THREE.ExtrudeGeometry: .getArrays() has been removed.")};ExtrudeGeometry.prototype.addShapeList=function(){console.error("THREE.ExtrudeGeometry: .addShapeList() has been removed.")};ExtrudeGeometry.prototype.addShape=function(){console.error("THREE.ExtrudeGeometry: .addShape() has been removed.")};Scene.prototype.dispose=function(){console.error("THREE.Scene: .dispose() has been removed.")};Uniform.prototype.onUpdate=function(){console.warn("THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.");return this};Object.defineProperties(Material.prototype,{wrapAround:{get:function(){console.warn("THREE.Material: .wrapAround has been removed.")},set:function(){console.warn("THREE.Material: .wrapAround has been removed.")}},overdraw:{get:function(){console.warn("THREE.Material: .overdraw has been removed.")},set:function(){console.warn("THREE.Material: .overdraw has been removed.")}},wrapRGB:{get:function(){console.warn("THREE.Material: .wrapRGB has been removed.");return new Color$1}},shading:{get:function(){console.error("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.")},set:function(t){console.warn("THREE."+this.type+": .shading has been removed. Use the boolean .flatShading instead.");this.flatShading=t===FlatShading}},stencilMask:{get:function(){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead.");return this.stencilFuncMask},set:function(t){console.warn("THREE."+this.type+": .stencilMask has been removed. Use .stencilFuncMask instead.");this.stencilFuncMask=t}},vertexTangents:{get:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")},set:function(){console.warn("THREE."+this.type+": .vertexTangents has been removed.")}}});Object.defineProperties(ShaderMaterial.prototype,{derivatives:{get:function(){console.warn("THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");return this.extensions.derivatives},set:function(t){console.warn("THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.");this.extensions.derivatives=t}}});WebGLRenderer.prototype.clearTarget=function(t,e,n,i){console.warn("THREE.WebGLRenderer: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.");this.setRenderTarget(t);this.clear(e,n,i)};WebGLRenderer.prototype.animate=function(t){console.warn("THREE.WebGLRenderer: .animate() is now .setAnimationLoop().");this.setAnimationLoop(t)};WebGLRenderer.prototype.getCurrentRenderTarget=function(){console.warn("THREE.WebGLRenderer: .getCurrentRenderTarget() is now .getRenderTarget().");return this.getRenderTarget()};WebGLRenderer.prototype.getMaxAnisotropy=function(){console.warn("THREE.WebGLRenderer: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().");return this.capabilities.getMaxAnisotropy()};WebGLRenderer.prototype.getPrecision=function(){console.warn("THREE.WebGLRenderer: .getPrecision() is now .capabilities.precision.");return this.capabilities.precision};WebGLRenderer.prototype.resetGLState=function(){console.warn("THREE.WebGLRenderer: .resetGLState() is now .state.reset().");return this.state.reset()};WebGLRenderer.prototype.supportsFloatTextures=function(){console.warn("THREE.WebGLRenderer: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' ).");return this.extensions.get("OES_texture_float")};WebGLRenderer.prototype.supportsHalfFloatTextures=function(){console.warn("THREE.WebGLRenderer: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' ).");return this.extensions.get("OES_texture_half_float")};WebGLRenderer.prototype.supportsStandardDerivatives=function(){console.warn("THREE.WebGLRenderer: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' ).");return this.extensions.get("OES_standard_derivatives")};WebGLRenderer.prototype.supportsCompressedTextureS3TC=function(){console.warn("THREE.WebGLRenderer: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' ).");return this.extensions.get("WEBGL_compressed_texture_s3tc")};WebGLRenderer.prototype.supportsCompressedTexturePVRTC=function(){console.warn("THREE.WebGLRenderer: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' ).");return this.extensions.get("WEBGL_compressed_texture_pvrtc")};WebGLRenderer.prototype.supportsBlendMinMax=function(){console.warn("THREE.WebGLRenderer: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' ).");return this.extensions.get("EXT_blend_minmax")};WebGLRenderer.prototype.supportsVertexTextures=function(){console.warn("THREE.WebGLRenderer: .supportsVertexTextures() is now .capabilities.vertexTextures.");return this.capabilities.vertexTextures};WebGLRenderer.prototype.supportsInstancedArrays=function(){console.warn("THREE.WebGLRenderer: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' ).");return this.extensions.get("ANGLE_instanced_arrays")};WebGLRenderer.prototype.enableScissorTest=function(t){console.warn("THREE.WebGLRenderer: .enableScissorTest() is now .setScissorTest().");this.setScissorTest(t)};WebGLRenderer.prototype.initMaterial=function(){console.warn("THREE.WebGLRenderer: .initMaterial() has been removed.")};WebGLRenderer.prototype.addPrePlugin=function(){console.warn("THREE.WebGLRenderer: .addPrePlugin() has been removed.")};WebGLRenderer.prototype.addPostPlugin=function(){console.warn("THREE.WebGLRenderer: .addPostPlugin() has been removed.")};WebGLRenderer.prototype.updateShadowMap=function(){console.warn("THREE.WebGLRenderer: .updateShadowMap() has been removed.")};WebGLRenderer.prototype.setFaceCulling=function(){console.warn("THREE.WebGLRenderer: .setFaceCulling() has been removed.")};WebGLRenderer.prototype.allocTextureUnit=function(){console.warn("THREE.WebGLRenderer: .allocTextureUnit() has been removed.")};WebGLRenderer.prototype.setTexture=function(){console.warn("THREE.WebGLRenderer: .setTexture() has been removed.")};WebGLRenderer.prototype.setTexture2D=function(){console.warn("THREE.WebGLRenderer: .setTexture2D() has been removed.")};WebGLRenderer.prototype.setTextureCube=function(){console.warn("THREE.WebGLRenderer: .setTextureCube() has been removed.")};WebGLRenderer.prototype.getActiveMipMapLevel=function(){console.warn("THREE.WebGLRenderer: .getActiveMipMapLevel() is now .getActiveMipmapLevel().");return this.getActiveMipmapLevel()};Object.defineProperties(WebGLRenderer.prototype,{shadowMapEnabled:{get:function(){return this.shadowMap.enabled},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapEnabled is now .shadowMap.enabled.");this.shadowMap.enabled=t}},shadowMapType:{get:function(){return this.shadowMap.type},set:function(t){console.warn("THREE.WebGLRenderer: .shadowMapType is now .shadowMap.type.");this.shadowMap.type=t}},shadowMapCullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.");return undefined},set:function(){console.warn("THREE.WebGLRenderer: .shadowMapCullFace has been removed. Set Material.shadowSide instead.")}},context:{get:function(){console.warn("THREE.WebGLRenderer: .context has been removed. Use .getContext() instead.");return this.getContext()}},vr:{get:function(){console.warn("THREE.WebGLRenderer: .vr has been renamed to .xr");return this.xr}},gammaInput:{get:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.");return false},set:function(){console.warn("THREE.WebGLRenderer: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.")}},gammaOutput:{get:function(){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.");return false},set:function(t){console.warn("THREE.WebGLRenderer: .gammaOutput has been removed. Set WebGLRenderer.outputEncoding instead.");this.outputEncoding=t===true?sRGBEncoding:LinearEncoding}},toneMappingWhitePoint:{get:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.");return 1},set:function(){console.warn("THREE.WebGLRenderer: .toneMappingWhitePoint has been removed.")}},gammaFactor:{get:function(){console.warn("THREE.WebGLRenderer: .gammaFactor has been removed.");return 2},set:function(){console.warn("THREE.WebGLRenderer: .gammaFactor has been removed.")}}});Object.defineProperties(WebGLShadowMap.prototype,{cullFace:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.");return undefined},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.")}},renderReverseSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.");return undefined},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.")}},renderSingleSided:{get:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.");return undefined},set:function(){console.warn("THREE.WebGLRenderer: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.")}}});function WebGLRenderTargetCube(t,e,n){console.warn("THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).");return new WebGLCubeRenderTarget(t,n)}Object.defineProperties(WebGLRenderTarget.prototype,{wrapS:{get:function(){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");return this.texture.wrapS},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.");this.texture.wrapS=t}},wrapT:{get:function(){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");return this.texture.wrapT},set:function(t){console.warn("THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.");this.texture.wrapT=t}},magFilter:{get:function(){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");return this.texture.magFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.");this.texture.magFilter=t}},minFilter:{get:function(){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");return this.texture.minFilter},set:function(t){console.warn("THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.");this.texture.minFilter=t}},anisotropy:{get:function(){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");return this.texture.anisotropy},set:function(t){console.warn("THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.");this.texture.anisotropy=t}},offset:{get:function(){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");return this.texture.offset},set:function(t){console.warn("THREE.WebGLRenderTarget: .offset is now .texture.offset.");this.texture.offset=t}},repeat:{get:function(){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");return this.texture.repeat},set:function(t){console.warn("THREE.WebGLRenderTarget: .repeat is now .texture.repeat.");this.texture.repeat=t}},format:{get:function(){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");return this.texture.format},set:function(t){console.warn("THREE.WebGLRenderTarget: .format is now .texture.format.");this.texture.format=t}},type:{get:function(){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");return this.texture.type},set:function(t){console.warn("THREE.WebGLRenderTarget: .type is now .texture.type.");this.texture.type=t}},generateMipmaps:{get:function(){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");return this.texture.generateMipmaps},set:function(t){console.warn("THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.");this.texture.generateMipmaps=t}}});Audio.prototype.load=function(t){console.warn("THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.");const e=this;const n=new AudioLoader;n.load(t,(function(t){e.setBuffer(t)}));return this};AudioAnalyser.prototype.getData=function(){console.warn("THREE.AudioAnalyser: .getData() is now .getFrequencyData().");return this.getFrequencyData()};CubeCamera.prototype.updateCubeMap=function(t,e){console.warn("THREE.CubeCamera: .updateCubeMap() is now .update().");return this.update(t,e)};CubeCamera.prototype.clear=function(t,e,n,i){console.warn("THREE.CubeCamera: .clear() is now .renderTarget.clear().");return this.renderTarget.clear(t,e,n,i)};ImageUtils.crossOrigin=undefined;ImageUtils.loadTexture=function(t,e,n,i){console.warn("THREE.ImageUtils.loadTexture has been deprecated. Use THREE.TextureLoader() instead.");const r=new TextureLoader;r.setCrossOrigin(this.crossOrigin);const a=r.load(t,n,undefined,i);if(e)a.mapping=e;return a};ImageUtils.loadTextureCube=function(t,e,n,i){console.warn("THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.CubeTextureLoader() instead.");const r=new CubeTextureLoader;r.setCrossOrigin(this.crossOrigin);const a=r.load(t,n,undefined,i);if(e)a.mapping=e;return a};ImageUtils.loadCompressedTexture=function(){console.error("THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.")};ImageUtils.loadCompressedTextureCube=function(){console.error("THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.")};function CanvasRenderer(){console.error("THREE.CanvasRenderer has been removed")}function JSONLoader(){console.error("THREE.JSONLoader has been removed.")}const SceneUtils={createMultiMaterialObject:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")},detach:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")},attach:function(){console.error("THREE.SceneUtils has been moved to /examples/jsm/utils/SceneUtils.js")}};function LensFlare(){console.error("THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js")}function ParametricGeometry(){console.error("THREE.ParametricGeometry has been moved to /examples/jsm/geometries/ParametricGeometry.js");return new BufferGeometry$1}function TextGeometry(){console.error("THREE.TextGeometry has been moved to /examples/jsm/geometries/TextGeometry.js");return new BufferGeometry$1}function FontLoader(){console.error("THREE.FontLoader has been moved to /examples/jsm/loaders/FontLoader.js")}function Font(){console.error("THREE.Font has been moved to /examples/jsm/loaders/FontLoader.js")}function ImmediateRenderObject(){console.error("THREE.ImmediateRenderObject has been removed.")}function WebGLMultisampleRenderTarget(t,e,n){console.error('THREE.WebGLMultisampleRenderTarget has been removed. Use a normal render target and set the "samples" property to greater 0 to enable multisampling.');const i=new WebGLRenderTarget(t,e,n);i.samples=4;return i}function DataTexture2DArray(t,e,n,i){console.warn("THREE.DataTexture2DArray has been renamed to DataArrayTexture.");return new DataArrayTexture(t,e,n,i)}function DataTexture3D(t,e,n,i){console.warn("THREE.DataTexture3D has been renamed to Data3DTexture.");return new Data3DTexture(t,e,n,i)}if(typeof __THREE_DEVTOOLS__!=="undefined"){__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:REVISION}}))}if(typeof window!=="undefined"){if(window.__THREE__){console.warn("WARNING: Multiple instances of Three.js being imported.")}else{window.__THREE__=REVISION}}var THREE$1=Object.freeze({__proto__:null,ACESFilmicToneMapping:ACESFilmicToneMapping,AddEquation:AddEquation,AddOperation:AddOperation,AdditiveAnimationBlendMode:AdditiveAnimationBlendMode,AdditiveBlending:AdditiveBlending,AlphaFormat:AlphaFormat,AlwaysDepth:AlwaysDepth,AlwaysStencilFunc:AlwaysStencilFunc,AmbientLight:AmbientLight,AmbientLightProbe:AmbientLightProbe,AnimationClip:AnimationClip,AnimationLoader:AnimationLoader,AnimationMixer:AnimationMixer,AnimationObjectGroup:AnimationObjectGroup,AnimationUtils:AnimationUtils,ArcCurve:ArcCurve,ArrayCamera:ArrayCamera,ArrowHelper:ArrowHelper,Audio:Audio,AudioAnalyser:AudioAnalyser,AudioContext:AudioContext,AudioListener:AudioListener,AudioLoader:AudioLoader,AxesHelper:AxesHelper,AxisHelper:AxisHelper,BackSide:BackSide,BasicDepthPacking:BasicDepthPacking,BasicShadowMap:BasicShadowMap,BinaryTextureLoader:BinaryTextureLoader,Bone:Bone,BooleanKeyframeTrack:BooleanKeyframeTrack,BoundingBoxHelper:BoundingBoxHelper,Box2:Box2,Box3:Box3,Box3Helper:Box3Helper,BoxBufferGeometry:BoxGeometry$1,BoxGeometry:BoxGeometry$1,BoxHelper:BoxHelper,BufferAttribute:BufferAttribute,BufferGeometry:BufferGeometry$1,BufferGeometryLoader:BufferGeometryLoader,ByteType:ByteType,Cache:Cache,Camera:Camera,CameraHelper:CameraHelper,CanvasRenderer:CanvasRenderer,CanvasTexture:CanvasTexture,CatmullRomCurve3:CatmullRomCurve3,CineonToneMapping:CineonToneMapping,CircleBufferGeometry:CircleGeometry,CircleGeometry:CircleGeometry,ClampToEdgeWrapping:ClampToEdgeWrapping,Clock:Clock,Color:Color$1,ColorKeyframeTrack:ColorKeyframeTrack,CompressedTexture:CompressedTexture,CompressedTextureLoader:CompressedTextureLoader,ConeBufferGeometry:ConeGeometry,ConeGeometry:ConeGeometry,CubeCamera:CubeCamera,CubeReflectionMapping:CubeReflectionMapping,CubeRefractionMapping:CubeRefractionMapping,CubeTexture:CubeTexture,CubeTextureLoader:CubeTextureLoader,CubeUVReflectionMapping:CubeUVReflectionMapping,CubeUVRefractionMapping:CubeUVRefractionMapping,CubicBezierCurve:CubicBezierCurve,CubicBezierCurve3:CubicBezierCurve3,CubicInterpolant:CubicInterpolant,CullFaceBack:CullFaceBack,CullFaceFront:CullFaceFront,CullFaceFrontBack:CullFaceFrontBack,CullFaceNone:CullFaceNone,Curve:Curve,CurvePath:CurvePath,CustomBlending:CustomBlending,CustomToneMapping:CustomToneMapping,CylinderBufferGeometry:CylinderGeometry$1,CylinderGeometry:CylinderGeometry$1,Cylindrical:Cylindrical,Data3DTexture:Data3DTexture,DataArrayTexture:DataArrayTexture,DataTexture:DataTexture,DataTexture2DArray:DataTexture2DArray,DataTexture3D:DataTexture3D,DataTextureLoader:DataTextureLoader,DataUtils:DataUtils,DecrementStencilOp:DecrementStencilOp,DecrementWrapStencilOp:DecrementWrapStencilOp,DefaultLoadingManager:DefaultLoadingManager,DepthFormat:DepthFormat,DepthStencilFormat:DepthStencilFormat,DepthTexture:DepthTexture,DirectionalLight:DirectionalLight,DirectionalLightHelper:DirectionalLightHelper,DiscreteInterpolant:DiscreteInterpolant,DodecahedronBufferGeometry:DodecahedronGeometry,DodecahedronGeometry:DodecahedronGeometry,DoubleSide:DoubleSide$1,DstAlphaFactor:DstAlphaFactor,DstColorFactor:DstColorFactor,DynamicBufferAttribute:DynamicBufferAttribute,DynamicCopyUsage:DynamicCopyUsage,DynamicDrawUsage:DynamicDrawUsage,DynamicReadUsage:DynamicReadUsage,EdgesGeometry:EdgesGeometry,EdgesHelper:EdgesHelper,EllipseCurve:EllipseCurve,EqualDepth:EqualDepth,EqualStencilFunc:EqualStencilFunc,EquirectangularReflectionMapping:EquirectangularReflectionMapping,EquirectangularRefractionMapping:EquirectangularRefractionMapping,Euler:Euler$1,EventDispatcher:EventDispatcher,ExtrudeBufferGeometry:ExtrudeGeometry,ExtrudeGeometry:ExtrudeGeometry,FaceColors:FaceColors,FileLoader:FileLoader,FlatShading:FlatShading,Float16BufferAttribute:Float16BufferAttribute,Float32Attribute:Float32Attribute,Float32BufferAttribute:Float32BufferAttribute$1,Float64Attribute:Float64Attribute,Float64BufferAttribute:Float64BufferAttribute,FloatType:FloatType,Fog:Fog,FogExp2:FogExp2,Font:Font,FontLoader:FontLoader,FramebufferTexture:FramebufferTexture,FrontSide:FrontSide,Frustum:Frustum,GLBufferAttribute:GLBufferAttribute,GLSL1:GLSL1,GLSL3:GLSL3,GreaterDepth:GreaterDepth,GreaterEqualDepth:GreaterEqualDepth,GreaterEqualStencilFunc:GreaterEqualStencilFunc,GreaterStencilFunc:GreaterStencilFunc,GridHelper:GridHelper,Group:Group,HalfFloatType:HalfFloatType,HemisphereLight:HemisphereLight,HemisphereLightHelper:HemisphereLightHelper,HemisphereLightProbe:HemisphereLightProbe,IcosahedronBufferGeometry:IcosahedronGeometry,IcosahedronGeometry:IcosahedronGeometry,ImageBitmapLoader:ImageBitmapLoader,ImageLoader:ImageLoader,ImageUtils:ImageUtils,ImmediateRenderObject:ImmediateRenderObject,IncrementStencilOp:IncrementStencilOp,IncrementWrapStencilOp:IncrementWrapStencilOp,InstancedBufferAttribute:InstancedBufferAttribute,InstancedBufferGeometry:InstancedBufferGeometry,InstancedInterleavedBuffer:InstancedInterleavedBuffer,InstancedMesh:InstancedMesh,Int16Attribute:Int16Attribute,Int16BufferAttribute:Int16BufferAttribute,Int32Attribute:Int32Attribute,Int32BufferAttribute:Int32BufferAttribute,Int8Attribute:Int8Attribute,Int8BufferAttribute:Int8BufferAttribute,IntType:IntType,InterleavedBuffer:InterleavedBuffer,InterleavedBufferAttribute:InterleavedBufferAttribute,Interpolant:Interpolant,InterpolateDiscrete:InterpolateDiscrete,InterpolateLinear:InterpolateLinear,InterpolateSmooth:InterpolateSmooth,InvertStencilOp:InvertStencilOp,JSONLoader:JSONLoader,KeepStencilOp:KeepStencilOp,KeyframeTrack:KeyframeTrack,LOD:LOD,LatheBufferGeometry:LatheGeometry,LatheGeometry:LatheGeometry,Layers:Layers,LensFlare:LensFlare,LessDepth:LessDepth,LessEqualDepth:LessEqualDepth,LessEqualStencilFunc:LessEqualStencilFunc,LessStencilFunc:LessStencilFunc,Light:Light,LightProbe:LightProbe,Line:Line$1,Line3:Line3,LineBasicMaterial:LineBasicMaterial$1,LineCurve:LineCurve,LineCurve3:LineCurve3,LineDashedMaterial:LineDashedMaterial,LineLoop:LineLoop,LinePieces:LinePieces,LineSegments:LineSegments,LineStrip:LineStrip,LinearEncoding:LinearEncoding,LinearFilter:LinearFilter,LinearInterpolant:LinearInterpolant,LinearMipMapLinearFilter:LinearMipMapLinearFilter,LinearMipMapNearestFilter:LinearMipMapNearestFilter,LinearMipmapLinearFilter:LinearMipmapLinearFilter,LinearMipmapNearestFilter:LinearMipmapNearestFilter,LinearToneMapping:LinearToneMapping,Loader:Loader$1,LoaderUtils:LoaderUtils$1,LoadingManager:LoadingManager,LoopOnce:LoopOnce,LoopPingPong:LoopPingPong,LoopRepeat:LoopRepeat,LuminanceAlphaFormat:LuminanceAlphaFormat,LuminanceFormat:LuminanceFormat,MOUSE:MOUSE,Material:Material,MaterialLoader:MaterialLoader,Math:MathUtils,MathUtils:MathUtils,Matrix3:Matrix3,Matrix4:Matrix4$1,MaxEquation:MaxEquation,Mesh:Mesh$1,MeshBasicMaterial:MeshBasicMaterial$1,MeshDepthMaterial:MeshDepthMaterial,MeshDistanceMaterial:MeshDistanceMaterial,MeshFaceMaterial:MeshFaceMaterial,MeshLambertMaterial:MeshLambertMaterial,MeshMatcapMaterial:MeshMatcapMaterial,MeshNormalMaterial:MeshNormalMaterial,MeshPhongMaterial:MeshPhongMaterial,MeshPhysicalMaterial:MeshPhysicalMaterial,MeshStandardMaterial:MeshStandardMaterial,MeshToonMaterial:MeshToonMaterial,MinEquation:MinEquation,MirroredRepeatWrapping:MirroredRepeatWrapping,MixOperation:MixOperation,MultiMaterial:MultiMaterial,MultiplyBlending:MultiplyBlending,MultiplyOperation:MultiplyOperation,NearestFilter:NearestFilter,NearestMipMapLinearFilter:NearestMipMapLinearFilter,NearestMipMapNearestFilter:NearestMipMapNearestFilter,NearestMipmapLinearFilter:NearestMipmapLinearFilter,NearestMipmapNearestFilter:NearestMipmapNearestFilter,NeverDepth:NeverDepth,NeverStencilFunc:NeverStencilFunc,NoBlending:NoBlending,NoColors:NoColors,NoToneMapping:NoToneMapping,NormalAnimationBlendMode:NormalAnimationBlendMode,NormalBlending:NormalBlending,NotEqualDepth:NotEqualDepth,NotEqualStencilFunc:NotEqualStencilFunc,NumberKeyframeTrack:NumberKeyframeTrack,Object3D:Object3D$1,ObjectLoader:ObjectLoader,ObjectSpaceNormalMap:ObjectSpaceNormalMap,OctahedronBufferGeometry:OctahedronGeometry$1,OctahedronGeometry:OctahedronGeometry$1,OneFactor:OneFactor,OneMinusDstAlphaFactor:OneMinusDstAlphaFactor,OneMinusDstColorFactor:OneMinusDstColorFactor,OneMinusSrcAlphaFactor:OneMinusSrcAlphaFactor,OneMinusSrcColorFactor:OneMinusSrcColorFactor,OrthographicCamera:OrthographicCamera,PCFShadowMap:PCFShadowMap,PCFSoftShadowMap:PCFSoftShadowMap,PMREMGenerator:PMREMGenerator,ParametricGeometry:ParametricGeometry,Particle:Particle,ParticleBasicMaterial:ParticleBasicMaterial,ParticleSystem:ParticleSystem,ParticleSystemMaterial:ParticleSystemMaterial,Path:Path,PerspectiveCamera:PerspectiveCamera,Plane:Plane,PlaneBufferGeometry:PlaneGeometry$1,PlaneGeometry:PlaneGeometry$1,PlaneHelper:PlaneHelper,PointCloud:PointCloud,PointCloudMaterial:PointCloudMaterial,PointLight:PointLight,PointLightHelper:PointLightHelper,Points:Points,PointsMaterial:PointsMaterial,PolarGridHelper:PolarGridHelper,PolyhedronBufferGeometry:PolyhedronGeometry,PolyhedronGeometry:PolyhedronGeometry,PositionalAudio:PositionalAudio,PropertyBinding:PropertyBinding,PropertyMixer:PropertyMixer,QuadraticBezierCurve:QuadraticBezierCurve,QuadraticBezierCurve3:QuadraticBezierCurve3,Quaternion:Quaternion$1,QuaternionKeyframeTrack:QuaternionKeyframeTrack,QuaternionLinearInterpolant:QuaternionLinearInterpolant,REVISION:REVISION,RGBADepthPacking:RGBADepthPacking,RGBAFormat:RGBAFormat,RGBAIntegerFormat:RGBAIntegerFormat,RGBA_ASTC_10x10_Format:RGBA_ASTC_10x10_Format,RGBA_ASTC_10x5_Format:RGBA_ASTC_10x5_Format,RGBA_ASTC_10x6_Format:RGBA_ASTC_10x6_Format,RGBA_ASTC_10x8_Format:RGBA_ASTC_10x8_Format,RGBA_ASTC_12x10_Format:RGBA_ASTC_12x10_Format,RGBA_ASTC_12x12_Format:RGBA_ASTC_12x12_Format,RGBA_ASTC_4x4_Format:RGBA_ASTC_4x4_Format,RGBA_ASTC_5x4_Format:RGBA_ASTC_5x4_Format,RGBA_ASTC_5x5_Format:RGBA_ASTC_5x5_Format,RGBA_ASTC_6x5_Format:RGBA_ASTC_6x5_Format,RGBA_ASTC_6x6_Format:RGBA_ASTC_6x6_Format,RGBA_ASTC_8x5_Format:RGBA_ASTC_8x5_Format,RGBA_ASTC_8x6_Format:RGBA_ASTC_8x6_Format,RGBA_ASTC_8x8_Format:RGBA_ASTC_8x8_Format,RGBA_BPTC_Format:RGBA_BPTC_Format,RGBA_ETC2_EAC_Format:RGBA_ETC2_EAC_Format,RGBA_PVRTC_2BPPV1_Format:RGBA_PVRTC_2BPPV1_Format,RGBA_PVRTC_4BPPV1_Format:RGBA_PVRTC_4BPPV1_Format,RGBA_S3TC_DXT1_Format:RGBA_S3TC_DXT1_Format,RGBA_S3TC_DXT3_Format:RGBA_S3TC_DXT3_Format,RGBA_S3TC_DXT5_Format:RGBA_S3TC_DXT5_Format,RGBFormat:RGBFormat,RGB_ETC1_Format:RGB_ETC1_Format,RGB_ETC2_Format:RGB_ETC2_Format,RGB_PVRTC_2BPPV1_Format:RGB_PVRTC_2BPPV1_Format,RGB_PVRTC_4BPPV1_Format:RGB_PVRTC_4BPPV1_Format,RGB_S3TC_DXT1_Format:RGB_S3TC_DXT1_Format,RGFormat:RGFormat,RGIntegerFormat:RGIntegerFormat,RawShaderMaterial:RawShaderMaterial,Ray:Ray,Raycaster:Raycaster$1,RectAreaLight:RectAreaLight,RedFormat:RedFormat,RedIntegerFormat:RedIntegerFormat,ReinhardToneMapping:ReinhardToneMapping,RepeatWrapping:RepeatWrapping,ReplaceStencilOp:ReplaceStencilOp,ReverseSubtractEquation:ReverseSubtractEquation,RingBufferGeometry:RingGeometry,RingGeometry:RingGeometry,Scene:Scene,SceneUtils:SceneUtils,ShaderChunk:ShaderChunk,ShaderLib:ShaderLib,ShaderMaterial:ShaderMaterial,ShadowMaterial:ShadowMaterial,Shape:Shape,ShapeBufferGeometry:ShapeGeometry,ShapeGeometry:ShapeGeometry,ShapePath:ShapePath,ShapeUtils:ShapeUtils,ShortType:ShortType,Skeleton:Skeleton,SkeletonHelper:SkeletonHelper,SkinnedMesh:SkinnedMesh,SmoothShading:SmoothShading,Sphere:Sphere,SphereBufferGeometry:SphereGeometry$1,SphereGeometry:SphereGeometry$1,Spherical:Spherical,SphericalHarmonics3:SphericalHarmonics3,SplineCurve:SplineCurve,SpotLight:SpotLight,SpotLightHelper:SpotLightHelper,Sprite:Sprite,SpriteMaterial:SpriteMaterial,SrcAlphaFactor:SrcAlphaFactor,SrcAlphaSaturateFactor:SrcAlphaSaturateFactor,SrcColorFactor:SrcColorFactor,StaticCopyUsage:StaticCopyUsage,StaticDrawUsage:StaticDrawUsage,StaticReadUsage:StaticReadUsage,StereoCamera:StereoCamera,StreamCopyUsage:StreamCopyUsage,StreamDrawUsage:StreamDrawUsage,StreamReadUsage:StreamReadUsage,StringKeyframeTrack:StringKeyframeTrack,SubtractEquation:SubtractEquation,SubtractiveBlending:SubtractiveBlending,TOUCH:TOUCH,TangentSpaceNormalMap:TangentSpaceNormalMap,TetrahedronBufferGeometry:TetrahedronGeometry,TetrahedronGeometry:TetrahedronGeometry,TextGeometry:TextGeometry,Texture:Texture,TextureLoader:TextureLoader,TorusBufferGeometry:TorusGeometry$1,TorusGeometry:TorusGeometry$1,TorusKnotBufferGeometry:TorusKnotGeometry,TorusKnotGeometry:TorusKnotGeometry,Triangle:Triangle,TriangleFanDrawMode:TriangleFanDrawMode,TriangleStripDrawMode:TriangleStripDrawMode,TrianglesDrawMode:TrianglesDrawMode,TubeBufferGeometry:TubeGeometry,TubeGeometry:TubeGeometry,UVMapping:UVMapping,Uint16Attribute:Uint16Attribute,Uint16BufferAttribute:Uint16BufferAttribute,Uint32Attribute:Uint32Attribute,Uint32BufferAttribute:Uint32BufferAttribute,Uint8Attribute:Uint8Attribute,Uint8BufferAttribute:Uint8BufferAttribute,Uint8ClampedAttribute:Uint8ClampedAttribute,Uint8ClampedBufferAttribute:Uint8ClampedBufferAttribute,Uniform:Uniform,UniformsLib:UniformsLib,UniformsUtils:UniformsUtils,UnsignedByteType:UnsignedByteType,UnsignedInt248Type:UnsignedInt248Type,UnsignedIntType:UnsignedIntType,UnsignedShort4444Type:UnsignedShort4444Type,UnsignedShort5551Type:UnsignedShort5551Type,UnsignedShortType:UnsignedShortType,VSMShadowMap:VSMShadowMap,Vector2:Vector2,Vector3:Vector3$1,Vector4:Vector4,VectorKeyframeTrack:VectorKeyframeTrack,Vertex:Vertex,VertexColors:VertexColors,VideoTexture:VideoTexture,WebGL1Renderer:WebGL1Renderer,WebGL3DRenderTarget:WebGL3DRenderTarget,WebGLArrayRenderTarget:WebGLArrayRenderTarget,WebGLCubeRenderTarget:WebGLCubeRenderTarget,WebGLMultipleRenderTargets:WebGLMultipleRenderTargets,WebGLMultisampleRenderTarget:WebGLMultisampleRenderTarget,WebGLRenderTarget:WebGLRenderTarget,WebGLRenderTargetCube:WebGLRenderTargetCube,WebGLRenderer:WebGLRenderer,WebGLUtils:WebGLUtils,WireframeGeometry:WireframeGeometry,WireframeHelper:WireframeHelper,WrapAroundEnding:WrapAroundEnding,XHRLoader:XHRLoader,ZeroCurvatureEnding:ZeroCurvatureEnding,ZeroFactor:ZeroFactor,ZeroSlopeEnding:ZeroSlopeEnding,ZeroStencilOp:ZeroStencilOp,_SRGBAFormat:_SRGBAFormat,sRGBEncoding:sRGBEncoding});class TGALoader extends DataTextureLoader{constructor(t){super(t)}parse(t){function e(t){switch(t.image_type){case h:case p:if(t.colormap_length>256||t.colormap_size!==24||t.colormap_type!==1){console.error("THREE.TGALoader: Invalid type colormap data for indexed type.")}break;case d:case f:case m:case g:if(t.colormap_type){console.error("THREE.TGALoader: Invalid type colormap data for colormap type.")}break;case u:console.error("THREE.TGALoader: No data.");default:console.error('THREE.TGALoader: Invalid type "%s".',t.image_type)}if(t.width<=0||t.height<=0){console.error("THREE.TGALoader: Invalid image size.")}if(t.pixel_size!==8&&t.pixel_size!==16&&t.pixel_size!==24&&t.pixel_size!==32){console.error('THREE.TGALoader: Invalid pixel size "%s".',t.pixel_size)}}function n(t,e,n,i,r){let a,s;const o=n.pixel_size>>3;const l=n.width*n.height*o;if(e){s=r.subarray(i,i+=n.colormap_length*(n.colormap_size>>3))}if(t){a=new Uint8Array(l);let t,e,n;let s=0;const c=new Uint8Array(o);while(s<l){t=r[i++];e=(t&127)+1;if(t&128){for(n=0;n<o;++n){c[n]=r[i++]}for(n=0;n<e;++n){a.set(c,s+n*o)}s+=o*e}else{e*=o;for(n=0;n<e;++n){a[s+n]=r[i++]}s+=e}}}else{a=r.subarray(i,i+=e?n.width*n.height:l)}return{pixel_data:a,palettes:s}}function i(t,e,n,i,r,a,s,o,l){const c=l;let u,h=0,d,f;const p=A.width;for(f=e;f!==i;f+=n){for(d=r;d!==s;d+=a,h++){u=o[h];t[(d+p*f)*4+3]=255;t[(d+p*f)*4+2]=c[u*3+0];t[(d+p*f)*4+1]=c[u*3+1];t[(d+p*f)*4+0]=c[u*3+2]}}return t}function r(t,e,n,i,r,a,s,o){let l,c=0,u,h;const d=A.width;for(h=e;h!==i;h+=n){for(u=r;u!==s;u+=a,c+=2){l=o[c+0]+(o[c+1]<<8);t[(u+d*h)*4+0]=(l&31744)>>7;t[(u+d*h)*4+1]=(l&992)>>2;t[(u+d*h)*4+2]=(l&31)<<3;t[(u+d*h)*4+3]=l&32768?0:255}}return t}function a(t,e,n,i,r,a,s,o){let l=0,c,u;const h=A.width;for(u=e;u!==i;u+=n){for(c=r;c!==s;c+=a,l+=3){t[(c+h*u)*4+3]=255;t[(c+h*u)*4+2]=o[l+0];t[(c+h*u)*4+1]=o[l+1];t[(c+h*u)*4+0]=o[l+2]}}return t}function s(t,e,n,i,r,a,s,o){let l=0,c,u;const h=A.width;for(u=e;u!==i;u+=n){for(c=r;c!==s;c+=a,l+=4){t[(c+h*u)*4+2]=o[l+0];t[(c+h*u)*4+1]=o[l+1];t[(c+h*u)*4+0]=o[l+2];t[(c+h*u)*4+3]=o[l+3]}}return t}function o(t,e,n,i,r,a,s,o){let l,c=0,u,h;const d=A.width;for(h=e;h!==i;h+=n){for(u=r;u!==s;u+=a,c++){l=o[c];t[(u+d*h)*4+0]=l;t[(u+d*h)*4+1]=l;t[(u+d*h)*4+2]=l;t[(u+d*h)*4+3]=255}}return t}function l(t,e,n,i,r,a,s,o){let l=0,c,u;const h=A.width;for(u=e;u!==i;u+=n){for(c=r;c!==s;c+=a,l+=2){t[(c+h*u)*4+0]=o[l+0];t[(c+h*u)*4+1]=o[l+0];t[(c+h*u)*4+2]=o[l+0];t[(c+h*u)*4+3]=o[l+1]}}return t}function c(t,e,n,c,u){let h,d,f,p,m,g;switch((A.flags&_)>>y){default:case b:h=0;f=1;m=e;d=0;p=1;g=n;break;case x:h=0;f=1;m=e;d=n-1;p=-1;g=-1;break;case M:h=e-1;f=-1;m=-1;d=0;p=1;g=n;break;case v:h=e-1;f=-1;m=-1;d=n-1;p=-1;g=-1;break}if(L){switch(A.pixel_size){case 8:o(t,d,p,g,h,f,m,c);break;case 16:l(t,d,p,g,h,f,m,c);break;default:console.error("THREE.TGALoader: Format not supported.");break}}else{switch(A.pixel_size){case 8:i(t,d,p,g,h,f,m,c,u);break;case 16:r(t,d,p,g,h,f,m,c);break;case 24:a(t,d,p,g,h,f,m,c);break;case 32:s(t,d,p,g,h,f,m,c);break;default:console.error("THREE.TGALoader: Format not supported.");break}}return t}const u=0,h=1,d=2,f=3,p=9,m=10,g=11,_=48,y=4,x=0,v=1,b=2,M=3;if(t.length<19)console.error("THREE.TGALoader: Not enough data to contain header.");let w=0;const S=new Uint8Array(t),A={id_length:S[w++],colormap_type:S[w++],image_type:S[w++],colormap_index:S[w++]|S[w++]<<8,colormap_length:S[w++]|S[w++]<<8,colormap_size:S[w++],origin:[S[w++]|S[w++]<<8,S[w++]|S[w++]<<8],width:S[w++]|S[w++]<<8,height:S[w++]|S[w++]<<8,pixel_size:S[w++],flags:S[w++]};e(A);if(A.id_length+w>t.length){console.error("THREE.TGALoader: No data.")}w+=A.id_length;let T=false,E=false,L=false;switch(A.image_type){case p:T=true;E=true;break;case h:E=true;break;case m:T=true;break;case d:break;case g:T=true;L=true;break;case f:L=true;break}const C=new Uint8Array(A.width*A.height*4);const P=n(T,E,A,w,S);c(C,A.width,A.height,P.pixel_data,P.palettes);return{data:C,width:A.width,height:A.height,flipY:true,generateMipmaps:true,minFilter:LinearMipmapLinearFilter}}}class Command{constructor(t){this.id=-1;this.inMemory=false;this.updatable=false;this.type="";this.name="";this.editor=t}toJSON(){const t={};t.type=this.type;t.id=this.id;t.name=this.name;return t}fromJSON(t){this.inMemory=true;this.type=t.type;this.id=t.id;this.name=t.name}}class AddObjectCommand extends Command{constructor(t,e){super(t);this.type="AddObjectCommand";this.object=e;if(e!==undefined){this.name=`Add Object: ${e.name}`}}execute(){this.editor.addObject(this.object);this.editor.select(this.object)}undo(){this.editor.removeObject(this.object);this.editor.deselect()}toJSON(){const t=super.toJSON(this);t.object=this.object.toJSON();return t}fromJSON(t){super.fromJSON(t);this.object=this.editor.objectByUuid(t.object.object.uuid);if(this.object===undefined){const e=new ObjectLoader;this.object=e.parse(t.object)}}}class SetUuidCommand extends Command{constructor(t,e,n){super(t);this.type="SetUuidCommand";this.name="Update UUID";this.object=e;this.oldUuid=e!==undefined?e.uuid:undefined;this.newUuid=n}execute(){this.object.uuid=this.newUuid;this.editor.signals.objectChanged.dispatch(this.object);this.editor.signals.sceneGraphChanged.dispatch()}undo(){this.object.uuid=this.oldUuid;this.editor.signals.objectChanged.dispatch(this.object);this.editor.signals.sceneGraphChanged.dispatch()}toJSON(){const t=super.toJSON(this);t.oldUuid=this.oldUuid;t.newUuid=this.newUuid;return t}fromJSON(t){super.fromJSON(t);this.oldUuid=t.oldUuid;this.newUuid=t.newUuid;this.object=this.editor.objectByUuid(t.oldUuid);if(this.object===undefined){this.object=this.editor.objectByUuid(t.newUuid)}}}class SetValueCommand extends Command{constructor(t,e,n,i){super(t);this.type="SetValueCommand";this.name=`Set ${n}`;this.updatable=true;this.object=e;this.attributeName=n;this.oldValue=e!==undefined?e[n]:undefined;this.newValue=i}execute(){this.object[this.attributeName]=this.newValue;this.editor.signals.objectChanged.dispatch(this.object)}undo(){this.object[this.attributeName]=this.oldValue;this.editor.signals.objectChanged.dispatch(this.object)}update(t){this.newValue=t.newValue}toJSON(){const t=super.toJSON(this);t.objectUuid=this.object.uuid;t.attributeName=this.attributeName;t.oldValue=this.oldValue;t.newValue=this.newValue;return t}fromJSON(t){super.fromJSON(t);this.attributeName=t.attributeName;this.oldValue=t.oldValue;this.newValue=t.newValue;this.object=this.editor.objectByUuid(t.objectUuid)}}class SetSceneCommand extends Command{constructor(t,e){super(t);this.type="SetSceneCommand";this.name="Set Scene";this.cmdArray=[];if(e!==undefined){this.cmdArray.push(new SetUuidCommand(this.editor,this.editor.scene,e.uuid));this.cmdArray.push(new SetValueCommand(this.editor,this.editor.scene,"name",e.name));this.cmdArray.push(new SetValueCommand(this.editor,this.editor.scene,"userData",JSON.parse(JSON.stringify(e.userData))));while(e.children.length>0){const t=e.children.pop();this.cmdArray.push(new AddObjectCommand(this.editor,t))}}}execute(){this.editor.signals.sceneGraphChanged.active=false;for(let t=0;t<this.cmdArray.length;t++){this.cmdArray[t].execute()}this.editor.signals.sceneGraphChanged.active=true;this.editor.signals.sceneGraphChanged.dispatch()}undo(){this.editor.signals.sceneGraphChanged.active=false;for(let t=this.cmdArray.length-1;t>=0;t--){this.cmdArray[t].undo()}this.editor.signals.sceneGraphChanged.active=true;this.editor.signals.sceneGraphChanged.dispatch()}toJSON(){const t=super.toJSON(this);const e=[];for(let t=0;t<this.cmdArray.length;t++){e.push(this.cmdArray[t].toJSON())}t.cmds=e;return t}fromJSON(t){super.fromJSON(t);const e=t.cmds;for(let t=0;t<e.length;t++){const n=new window[e[t].type];n.fromJSON(e[t]);this.cmdArray.push(n)}}}const LoaderUtils={createFilesMap:function(t){const e={};for(let n=0;n<t.length;n++){const i=t[n];e[i.name]=i}return e},getFilesFromItemList:function(t,e){let n=0;let i=0;const r=[];const a={};function s(){n++;if(n===i){e(r,a)}}function o(t){if(t.isDirectory){const e=t.createReader();e.readEntries((function(t){for(let e=0;e<t.length;e++){o(t[e])}s()}))}else if(t.isFile){t.file((function(e){r.push(e);a[t.fullPath.slice(1)]=e;s()}))}i++}for(let e=0;e<t.length;e++){const n=t[e];if(n.kind==="file"){o(n.webkitGetAsEntry())}}}};
/*!
fflate - fast JavaScript compression/decompression
<https://101arrowz.github.io/fflate>
Licensed under MIT. https://github.com/101arrowz/fflate/blob/master/LICENSE
version 0.6.9
*/var ch2={};var durl=function(t){return URL.createObjectURL(new Blob([t],{type:"text/javascript"}))};var cwk=function(t){return new Worker(t)};try{URL.revokeObjectURL(durl(""))}catch(t){durl=function(t){return"data:application/javascript;charset=UTF-8,"+encodeURI(t)};cwk=function(t){return new Worker(t,{type:"module"})}}var wk=function(t,e,n,i,r){var a=cwk(ch2[e]||(ch2[e]=durl(t)));a.onerror=function(t){return r(t.error,null)};a.onmessage=function(t){return r(null,t.data)};a.postMessage(n,i);return a};var u8=Uint8Array,u16=Uint16Array,u32=Uint32Array;var fleb=new u8([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0,0]);var fdeb=new u8([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13,0,0]);var clim=new u8([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);var freb=function(t,e){var n=new u16(31);for(var i=0;i<31;++i){n[i]=e+=1<<t[i-1]}var r=new u32(n[30]);for(var i=1;i<30;++i){for(var a=n[i];a<n[i+1];++a){r[a]=a-n[i]<<5|i}}return[n,r]};var _a=freb(fleb,2),fl=_a[0],revfl=_a[1];fl[28]=258,revfl[258]=28;var _b=freb(fdeb,0),fd=_b[0],revfd=_b[1];var rev=new u16(32768);for(var i=0;i<32768;++i){var x=(i&43690)>>>1|(i&21845)<<1;x=(x&52428)>>>2|(x&13107)<<2;x=(x&61680)>>>4|(x&3855)<<4;rev[i]=((x&65280)>>>8|(x&255)<<8)>>>1}var hMap=function(t,e,n){var i=t.length;var r=0;var a=new u16(e);for(;r<i;++r)++a[t[r]-1];var s=new u16(e);for(r=0;r<e;++r){s[r]=s[r-1]+a[r-1]<<1}var o;if(n){o=new u16(1<<e);var l=15-e;for(r=0;r<i;++r){if(t[r]){var c=r<<4|t[r];var u=e-t[r];var h=s[t[r]-1]++<<u;for(var d=h|(1<<u)-1;h<=d;++h){o[rev[h]>>>l]=c}}}}else{o=new u16(i);for(r=0;r<i;++r){if(t[r]){o[r]=rev[s[t[r]-1]++]>>>15-t[r]}}}return o};var flt=new u8(288);for(var i=0;i<144;++i)flt[i]=8;for(var i=144;i<256;++i)flt[i]=9;for(var i=256;i<280;++i)flt[i]=7;for(var i=280;i<288;++i)flt[i]=8;var fdt=new u8(32);for(var i=0;i<32;++i)fdt[i]=5;var flm=hMap(flt,9,0),flrm=hMap(flt,9,1);var fdm=hMap(fdt,5,0),fdrm=hMap(fdt,5,1);var max=function(t){var e=t[0];for(var n=1;n<t.length;++n){if(t[n]>e)e=t[n]}return e};var bits=function(t,e,n){var i=e/8|0;return(t[i]|t[i+1]<<8)>>(e&7)&n};var bits16=function(t,e){var n=e/8|0;return(t[n]|t[n+1]<<8|t[n+2]<<16)>>(e&7)};var shft=function(t){return(t/8|0)+(t&7&&1)};var slc=function(t,e,n){if(e==null||e<0)e=0;if(n==null||n>t.length)n=t.length;var i=new(t instanceof u16?u16:t instanceof u32?u32:u8)(n-e);i.set(t.subarray(e,n));return i};var inflt=function(t,e,n){var i=t.length;if(!i||n&&!n.l&&i<5)return e||new u8(0);var r=!e||n;var a=!n||n.i;if(!n)n={};if(!e)e=new u8(i*3);var s=function(t){var n=e.length;if(t>n){var i=new u8(Math.max(n*2,t));i.set(e);e=i}};var o=n.f||0,l=n.p||0,c=n.b||0,u=n.l,h=n.d,d=n.m,f=n.n;var p=i*8;do{if(!u){n.f=o=bits(t,l,1);var m=bits(t,l+1,3);l+=3;if(!m){var g=shft(l)+4,_=t[g-4]|t[g-3]<<8,y=g+_;if(y>i){if(a)throw"unexpected EOF";break}if(r)s(c+_);e.set(t.subarray(g,y),c);n.b=c+=_,n.p=l=y*8;continue}else if(m==1)u=flrm,h=fdrm,d=9,f=5;else if(m==2){var x=bits(t,l,31)+257,v=bits(t,l+10,15)+4;var b=x+bits(t,l+5,31)+1;l+=14;var M=new u8(b);var w=new u8(19);for(var S=0;S<v;++S){w[clim[S]]=bits(t,l+S*3,7)}l+=v*3;var A=max(w),T=(1<<A)-1;var E=hMap(w,A,1);for(var S=0;S<b;){var L=E[bits(t,l,T)];l+=L&15;var g=L>>>4;if(g<16){M[S++]=g}else{var C=0,P=0;if(g==16)P=3+bits(t,l,3),l+=2,C=M[S-1];else if(g==17)P=3+bits(t,l,7),l+=3;else if(g==18)P=11+bits(t,l,127),l+=7;while(P--)M[S++]=C}}var R=M.subarray(0,x),F=M.subarray(x);d=max(R);f=max(F);u=hMap(R,d,1);h=hMap(F,f,1)}else throw"invalid block type";if(l>p){if(a)throw"unexpected EOF";break}}if(r)s(c+131072);var I=(1<<d)-1,B=(1<<f)-1;var D=l;for(;;D=l){var C=u[bits16(t,l)&I],N=C>>>4;l+=C&15;if(l>p){if(a)throw"unexpected EOF";break}if(!C)throw"invalid length/literal";if(N<256)e[c++]=N;else if(N==256){D=l,u=null;break}else{var U=N-254;if(N>264){var S=N-257,V=fleb[S];U=bits(t,l,(1<<V)-1)+fl[S];l+=V}var G=h[bits16(t,l)&B],O=G>>>4;if(!G)throw"invalid distance";l+=G&15;var F=fd[O];if(O>3){var V=fdeb[O];F+=bits16(t,l)&(1<<V)-1,l+=V}if(l>p){if(a)throw"unexpected EOF";break}if(r)s(c+131072);var z=c+U;for(;c<z;c+=4){e[c]=e[c-F];e[c+1]=e[c+1-F];e[c+2]=e[c+2-F];e[c+3]=e[c+3-F]}c=z}}n.l=u,n.p=D,n.b=c;if(u)o=1,n.m=d,n.d=h,n.n=f}while(!o);return c==e.length?e:slc(e,0,c)};var wbits=function(t,e,n){n<<=e&7;var i=e/8|0;t[i]|=n;t[i+1]|=n>>>8};var wbits16=function(t,e,n){n<<=e&7;var i=e/8|0;t[i]|=n;t[i+1]|=n>>>8;t[i+2]|=n>>>16};var hTree=function(t,e){var n=[];for(var i=0;i<t.length;++i){if(t[i])n.push({s:i,f:t[i]})}var r=n.length;var a=n.slice();if(!r)return[et,0];if(r==1){var s=new u8(n[0].s+1);s[n[0].s]=1;return[s,1]}n.sort((function(t,e){return t.f-e.f}));n.push({s:-1,f:25001});var o=n[0],l=n[1],c=0,u=1,h=2;n[0]={s:-1,f:o.f+l.f,l:o,r:l};while(u!=r-1){o=n[n[c].f<n[h].f?c++:h++];l=n[c!=u&&n[c].f<n[h].f?c++:h++];n[u++]={s:-1,f:o.f+l.f,l:o,r:l}}var d=a[0].s;for(var i=1;i<r;++i){if(a[i].s>d)d=a[i].s}var f=new u16(d+1);var p=ln(n[u-1],f,0);if(p>e){var i=0,m=0;var g=p-e,_=1<<g;a.sort((function(t,e){return f[e.s]-f[t.s]||t.f-e.f}));for(;i<r;++i){var y=a[i].s;if(f[y]>e){m+=_-(1<<p-f[y]);f[y]=e}else break}m>>>=g;while(m>0){var x=a[i].s;if(f[x]<e)m-=1<<e-f[x]++-1;else++i}for(;i>=0&&m;--i){var v=a[i].s;if(f[v]==e){--f[v];++m}}p=e}return[new u8(f),p]};var ln=function(t,e,n){return t.s==-1?Math.max(ln(t.l,e,n+1),ln(t.r,e,n+1)):e[t.s]=n};var lc=function(t){var e=t.length;while(e&&!t[--e]);var n=new u16(++e);var i=0,r=t[0],a=1;var s=function(t){n[i++]=t};for(var o=1;o<=e;++o){if(t[o]==r&&o!=e)++a;else{if(!r&&a>2){for(;a>138;a-=138)s(32754);if(a>2){s(a>10?a-11<<5|28690:a-3<<5|12305);a=0}}else if(a>3){s(r),--a;for(;a>6;a-=6)s(8304);if(a>2)s(a-3<<5|8208),a=0}while(a--)s(r);a=1;r=t[o]}}return[n.subarray(0,i),e]};var clen=function(t,e){var n=0;for(var i=0;i<e.length;++i)n+=t[i]*e[i];return n};var wfblk=function(t,e,n){var i=n.length;var r=shft(e+2);t[r]=i&255;t[r+1]=i>>>8;t[r+2]=t[r]^255;t[r+3]=t[r+1]^255;for(var a=0;a<i;++a)t[r+a+4]=n[a];return(r+4+i)*8};var wblk=function(t,e,n,i,r,a,s,o,l,c,u){wbits(e,u++,n);++r[256];var h=hTree(r,15),d=h[0],f=h[1];var p=hTree(a,15),m=p[0],g=p[1];var _=lc(d),y=_[0],x=_[1];var v=lc(m),b=v[0],M=v[1];var w=new u16(19);for(var S=0;S<y.length;++S)w[y[S]&31]++;for(var S=0;S<b.length;++S)w[b[S]&31]++;var A=hTree(w,7),T=A[0],E=A[1];var L=19;for(;L>4&&!T[clim[L-1]];--L);var C=c+5<<3;var P=clen(r,flt)+clen(a,fdt)+s;var R=clen(r,d)+clen(a,m)+s+14+3*L+clen(w,T)+(2*w[16]+3*w[17]+7*w[18]);if(C<=P&&C<=R)return wfblk(e,u,t.subarray(l,l+c));var F,I,B,D;wbits(e,u,1+(R<P)),u+=2;if(R<P){F=hMap(d,f,0),I=d,B=hMap(m,g,0),D=m;var N=hMap(T,E,0);wbits(e,u,x-257);wbits(e,u+5,M-1);wbits(e,u+10,L-4);u+=14;for(var S=0;S<L;++S)wbits(e,u+3*S,T[clim[S]]);u+=3*L;var U=[y,b];for(var V=0;V<2;++V){var G=U[V];for(var S=0;S<G.length;++S){var O=G[S]&31;wbits(e,u,N[O]),u+=T[O];if(O>15)wbits(e,u,G[S]>>>5&127),u+=G[S]>>>12}}}else{F=flm,I=flt,B=fdm,D=fdt}for(var S=0;S<o;++S){if(i[S]>255){var O=i[S]>>>18&31;wbits16(e,u,F[O+257]),u+=I[O+257];if(O>7)wbits(e,u,i[S]>>>23&31),u+=fleb[O];var z=i[S]&31;wbits16(e,u,B[z]),u+=D[z];if(z>3)wbits16(e,u,i[S]>>>5&8191),u+=fdeb[z]}else{wbits16(e,u,F[i[S]]),u+=I[i[S]]}}wbits16(e,u,F[256]);return u+I[256]};var deo=new u32([65540,131080,131088,131104,262176,1048704,1048832,2114560,2117632]);var et=new u8(0);var dflt=function(t,e,n,i,r,a){var s=t.length;var o=new u8(i+s+5*(1+Math.ceil(s/7e3))+r);var l=o.subarray(i,o.length-r);var c=0;if(!e||s<8){for(var u=0;u<=s;u+=65535){var h=u+65535;if(h<s){c=wfblk(l,c,t.subarray(u,h))}else{l[u]=a;c=wfblk(l,c,t.subarray(u,s))}}}else{var d=deo[e-1];var f=d>>>13,p=d&8191;var m=(1<<n)-1;var g=new u16(32768),_=new u16(m+1);var y=Math.ceil(n/3),x=2*y;var v=function(e){return(t[e]^t[e+1]<<y^t[e+2]<<x)&m};var b=new u32(25e3);var M=new u16(288),w=new u16(32);var S=0,A=0,u=0,T=0,E=0,L=0;for(;u<s;++u){var C=v(u);var P=u&32767,R=_[C];g[P]=R;_[C]=P;if(E<=u){var F=s-u;if((S>7e3||T>24576)&&F>423){c=wblk(t,l,0,b,M,w,A,T,L,u-L,c);T=S=A=0,L=u;for(var I=0;I<286;++I)M[I]=0;for(var I=0;I<30;++I)w[I]=0}var B=2,D=0,N=p,U=P-R&32767;if(F>2&&C==v(u-U)){var V=Math.min(f,F)-1;var G=Math.min(32767,u);var O=Math.min(258,F);while(U<=G&&--N&&P!=R){if(t[u+B]==t[u+B-U]){var z=0;for(;z<O&&t[u+z]==t[u+z-U];++z);if(z>B){B=z,D=U;if(z>V)break;var $=Math.min(U,z-2);var H=0;for(var I=0;I<$;++I){var k=u-U+I+32768&32767;var W=g[k];var j=k-W+32768&32767;if(j>H)H=j,R=k}}}P=R,R=g[P];U+=P-R+32768&32767}}if(D){b[T++]=268435456|revfl[B]<<18|revfd[D];var X=revfl[B]&31,Y=revfd[D]&31;A+=fleb[X]+fdeb[Y];++M[257+X];++w[Y];E=u+B;++S}else{b[T++]=t[u];++M[t[u]]}}}c=wblk(t,l,a,b,M,w,A,T,L,u-L,c);if(!a&&c&7)c=wfblk(l,c+1,et)}return slc(o,0,i+shft(c)+r)};var crct=function(){var t=new u32(256);for(var e=0;e<256;++e){var n=e,i=9;while(--i)n=(n&1&&3988292384)^n>>>1;t[e]=n}return t}();var crc=function(){var t=-1;return{p:function(e){var n=t;for(var i=0;i<e.length;++i)n=crct[n&255^e[i]]^n>>>8;t=n},d:function(){return~t}}};var adler=function(){var t=1,e=0;return{p:function(n){var i=t,r=e;var a=n.length;for(var s=0;s!=a;){var o=Math.min(s+2655,a);for(;s<o;++s)r+=i+=n[s];i=(i&65535)+15*(i>>16),r=(r&65535)+15*(r>>16)}t=i,e=r},d:function(){t%=65521,e%=65521;return(t&255)<<24|t>>>8<<16|(e&255)<<8|e>>>8}}};var dopt=function(t,e,n,i,r){return dflt(t,e.level==null?6:e.level,e.mem==null?Math.ceil(Math.max(8,Math.min(13,Math.log(t.length)))*1.5):12+e.mem,n,i,!r)};var mrg=function(t,e){var n={};for(var i in t)n[i]=t[i];for(var i in e)n[i]=e[i];return n};var wcln=function(t,e,n){var i=t();var r=t.toString();var a=r.slice(r.indexOf("[")+1,r.lastIndexOf("]")).replace(/ /g,"").split(",");for(var s=0;s<i.length;++s){var o=i[s],l=a[s];if(typeof o=="function"){e+=";"+l+"=";var c=o.toString();if(o.prototype){if(c.indexOf("[native code]")!=-1){var u=c.indexOf(" ",8)+1;e+=c.slice(u,c.indexOf("(",u))}else{e+=c;for(var h in o.prototype)e+=";"+l+".prototype."+h+"="+o.prototype[h].toString()}}else e+=c}else n[l]=o}return[e,n]};var ch=[];var cbfs=function(t){var e=[];for(var n in t){if(t[n]instanceof u8||t[n]instanceof u16||t[n]instanceof u32)e.push((t[n]=new t[n].constructor(t[n])).buffer)}return e};var wrkr=function(t,e,n,i){var r;if(!ch[n]){var a="",s={},o=t.length-1;for(var l=0;l<o;++l)r=wcln(t[l],a,s),a=r[0],s=r[1];ch[n]=wcln(t[o],a,s)}var c=mrg({},ch[n][1]);return wk(ch[n][0]+";onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage="+e.toString()+"}",n,c,cbfs(c),i)};var bInflt=function(){return[u8,u16,u32,fleb,fdeb,clim,fl,fd,flrm,fdrm,rev,hMap,max,bits,bits16,shft,slc,inflt,inflateSync,pbf,gu8]};var bDflt=function(){return[u8,u16,u32,fleb,fdeb,clim,revfl,revfd,flm,flt,fdm,fdt,rev,deo,et,hMap,wbits,wbits16,hTree,ln,lc,clen,wfblk,wblk,shft,slc,dflt,dopt,deflateSync,pbf]};var gze=function(){return[gzh,gzhl,wbytes,crc,crct]};var guze=function(){return[gzs,gzl]};var zle=function(){return[zlh,wbytes,adler]};var zule=function(){return[zlv]};var pbf=function(t){return postMessage(t,[t.buffer])};var gu8=function(t){return t&&t.size&&new u8(t.size)};var cbify=function(t,e,n,i,r,a){var s=wrkr(n,i,r,(function(t,e){s.terminate();a(t,e)}));s.postMessage([t,e],e.consume?[t.buffer]:[]);return function(){s.terminate()}};var astrm=function(t){t.ondata=function(t,e){return postMessage([t,e],[t.buffer])};return function(e){return t.push(e.data[0],e.data[1])}};var astrmify=function(t,e,n,i,r){var a;var s=wrkr(t,i,r,(function(t,n){if(t)s.terminate(),e.ondata.call(e,t);else{if(n[1])s.terminate();e.ondata.call(e,t,n[0],n[1])}}));s.postMessage(n);e.push=function(t,n){if(a)throw"stream finished";if(!e.ondata)throw"no stream handler";s.postMessage([t,a=n],[t.buffer])};e.terminate=function(){s.terminate()}};var b2=function(t,e){return t[e]|t[e+1]<<8};var b4=function(t,e){return(t[e]|t[e+1]<<8|t[e+2]<<16|t[e+3]<<24)>>>0};var b8=function(t,e){return b4(t,e)+b4(t,e+4)*4294967296};var wbytes=function(t,e,n){for(;n;++e)t[e]=n,n>>>=8};var gzh=function(t,e){var n=e.filename;t[0]=31,t[1]=139,t[2]=8,t[8]=e.level<2?4:e.level==9?2:0,t[9]=3;if(e.mtime!=0)wbytes(t,4,Math.floor(new Date(e.mtime||Date.now())/1e3));if(n){t[3]=8;for(var i=0;i<=n.length;++i)t[i+10]=n.charCodeAt(i)}};var gzs=function(t){if(t[0]!=31||t[1]!=139||t[2]!=8)throw"invalid gzip data";var e=t[3];var n=10;if(e&4)n+=t[10]|(t[11]<<8)+2;for(var i=(e>>3&1)+(e>>4&1);i>0;i-=!t[n++]);return n+(e&2)};var gzl=function(t){var e=t.length;return(t[e-4]|t[e-3]<<8|t[e-2]<<16|t[e-1]<<24)>>>0};var gzhl=function(t){return 10+(t.filename&&t.filename.length+1||0)};var zlh=function(t,e){var n=e.level,i=n==0?0:n<6?1:n==9?3:2;t[0]=120,t[1]=i<<6|(i?32-2*i:1)};var zlv=function(t){if((t[0]&15)!=8||t[0]>>>4>7||(t[0]<<8|t[1])%31)throw"invalid zlib data";if(t[1]&32)throw"invalid zlib data: preset dictionaries not supported"};function AsyncCmpStrm(t,e){if(!e&&typeof t=="function")e=t,t={};this.ondata=e;return t}var Deflate=function(){function t(t,e){if(!e&&typeof t=="function")e=t,t={};this.ondata=e;this.o=t||{}}t.prototype.p=function(t,e){this.ondata(dopt(t,this.o,0,0,!e),e)};t.prototype.push=function(t,e){if(this.d)throw"stream finished";if(!this.ondata)throw"no stream handler";this.d=e;this.p(t,e||false)};return t}();var AsyncDeflate=function(){function t(t,e){astrmify([bDflt,function(){return[astrm,Deflate]}],this,AsyncCmpStrm.call(this,t,e),(function(t){var e=new Deflate(t.data);onmessage=astrm(e)}),6)}return t}();function deflate(t,e,n){if(!n)n=e,e={};if(typeof n!="function")throw"no callback";return cbify(t,e,[bDflt],(function(t){return pbf(deflateSync(t.data[0],t.data[1]))}),0,n)}function deflateSync(t,e){return dopt(t,e||{},0,0)}var Inflate=function(){function t(t){this.s={};this.p=new u8(0);this.ondata=t}t.prototype.e=function(t){if(this.d)throw"stream finished";if(!this.ondata)throw"no stream handler";var e=this.p.length;var n=new u8(e+t.length);n.set(this.p),n.set(t,e),this.p=n};t.prototype.c=function(t){this.d=this.s.i=t||false;var e=this.s.b;var n=inflt(this.p,this.o,this.s);this.ondata(slc(n,e,this.s.b),this.d);this.o=slc(n,this.s.b-32768),this.s.b=this.o.length;this.p=slc(this.p,this.s.p/8|0),this.s.p&=7};t.prototype.push=function(t,e){this.e(t),this.c(e)};return t}();var AsyncInflate=function(){function t(t){this.ondata=t;astrmify([bInflt,function(){return[astrm,Inflate]}],this,0,(function(){var t=new Inflate;onmessage=astrm(t)}),7)}return t}();function inflate(t,e,n){if(!n)n=e,e={};if(typeof n!="function")throw"no callback";return cbify(t,e,[bInflt],(function(t){return pbf(inflateSync(t.data[0],gu8(t.data[1])))}),1,n)}function inflateSync(t,e){return inflt(t,e)}var Gzip=function(){function t(t,e){this.c=crc();this.l=0;this.v=1;Deflate.call(this,t,e)}t.prototype.push=function(t,e){Deflate.prototype.push.call(this,t,e)};t.prototype.p=function(t,e){this.c.p(t);this.l+=t.length;var n=dopt(t,this.o,this.v&&gzhl(this.o),e&&8,!e);if(this.v)gzh(n,this.o),this.v=0;if(e)wbytes(n,n.length-8,this.c.d()),wbytes(n,n.length-4,this.l);this.ondata(n,e)};return t}();var AsyncGzip=function(){function t(t,e){astrmify([bDflt,gze,function(){return[astrm,Deflate,Gzip]}],this,AsyncCmpStrm.call(this,t,e),(function(t){var e=new Gzip(t.data);onmessage=astrm(e)}),8)}return t}();function gzip(t,e,n){if(!n)n=e,e={};if(typeof n!="function")throw"no callback";return cbify(t,e,[bDflt,gze,function(){return[gzipSync]}],(function(t){return pbf(gzipSync(t.data[0],t.data[1]))}),2,n)}function gzipSync(t,e){if(!e)e={};var n=crc(),i=t.length;n.p(t);var r=dopt(t,e,gzhl(e),8),a=r.length;return gzh(r,e),wbytes(r,a-8,n.d()),wbytes(r,a-4,i),r}var Gunzip=function(){function t(t){this.v=1;Inflate.call(this,t)}t.prototype.push=function(t,e){Inflate.prototype.e.call(this,t);if(this.v){var n=this.p.length>3?gzs(this.p):4;if(n>=this.p.length&&!e)return;this.p=this.p.subarray(n),this.v=0}if(e){if(this.p.length<8)throw"invalid gzip stream";this.p=this.p.subarray(0,-8)}Inflate.prototype.c.call(this,e)};return t}();var AsyncGunzip=function(){function t(t){this.ondata=t;astrmify([bInflt,guze,function(){return[astrm,Inflate,Gunzip]}],this,0,(function(){var t=new Gunzip;onmessage=astrm(t)}),9)}return t}();function gunzip(t,e,n){if(!n)n=e,e={};if(typeof n!="function")throw"no callback";return cbify(t,e,[bInflt,guze,function(){return[gunzipSync]}],(function(t){return pbf(gunzipSync(t.data[0]))}),3,n)}function gunzipSync(t,e){return inflt(t.subarray(gzs(t),-8),e||new u8(gzl(t)))}var Zlib=function(){function t(t,e){this.c=adler();this.v=1;Deflate.call(this,t,e)}t.prototype.push=function(t,e){Deflate.prototype.push.call(this,t,e)};t.prototype.p=function(t,e){this.c.p(t);var n=dopt(t,this.o,this.v&&2,e&&4,!e);if(this.v)zlh(n,this.o),this.v=0;if(e)wbytes(n,n.length-4,this.c.d());this.ondata(n,e)};return t}();var AsyncZlib=function(){function t(t,e){astrmify([bDflt,zle,function(){return[astrm,Deflate,Zlib]}],this,AsyncCmpStrm.call(this,t,e),(function(t){var e=new Zlib(t.data);onmessage=astrm(e)}),10)}return t}();function zlib(t,e,n){if(!n)n=e,e={};if(typeof n!="function")throw"no callback";return cbify(t,e,[bDflt,zle,function(){return[zlibSync]}],(function(t){return pbf(zlibSync(t.data[0],t.data[1]))}),4,n)}function zlibSync(t,e){if(!e)e={};var n=adler();n.p(t);var i=dopt(t,e,2,4);return zlh(i,e),wbytes(i,i.length-4,n.d()),i}var Unzlib=function(){function t(t){this.v=1;Inflate.call(this,t)}t.prototype.push=function(t,e){Inflate.prototype.e.call(this,t);if(this.v){if(this.p.length<2&&!e)return;this.p=this.p.subarray(2),this.v=0}if(e){if(this.p.length<4)throw"invalid zlib stream";this.p=this.p.subarray(0,-4)}Inflate.prototype.c.call(this,e)};return t}();var AsyncUnzlib=function(){function t(t){this.ondata=t;astrmify([bInflt,zule,function(){return[astrm,Inflate,Unzlib]}],this,0,(function(){var t=new Unzlib;onmessage=astrm(t)}),11)}return t}();function unzlib(t,e,n){if(!n)n=e,e={};if(typeof n!="function")throw"no callback";return cbify(t,e,[bInflt,zule,function(){return[unzlibSync]}],(function(t){return pbf(unzlibSync(t.data[0],gu8(t.data[1])))}),5,n)}function unzlibSync(t,e){return inflt((zlv(t),t.subarray(2,-4)),e)}var Decompress=function(){function t(t){this.G=Gunzip;this.I=Inflate;this.Z=Unzlib;this.ondata=t}t.prototype.push=function(t,e){if(!this.ondata)throw"no stream handler";if(!this.s){if(this.p&&this.p.length){var n=new u8(this.p.length+t.length);n.set(this.p),n.set(t,this.p.length)}else this.p=t;if(this.p.length>2){var i=this;var r=function(){i.ondata.apply(i,arguments)};this.s=this.p[0]==31&&this.p[1]==139&&this.p[2]==8?new this.G(r):(this.p[0]&15)!=8||this.p[0]>>4>7||(this.p[0]<<8|this.p[1])%31?new this.I(r):new this.Z(r);this.s.push(this.p,e);this.p=null}}else this.s.push(t,e)};return t}();var AsyncDecompress=function(){function t(t){this.G=AsyncGunzip;this.I=AsyncInflate;this.Z=AsyncUnzlib;this.ondata=t}t.prototype.push=function(t,e){Decompress.prototype.push.call(this,t,e)};return t}();function decompress(t,e,n){if(!n)n=e,e={};if(typeof n!="function")throw"no callback";return t[0]==31&&t[1]==139&&t[2]==8?gunzip(t,e,n):(t[0]&15)!=8||t[0]>>4>7||(t[0]<<8|t[1])%31?inflate(t,e,n):unzlib(t,e,n)}function decompressSync(t,e){return t[0]==31&&t[1]==139&&t[2]==8?gunzipSync(t,e):(t[0]&15)!=8||t[0]>>4>7||(t[0]<<8|t[1])%31?inflateSync(t,e):unzlibSync(t,e)}var fltn=function(t,e,n,i){for(var r in t){var a=t[r],s=e+r;if(a instanceof u8)n[s]=[a,i];else if(Array.isArray(a))n[s]=[a[0],mrg(i,a[1])];else fltn(a,s+"/",n,i)}};var te=typeof TextEncoder!="undefined"&&new TextEncoder;var td=typeof TextDecoder!="undefined"&&new TextDecoder;var tds=0;try{td.decode(et,{stream:true});tds=1}catch(t){}var dutf8=function(t){for(var e="",n=0;;){var i=t[n++];var r=(i>127)+(i>223)+(i>239);if(n+r>t.length)return[e,slc(t,n-1)];if(!r)e+=String.fromCharCode(i);else if(r==3){i=((i&15)<<18|(t[n++]&63)<<12|(t[n++]&63)<<6|t[n++]&63)-65536,e+=String.fromCharCode(55296|i>>10,56320|i&1023)}else if(r&1)e+=String.fromCharCode((i&31)<<6|t[n++]&63);else e+=String.fromCharCode((i&15)<<12|(t[n++]&63)<<6|t[n++]&63)}};var DecodeUTF8=function(){function t(t){this.ondata=t;if(tds)this.t=new TextDecoder;else this.p=et}t.prototype.push=function(t,e){if(!this.ondata)throw"no callback";e=!!e;if(this.t){this.ondata(this.t.decode(t,{stream:true}),e);if(e){if(this.t.decode().length)throw"invalid utf-8 data";this.t=null}return}if(!this.p)throw"stream finished";var n=new u8(this.p.length+t.length);n.set(this.p);n.set(t,this.p.length);var i=dutf8(n),r=i[0],a=i[1];if(e){if(a.length)throw"invalid utf-8 data";this.p=null}else this.p=a;this.ondata(r,e)};return t}();var EncodeUTF8=function(){function t(t){this.ondata=t}t.prototype.push=function(t,e){if(!this.ondata)throw"no callback";if(this.d)throw"stream finished";this.ondata(strToU8(t),this.d=e||false)};return t}();function strToU8(t,e){if(e){var n=new u8(t.length);for(var i=0;i<t.length;++i)n[i]=t.charCodeAt(i);return n}if(te)return te.encode(t);var r=t.length;var a=new u8(t.length+(t.length>>1));var s=0;var o=function(t){a[s++]=t};for(var i=0;i<r;++i){if(s+5>a.length){var l=new u8(s+8+(r-i<<1));l.set(a);a=l}var c=t.charCodeAt(i);if(c<128||e)o(c);else if(c<2048)o(192|c>>6),o(128|c&63);else if(c>55295&&c<57344)c=65536+(c&1023<<10)|t.charCodeAt(++i)&1023,o(240|c>>18),o(128|c>>12&63),o(128|c>>6&63),o(128|c&63);else o(224|c>>12),o(128|c>>6&63),o(128|c&63)}return slc(a,0,s)}function strFromU8(t,e){if(e){var n="";for(var i=0;i<t.length;i+=16384)n+=String.fromCharCode.apply(null,t.subarray(i,i+16384));return n}else if(td)return td.decode(t);else{var r=dutf8(t),a=r[0],s=r[1];if(s.length)throw"invalid utf-8 data";return a}}var dbf=function(t){return t==1?3:t<6?2:t==9?1:0};var slzh=function(t,e){return e+30+b2(t,e+26)+b2(t,e+28)};var zh=function(t,e,n){var i=b2(t,e+28),r=strFromU8(t.subarray(e+46,e+46+i),!(b2(t,e+8)&2048)),a=e+46+i,s=b4(t,e+20);var o=n&&s==4294967295?z64e(t,a):[s,b4(t,e+24),b4(t,e+42)],l=o[0],c=o[1],u=o[2];return[b2(t,e+10),l,c,r,a+b2(t,e+30)+b2(t,e+32),u]};var z64e=function(t,e){for(;b2(t,e)!=1;e+=4+b2(t,e+2));return[b8(t,e+12),b8(t,e+4),b8(t,e+20)]};var exfl=function(t){var e=0;if(t){for(var n in t){var i=t[n].length;if(i>65535)throw"extra field too long";e+=i+4}}return e};var wzh=function(t,e,n,i,r,a,s,o){var l=i.length,c=n.extra,u=o&&o.length;var h=exfl(c);wbytes(t,e,s!=null?33639248:67324752),e+=4;if(s!=null)t[e++]=20,t[e++]=n.os;t[e]=20,e+=2;t[e++]=n.flag<<1|(a==null&&8),t[e++]=r&&8;t[e++]=n.compression&255,t[e++]=n.compression>>8;var d=new Date(n.mtime==null?Date.now():n.mtime),f=d.getFullYear()-1980;if(f<0||f>119)throw"date not in range 1980-2099";wbytes(t,e,f<<25|d.getMonth()+1<<21|d.getDate()<<16|d.getHours()<<11|d.getMinutes()<<5|d.getSeconds()>>>1),e+=4;if(a!=null){wbytes(t,e,n.crc);wbytes(t,e+4,a);wbytes(t,e+8,n.size)}wbytes(t,e+12,l);wbytes(t,e+14,h),e+=16;if(s!=null){wbytes(t,e,u);wbytes(t,e+6,n.attrs);wbytes(t,e+10,s),e+=14}t.set(i,e);e+=l;if(h){for(var p in c){var m=c[p],g=m.length;wbytes(t,e,+p);wbytes(t,e+2,g);t.set(m,e+4),e+=4+g}}if(u)t.set(o,e),e+=u;return e};var wzf=function(t,e,n,i,r){wbytes(t,e,101010256);wbytes(t,e+8,n);wbytes(t,e+10,n);wbytes(t,e+12,i);wbytes(t,e+16,r)};var ZipPassThrough=function(){function t(t){this.filename=t;this.c=crc();this.size=0;this.compression=0}t.prototype.process=function(t,e){this.ondata(null,t,e)};t.prototype.push=function(t,e){if(!this.ondata)throw"no callback - add to ZIP archive before pushing";this.c.p(t);this.size+=t.length;if(e)this.crc=this.c.d();this.process(t,e||false)};return t}();var ZipDeflate=function(){function t(t,e){var n=this;if(!e)e={};ZipPassThrough.call(this,t);this.d=new Deflate(e,(function(t,e){n.ondata(null,t,e)}));this.compression=8;this.flag=dbf(e.level)}t.prototype.process=function(t,e){try{this.d.push(t,e)}catch(t){this.ondata(t,null,e)}};t.prototype.push=function(t,e){ZipPassThrough.prototype.push.call(this,t,e)};return t}();var AsyncZipDeflate=function(){function t(t,e){var n=this;if(!e)e={};ZipPassThrough.call(this,t);this.d=new AsyncDeflate(e,(function(t,e,i){n.ondata(t,e,i)}));this.compression=8;this.flag=dbf(e.level);this.terminate=this.d.terminate}t.prototype.process=function(t,e){this.d.push(t,e)};t.prototype.push=function(t,e){ZipPassThrough.prototype.push.call(this,t,e)};return t}();var Zip=function(){function t(t){this.ondata=t;this.u=[];this.d=1}t.prototype.add=function(t){var e=this;if(this.d&2)throw"stream finished";var n=strToU8(t.filename),i=n.length;var r=t.comment,a=r&&strToU8(r);var s=i!=t.filename.length||a&&r.length!=a.length;var o=i+exfl(t.extra)+30;if(i>65535)throw"filename too long";var l=new u8(o);wzh(l,0,t,n,s);var c=[l];var u=function(){for(var t=0,n=c;t<n.length;t++){var i=n[t];e.ondata(null,i,false)}c=[]};var h=this.d;this.d=0;var d=this.u.length;var f=mrg(t,{f:n,u:s,o:a,t:function(){if(t.terminate)t.terminate()},r:function(){u();if(h){var t=e.u[d+1];if(t)t.r();else e.d=1}h=1}});var p=0;t.ondata=function(n,i,r){if(n){e.ondata(n,i,r);e.terminate()}else{p+=i.length;c.push(i);if(r){var a=new u8(16);wbytes(a,0,134695760);wbytes(a,4,t.crc);wbytes(a,8,p);wbytes(a,12,t.size);c.push(a);f.c=p,f.b=o+p+16,f.crc=t.crc,f.size=t.size;if(h)f.r();h=1}else if(h)u()}};this.u.push(f)};t.prototype.end=function(){var t=this;if(this.d&2){if(this.d&1)throw"stream finishing";throw"stream finished"}if(this.d)this.e();else this.u.push({r:function(){if(!(t.d&1))return;t.u.splice(-1,1);t.e()},t:function(){}});this.d=3};t.prototype.e=function(){var t=0,e=0,n=0;for(var i=0,r=this.u;i<r.length;i++){var a=r[i];n+=46+a.f.length+exfl(a.extra)+(a.o?a.o.length:0)}var s=new u8(n+22);for(var o=0,l=this.u;o<l.length;o++){var a=l[o];wzh(s,t,a,a.f,a.u,a.c,e,a.o);t+=46+a.f.length+exfl(a.extra)+(a.o?a.o.length:0),e+=a.b}wzf(s,t,this.u.length,n,e);this.ondata(null,s,true);this.d=2};t.prototype.terminate=function(){for(var t=0,e=this.u;t<e.length;t++){var n=e[t];n.t()}this.d=2};return t}();function zip(t,e,n){if(!n)n=e,e={};if(typeof n!="function")throw"no callback";var i={};fltn(t,"",i,e);var r=Object.keys(i);var a=r.length,s=0,o=0;var l=a,c=new Array(a);var u=[];var h=function(){for(var t=0;t<u.length;++t)u[t]()};var d=function(){var t=new u8(o+22),e=s,i=o-s;o=0;for(var r=0;r<l;++r){var a=c[r];try{var u=a.c.length;wzh(t,o,a,a.f,a.u,u);var h=30+a.f.length+exfl(a.extra);var d=o+h;t.set(a.c,d);wzh(t,s,a,a.f,a.u,u,o,a.m),s+=16+h+(a.m?a.m.length:0),o=d+u}catch(t){return n(t,null)}}wzf(t,s,c.length,i,e);n(null,t)};if(!a)d();var f=function(t){var e=r[t];var l=i[e],f=l[0],p=l[1];var m=crc(),g=f.length;m.p(f);var _=strToU8(e),y=_.length;var x=p.comment,v=x&&strToU8(x),b=v&&v.length;var M=exfl(p.extra);var w=p.level==0?0:8;var S=function(i,r){if(i){h();n(i,null)}else{var l=r.length;c[t]=mrg(p,{size:g,crc:m.d(),c:r,f:_,m:v,u:y!=e.length||v&&x.length!=b,compression:w});s+=30+y+M+l;o+=76+2*(y+M)+(b||0)+l;if(! --a)d()}};if(y>65535)S("filename too long",null);if(!w)S(null,f);else if(g<16e4){try{S(null,deflateSync(f,p))}catch(t){S(t,null)}}else u.push(deflate(f,p,S))};for(var p=0;p<l;++p){f(p)}return h}function zipSync(t,e){if(!e)e={};var n={};var i=[];fltn(t,"",n,e);var r=0;var a=0;for(var s in n){var o=n[s],l=o[0],c=o[1];var u=c.level==0?0:8;var h=strToU8(s),d=h.length;var f=c.comment,p=f&&strToU8(f),m=p&&p.length;var g=exfl(c.extra);if(d>65535)throw"filename too long";var _=u?deflateSync(l,c):l,y=_.length;var x=crc();x.p(l);i.push(mrg(c,{size:l.length,crc:x.d(),c:_,f:h,m:p,u:d!=s.length||p&&f.length!=m,o:r,compression:u}));r+=30+d+g+y;a+=76+2*(d+g)+(m||0)+y}var v=new u8(a+22),b=r,M=a-r;for(var w=0;w<i.length;++w){var h=i[w];wzh(v,h.o,h,h.f,h.u,h.c.length);var S=30+h.f.length+exfl(h.extra);v.set(h.c,h.o+S);wzh(v,r,h,h.f,h.u,h.c.length,h.o,h.m),r+=16+S+(h.m?h.m.length:0)}wzf(v,r,i.length,M,b);return v}var UnzipPassThrough=function(){function t(){}t.prototype.push=function(t,e){this.ondata(null,t,e)};t.compression=0;return t}();var UnzipInflate=function(){function t(){var t=this;this.i=new Inflate((function(e,n){t.ondata(null,e,n)}))}t.prototype.push=function(t,e){try{this.i.push(t,e)}catch(n){this.ondata(n,t,e)}};t.compression=8;return t}();var AsyncUnzipInflate=function(){function t(t,e){var n=this;if(e<32e4){this.i=new Inflate((function(t,e){n.ondata(null,t,e)}))}else{this.i=new AsyncInflate((function(t,e,i){n.ondata(t,e,i)}));this.terminate=this.i.terminate}}t.prototype.push=function(t,e){if(this.i.terminate)t=slc(t,0);this.i.push(t,e)};t.compression=8;return t}();var Unzip=function(){function t(t){this.onfile=t;this.k=[];this.o={0:UnzipPassThrough};this.p=et}t.prototype.push=function(t,e){var n=this;if(!this.onfile)throw"no callback";if(!this.p)throw"stream finished";if(this.c>0){var i=Math.min(this.c,t.length);var r=t.subarray(0,i);this.c-=i;if(this.d)this.d.push(r,!this.c);else this.k[0].push(r);t=t.subarray(i);if(t.length)return this.push(t,e)}else{var a=0,s=0,o=void 0,l=void 0;if(!this.p.length)l=t;else if(!t.length)l=this.p;else{l=new u8(this.p.length+t.length);l.set(this.p),l.set(t,this.p.length)}var c=l.length,u=this.c,h=u&&this.d;var d=function(){var t;var e=b4(l,s);if(e==67324752){a=1,o=s;f.d=null;f.c=0;var i=b2(l,s+6),r=b2(l,s+8),h=i&2048,d=i&8,p=b2(l,s+26),m=b2(l,s+28);if(c>s+30+p+m){var g=[];f.k.unshift(g);a=2;var _=b4(l,s+18),y=b4(l,s+22);var x=strFromU8(l.subarray(s+30,s+=30+p),!h);if(_==4294967295){t=d?[-2]:z64e(l,s),_=t[0],y=t[1]}else if(d)_=-1;s+=m;f.c=_;var v;var b={name:x,compression:r,start:function(){if(!b.ondata)throw"no callback";if(!_)b.ondata(null,et,true);else{var t=n.o[r];if(!t)throw"unknown compression type "+r;v=_<0?new t(x):new t(x,_,y);v.ondata=function(t,e,n){b.ondata(t,e,n)};for(var e=0,i=g;e<i.length;e++){var a=i[e];v.push(a,false)}if(n.k[0]==g&&n.c)n.d=v;else v.push(et,true)}},terminate:function(){if(v&&v.terminate)v.terminate()}};if(_>=0)b.size=_,b.originalSize=y;f.onfile(b)}return"break"}else if(u){if(e==134695760){o=s+=12+(u==-2&&8),a=3,f.c=0;return"break"}else if(e==33639248){o=s-=4,a=3,f.c=0;return"break"}}};var f=this;for(;s<c-4;++s){var p=d();if(p==="break")break}this.p=et;if(u<0){var m=a?l.subarray(0,o-12-(u==-2&&8)-(b4(l,o-16)==134695760&&4)):l.subarray(0,s);if(h)h.push(m,!!a);else this.k[+(a==2)].push(m)}if(a&2)return this.push(l.subarray(s),e);this.p=l.subarray(s)}if(e){if(this.c)throw"invalid zip file";this.p=null}};t.prototype.register=function(t){this.o[t.compression]=t};return t}();function unzip(t,e){if(typeof e!="function")throw"no callback";var n=[];var i=function(){for(var t=0;t<n.length;++t)n[t]()};var r={};var a=t.length-22;for(;b4(t,a)!=101010256;--a){if(!a||t.length-a>65558){e("invalid zip file",null);return}}var s=b2(t,a+8);if(!s)e(null,{});var o=s;var l=b4(t,a+16);var c=l==4294967295;if(c){a=b4(t,a-12);if(b4(t,a)!=101075792){e("invalid zip file",null);return}o=s=b4(t,a+32);l=b4(t,a+48)}var u=function(a){var o=zh(t,l,c),u=o[0],h=o[1],d=o[2],f=o[3],p=o[4],m=o[5],g=slzh(t,m);l=p;var _=function(t,n){if(t){i();e(t,null)}else{r[f]=n;if(! --s)e(null,r)}};if(!u)_(null,slc(t,g,g+h));else if(u==8){var y=t.subarray(g,g+h);if(h<32e4){try{_(null,inflateSync(y,new u8(d)))}catch(t){_(t,null)}}else n.push(inflate(y,{size:d},_))}else _("unknown compression type "+u,null)};for(var h=0;h<o;++h){u(h)}return i}function unzipSync(t){var e={};var n=t.length-22;for(;b4(t,n)!=101010256;--n){if(!n||t.length-n>65558)throw"invalid zip file"}var i=b2(t,n+8);if(!i)return{};var r=b4(t,n+16);var a=r==4294967295;if(a){n=b4(t,n-12);if(b4(t,n)!=101075792)throw"invalid zip file";i=b4(t,n+32);r=b4(t,n+48)}for(var s=0;s<i;++s){var o=zh(t,r,a),l=o[0],c=o[1],u=o[2],h=o[3],d=o[4],f=o[5],p=slzh(t,f);r=d;if(!l)e[h]=slc(t,p,p+c);else if(l==8)e[h]=inflateSync(t.subarray(p,p+c),new u8(u));else throw"unknown compression type "+l}return e}var fflate=Object.freeze({__proto__:null,Deflate:Deflate,AsyncDeflate:AsyncDeflate,deflate:deflate,deflateSync:deflateSync,Inflate:Inflate,AsyncInflate:AsyncInflate,inflate:inflate,inflateSync:inflateSync,Gzip:Gzip,AsyncGzip:AsyncGzip,gzip:gzip,gzipSync:gzipSync,Gunzip:Gunzip,AsyncGunzip:AsyncGunzip,gunzip:gunzip,gunzipSync:gunzipSync,Zlib:Zlib,AsyncZlib:AsyncZlib,zlib:zlib,zlibSync:zlibSync,Unzlib:Unzlib,AsyncUnzlib:AsyncUnzlib,unzlib:unzlib,unzlibSync:unzlibSync,compress:gzip,AsyncCompress:AsyncGzip,compressSync:gzipSync,Compress:Gzip,Decompress:Decompress,AsyncDecompress:AsyncDecompress,decompress:decompress,decompressSync:decompressSync,DecodeUTF8:DecodeUTF8,EncodeUTF8:EncodeUTF8,strToU8:strToU8,strFromU8:strFromU8,ZipPassThrough:ZipPassThrough,ZipDeflate:ZipDeflate,AsyncZipDeflate:AsyncZipDeflate,Zip:Zip,zip:zip,zipSync:zipSync,UnzipPassThrough:UnzipPassThrough,UnzipInflate:UnzipInflate,AsyncUnzipInflate:AsyncUnzipInflate,Unzip:Unzip,unzip:unzip,unzipSync:unzipSync});function Loader(t){const e=this;this.texturePath="";this.loadItemList=function(t){LoaderUtils.getFilesFromItemList(t,(function(t,n){e.loadFiles(t,n)}))};this.loadFiles=function(t,n){if(t.length>0){n=n||LoaderUtils.createFilesMap(t);const i=new LoadingManager;i.setURLModifier((function(t){t=t.replace(/^(\.?\/)/,"");const e=n[t];if(e){console.log("Loading",t);return URL.createObjectURL(e)}return t}));i.addHandler(/\.tga$/i,new TGALoader);for(let n=0;n<t.length;n++){e.loadFile(t[n],i)}}};this.loadFile=function(e,a){const s=e.name;const o=s.split(".").pop().toLowerCase();const l=new FileReader;l.addEventListener("progress",(function(t){const e="("+Math.floor(t.total/1e3).format()+" KB)";const n=Math.floor(t.loaded/t.total*100)+"%";console.log("Loading",s,e,n)}));switch(o){case"3dm":{l.addEventListener("load",(async function(e){const n=e.target.result;const{Rhino3dmLoader:i}=await import("./3DMLoader-c987bf83.js");const r=new i;r.setLibraryPath("../examples/jsm/libs/rhino3dm/");r.parse(n,(function(e){t.execute(new AddObjectCommand(t,e))}))}),false);l.readAsArrayBuffer(e);break}case"3ds":{l.addEventListener("load",(async function(e){const{TDSLoader:n}=await import("./TDSLoader-983d7ad3.js");const i=new n;const r=i.parse(e.target.result);t.execute(new AddObjectCommand(t,r))}),false);l.readAsArrayBuffer(e);break}case"3mf":{l.addEventListener("load",(async function(e){const{ThreeMFLoader:n}=await import("./3MFLoader-4928f5b6.js");const i=new n;const r=i.parse(e.target.result);t.execute(new AddObjectCommand(t,r))}),false);l.readAsArrayBuffer(e);break}case"amf":{l.addEventListener("load",(async function(e){const{AMFLoader:n}=await import("./AMFLoader-8bbbb48f.js");const i=new n;const r=i.parse(e.target.result);t.execute(new AddObjectCommand(t,r))}),false);l.readAsArrayBuffer(e);break}case"dae":{l.addEventListener("load",(async function(e){const n=e.target.result;const{ColladaLoader:i}=await import("./ColladaLoader-5652ccae.js");const r=new i(a);const o=r.parse(n);o.scene.name=s;t.execute(new AddObjectCommand(t,o.scene))}),false);l.readAsText(e);break}case"drc":{l.addEventListener("load",(async function(e){const n=e.target.result;const{DRACOLoader:i}=await import("./DRACOLoader-3756c7cf.js");const r=new i;r.setDecoderPath("../examples/js/libs/draco/");r.decodeDracoFile(n,(function(e){let n;if(e.index!==null){const t=new MeshStandardMaterial;n=new Mesh$1(e,t);n.name=s}else{const t=new PointsMaterial({size:.01});t.vertexColors=e.hasAttribute("color");n=new Points(e,t);n.name=s}r.dispose();t.execute(new AddObjectCommand(t,n))}))}),false);l.readAsArrayBuffer(e);break}case"fbx":{l.addEventListener("load",(async function(e){const n=e.target.result;const{FBXLoader:i}=await import("./FBXLoader-49bddaf0.js");const r=new i(a);const s=r.parse(n);t.execute(new AddObjectCommand(t,s))}),false);l.readAsArrayBuffer(e);break}case"glb":{l.addEventListener("load",(async function(e){const n=e.target.result;const{DRACOLoader:i}=await import("./DRACOLoader-3756c7cf.js");const{GLTFLoader:r}=await import("./GLTFLoader-93776a0a.js");const a=new i;a.setDecoderPath("../examples/js/libs/draco/gltf/");const o=new r;o.setDRACOLoader(a);o.parse(n,"",(function(e){const n=e.scene;n.name=s;n.animations.push(...e.animations);t.execute(new AddObjectCommand(t,n))}))}),false);l.readAsArrayBuffer(e);break}case"gltf":{l.addEventListener("load",(async function(e){const n=e.target.result;let i;if(r(n)){alert("Import of glTF asset not possible. Only versions >= 2.0 are supported. Please try to upgrade the file to glTF 2.0 using glTF-Pipeline.")}else{const{DRACOLoader:t}=await import("./DRACOLoader-3756c7cf.js");const{GLTFLoader:e}=await import("./GLTFLoader-93776a0a.js");const n=new t;n.setDecoderPath("../examples/js/libs/draco/gltf/");i=new e(a);i.setDRACOLoader(n)}i.parse(n,"",(function(e){const n=e.scene;n.name=s;n.animations.push(...e.animations);t.execute(new AddObjectCommand(t,n))}))}),false);l.readAsArrayBuffer(e);break}case"js":case"json":{l.addEventListener("load",(function(t){const e=t.target.result;if(e.indexOf("postMessage")!==-1){const t=new Blob([e],{type:"text/javascript"});const i=URL.createObjectURL(t);const r=new Worker(i);r.onmessage=function(t){t.data.metadata={version:2};n(t.data)};r.postMessage(Date.now());return}let i;try{i=JSON.parse(e)}catch(t){alert(t);return}n(i)}),false);l.readAsText(e);break}case"ifc":{l.addEventListener("load",(async function(e){const{IFCLoader:n}=await import("./IFCLoader-5349b4b1.js");const i=new n;i.ifcManager.setWasmPath("../../examples/jsm/loaders/ifc/");const r=await i.parse(e.target.result);r.mesh.name=s;t.execute(new AddObjectCommand(t,r.mesh))}),false);l.readAsArrayBuffer(e);break}case"kmz":{l.addEventListener("load",(async function(e){const{KMZLoader:n}=await import("./KMZLoader-fe82265f.js");const i=new n;const r=i.parse(e.target.result);r.scene.name=s;t.execute(new AddObjectCommand(t,r.scene))}),false);l.readAsArrayBuffer(e);break}case"ldr":case"mpd":{l.addEventListener("load",(async function(e){const{LDrawLoader:n}=await import("./LDrawLoader-a11b7d68.js");const i=new n;i.setPath("../../examples/models/ldraw/officialLibrary/");i.parse(e.target.result,undefined,(function(e){e.name=s;e.rotation.x=Math.PI;t.execute(new AddObjectCommand(t,e))}))}),false);l.readAsText(e);break}case"md2":{l.addEventListener("load",(async function(e){const n=e.target.result;const{MD2Loader:i}=await import("./MD2Loader-f1741765.js");const r=(new i).parse(n);const a=new MeshStandardMaterial;const o=new Mesh$1(r,a);o.mixer=new AnimationMixer(o);o.name=s;o.animations.push(...r.animations);t.execute(new AddObjectCommand(t,o))}),false);l.readAsArrayBuffer(e);break}case"obj":{l.addEventListener("load",(async function(e){const n=e.target.result;const{OBJLoader:i}=await import("./OBJLoader-9a8480b0.js");const r=(new i).parse(n);r.name=s;t.execute(new AddObjectCommand(t,r))}),false);l.readAsText(e);break}case"ply":{l.addEventListener("load",(async function(e){const n=e.target.result;const{PLYLoader:i}=await import("./PLYLoader-898a543b.js");const r=(new i).parse(n);let a;if(r.index!==null){const t=new MeshStandardMaterial;a=new Mesh$1(r,t);a.name=s}else{const t=new PointsMaterial({size:.01});t.vertexColors=r.hasAttribute("color");a=new Points(r,t);a.name=s}t.execute(new AddObjectCommand(t,a))}),false);l.readAsArrayBuffer(e);break}case"stl":{l.addEventListener("load",(async function(e){const n=e.target.result;const{STLLoader:i}=await import("./STLLoader-1059dc79.js");const r=(new i).parse(n);const a=new MeshStandardMaterial;const o=new Mesh$1(r,a);o.name=s;t.execute(new AddObjectCommand(t,o))}),false);if(l.readAsBinaryString!==undefined){l.readAsBinaryString(e)}else{l.readAsArrayBuffer(e)}break}case"svg":{l.addEventListener("load",(async function(e){const n=e.target.result;const{SVGLoader:i}=await import("./SVGLoader-1edde0ac.js");const r=new i;const a=r.parse(n).paths;const s=new Group;s.scale.multiplyScalar(.1);s.scale.y*=-1;for(let t=0;t<a.length;t++){const e=a[t];const n=new MeshBasicMaterial$1({color:e.color,depthWrite:false});const r=i.createShapes(e);for(let t=0;t<r.length;t++){const e=r[t];const i=new ShapeGeometry(e);const a=new Mesh$1(i,n);s.add(a)}}t.execute(new AddObjectCommand(t,s))}),false);l.readAsText(e);break}case"vox":{l.addEventListener("load",(async function(e){const n=e.target.result;const{VOXLoader:i,VOXMesh:r}=await import("./VOXLoader-c5fbf1be.js");const a=(new i).parse(n);const o=new Group;o.name=s;for(let t=0;t<a.length;t++){const e=a[t];const n=new r(e);o.add(n)}t.execute(new AddObjectCommand(t,o))}),false);l.readAsArrayBuffer(e);break}case"vtk":{l.addEventListener("load",(async function(e){const n=e.target.result;const{VTKLoader:i}=await import("./VTKLoader-d696f867.js");const r=(new i).parse(n);const a=new MeshStandardMaterial;const o=new Mesh$1(r,a);o.name=s;t.execute(new AddObjectCommand(t,o))}),false);l.readAsArrayBuffer(e);break}case"wrl":{l.addEventListener("load",(async function(e){const n=e.target.result;const{VRMLLoader:i}=await import("./VRMLLoader-e4fa14d3.js");const r=(new i).parse(n);t.execute(new SetSceneCommand(t,r))}),false);l.readAsText(e);break}case"xyz":{l.addEventListener("load",(async function(e){const n=e.target.result;const{XYZLoader:i}=await import("./XYZLoader-a7e37c4d.js");const r=(new i).parse(n);const a=new PointsMaterial;a.vertexColors=r.hasAttribute("color");const o=new Points(r,a);o.name=s;t.execute(new AddObjectCommand(t,o))}),false);l.readAsText(e);break}case"zip":{l.addEventListener("load",(function(t){i(t.target.result)}),false);l.readAsArrayBuffer(e);break}default:console.error("Unsupported file format ("+o+").");break}};function n(n){if(n.metadata===undefined){n.metadata={type:"Geometry"}}if(n.metadata.type===undefined){n.metadata.type="Geometry"}if(n.metadata.formatVersion!==undefined){n.metadata.version=n.metadata.formatVersion}switch(n.metadata.type.toLowerCase()){case"buffergeometry":{const e=new BufferGeometryLoader;const i=e.parse(n);const r=new Mesh$1(i);t.execute(new AddObjectCommand(t,r));break}case"geometry":console.error('Loader: "Geometry" is no longer supported.');break;case"object":{const i=new ObjectLoader;i.setResourcePath(e.texturePath);i.parse(n,(function(e){if(e.isScene){t.execute(new SetSceneCommand(t,e))}else{t.execute(new AddObjectCommand(t,e))}}));break}case"app":t.fromJSON(n);break}}async function i(e){const n=unzipSync(new Uint8Array(e));if(n["model.obj"]&&n["materials.mtl"]){const{MTLLoader:e}=await import("./MTLLoader-96d8cbb5.js");const{OBJLoader:i}=await import("./OBJLoader-9a8480b0.js");const r=(new e).parse(strFromU8(n["materials.mtl"]));const a=(new i).setMaterials(r).parse(strFromU8(n["model.obj"]));t.execute(new AddObjectCommand(t,a))}for(const e in n){const i=n[e];const r=new LoadingManager;r.setURLModifier((function(t){const e=n[t];if(e){console.log("Loading",t);const n=new Blob([e.buffer],{type:"application/octet-stream"});return URL.createObjectURL(n)}return t}));const a=e.split(".").pop().toLowerCase();switch(a){case"fbx":{const{FBXLoader:e}=await import("./FBXLoader-49bddaf0.js");const n=new e(r);const a=n.parse(i.buffer);t.execute(new AddObjectCommand(t,a));break}case"glb":{const{DRACOLoader:e}=await import("./DRACOLoader-3756c7cf.js");const{GLTFLoader:n}=await import("./GLTFLoader-93776a0a.js");const r=new e;r.setDecoderPath("../examples/js/libs/draco/gltf/");const a=new n;a.setDRACOLoader(r);a.parse(i.buffer,"",(function(e){const n=e.scene;n.animations.push(...e.animations);t.execute(new AddObjectCommand(t,n))}));break}case"gltf":{const{DRACOLoader:e}=await import("./DRACOLoader-3756c7cf.js");const{GLTFLoader:n}=await import("./GLTFLoader-93776a0a.js");const a=new e;a.setDecoderPath("../examples/js/libs/draco/gltf/");const s=new n(r);s.setDRACOLoader(a);s.parse(strFromU8(i),"",(function(e){const n=e.scene;n.animations.push(...e.animations);t.execute(new AddObjectCommand(t,n))}));break}}}}function r(t){let e;if(typeof t==="string"){e=t}else{const n=LoaderUtils$1.decodeText(new Uint8Array(t,0,4));if(n==="glTF"){const e=new DataView(t).getUint32(4,true);return e<2}else{e=LoaderUtils$1.decodeText(new Uint8Array(t))}}const n=JSON.parse(e);return n.asset!=undefined&&n.asset.version[0]<2}}class UIElement{constructor(t){this.dom=t}add(){for(let t=0;t<arguments.length;t++){const e=arguments[t];if(e instanceof UIElement){this.dom.appendChild(e.dom)}else{console.error("UIElement:",e,"is not an instance of UIElement.")}}return this}remove(){for(let t=0;t<arguments.length;t++){const e=arguments[t];if(e instanceof UIElement){this.dom.removeChild(e.dom)}else{console.error("UIElement:",e,"is not an instance of UIElement.")}}return this}clear(){while(this.dom.children.length){this.dom.removeChild(this.dom.lastChild)}}setId(t){this.dom.id=t;return this}getId(){return this.dom.id}setClass(t){this.dom.className=t;return this}addClass(t){this.dom.classList.add(t);return this}removeClass(t){this.dom.classList.remove(t);return this}setStyle(t,e){for(let n=0;n<e.length;n++){this.dom.style[t]=e[n]}return this}setDisabled(t){this.dom.disabled=t;return this}setTextContent(t){this.dom.textContent=t;return this}setInnerHTML(t){this.dom.innerHTML=t}getIndexOfChild(t){return Array.prototype.indexOf.call(this.dom.children,t.dom)}}const properties=["position","left","top","right","bottom","width","height","border","borderLeft","borderTop","borderRight","borderBottom","borderColor","display","overflow","margin","marginLeft","marginTop","marginRight","marginBottom","padding","paddingLeft","paddingTop","paddingRight","paddingBottom","verticalAlign","color","background","backgroundColor","opacity","fontSize","fontWeight","textAlign","textDecoration","textTransform","cursor","zIndex"];properties.forEach((function(t){const e="set"+t.substr(0,1).toUpperCase()+t.substr(1,t.length);UIElement.prototype[e]=function(){this.setStyle(t,arguments);return this}}));const events=["KeyUp","KeyDown","MouseOver","MouseOut","Click","DblClick","Change","Input"];events.forEach((function(t){const e="on"+t;UIElement.prototype[e]=function(e){this.dom.addEventListener(t.toLowerCase(),e.bind(this));return this}}));class UISpan extends UIElement{constructor(){super(document.createElement("span"))}}class UIDiv extends UIElement{constructor(){super(document.createElement("div"))}}class UIRow extends UIDiv{constructor(){super();this.dom.className="Row"}}class UIPanel extends UIDiv{constructor(){super();this.dom.className="Panel"}}class UIText extends UISpan{constructor(t){super();this.dom.className="Text";this.dom.style.cursor="default";this.dom.style.display="inline-block";this.setValue(t)}getValue(){return this.dom.textContent}setValue(t){if(t!==undefined){this.dom.textContent=t}return this}}class UIInput extends UIElement{constructor(t){super(document.createElement("input"));this.dom.className="Input";this.dom.style.padding="2px";this.dom.style.border="1px solid transparent";this.dom.setAttribute("autocomplete","off");this.dom.addEventListener("keydown",(function(t){t.stopPropagation()}));this.setValue(t)}getValue(){return this.dom.value}setValue(t){this.dom.value=t;return this}}class UITextArea extends UIElement{constructor(){super(document.createElement("textarea"));this.dom.className="TextArea";this.dom.style.padding="2px";this.dom.spellcheck=false;this.dom.setAttribute("autocomplete","off");this.dom.addEventListener("keydown",(function(t){t.stopPropagation();if(t.keyCode===9){t.preventDefault();const e=this.selectionStart;this.value=this.value.substring(0,e)+"\t"+this.value.substring(e);this.selectionStart=e+1;this.selectionEnd=this.selectionStart}}))}getValue(){return this.dom.value}setValue(t){this.dom.value=t;return this}}class UISelect extends UIElement{constructor(){super(document.createElement("select"));this.dom.className="Select";this.dom.style.padding="2px";this.dom.setAttribute("autocomplete","off")}setMultiple(t){this.dom.multiple=t;return this}setOptions(t){const e=this.dom.value;while(this.dom.children.length>0){this.dom.removeChild(this.dom.firstChild)}for(const e in t){const n=document.createElement("option");n.value=e;n.innerHTML=t[e];this.dom.appendChild(n)}this.dom.value=e;return this}getValue(){return this.dom.value}setValue(t){t=String(t);if(this.dom.value!==t){this.dom.value=t}return this}}class UICheckbox extends UIElement{constructor(t){super(document.createElement("input"));this.dom.className="Checkbox";this.dom.type="checkbox";this.setValue(t)}getValue(){return this.dom.checked}setValue(t){if(t!==undefined){this.dom.checked=t}return this}}class UIColor extends UIElement{constructor(){super(document.createElement("input"));this.dom.className="Color";this.dom.style.width="32px";this.dom.style.height="16px";this.dom.style.border="0px";this.dom.style.padding="2px";this.dom.style.backgroundColor="transparent";this.dom.setAttribute("autocomplete","off");try{this.dom.type="color";this.dom.value="#ffffff"}catch(t){}}getValue(){return this.dom.value}getHexValue(){return parseInt(this.dom.value.substr(1),16)}setValue(t){this.dom.value=t;return this}setHexValue(t){this.dom.value="#"+("000000"+t.toString(16)).slice(-6);return this}}class UINumber extends UIElement{constructor(t){super(document.createElement("input"));this.dom.style.cursor="ns-resize";this.dom.className="Number";this.dom.value="0.00";this.dom.setAttribute("autocomplete","off");this.value=0;this.min=-Infinity;this.max=Infinity;this.precision=2;this.step=1;this.unit="";this.nudge=.01;this.setValue(t);const e=this;const n=document.createEvent("HTMLEvents");n.initEvent("change",true,true);let i=0;let r=0;const a={x:0,y:0};const s={x:0,y:0};function o(t){t.preventDefault();i=0;r=e.value;s.x=t.clientX;s.y=t.clientY;document.addEventListener("mousemove",l);document.addEventListener("mouseup",c)}function l(t){const o=e.value;a.x=t.clientX;a.y=t.clientY;i+=a.x-s.x-(a.y-s.y);let l=r+i/(t.shiftKey?5:50)*e.step;l=Math.min(e.max,Math.max(e.min,l));if(o!==l){e.setValue(l);e.dom.dispatchEvent(n)}s.x=t.clientX;s.y=t.clientY}function c(){document.removeEventListener("mousemove",l);document.removeEventListener("mouseup",c);if(Math.abs(i)<2){e.dom.focus();e.dom.select()}}function u(t){if(t.touches.length===1){i=0;r=e.value;s.x=t.touches[0].pageX;s.y=t.touches[0].pageY;document.addEventListener("touchmove",h);document.addEventListener("touchend",d)}}function h(t){const o=e.value;a.x=t.touches[0].pageX;a.y=t.touches[0].pageY;i+=a.x-s.x-(a.y-s.y);let l=r+i/(t.shiftKey?5:50)*e.step;l=Math.min(e.max,Math.max(e.min,l));if(o!==l){e.setValue(l);e.dom.dispatchEvent(n)}s.x=t.touches[0].pageX;s.y=t.touches[0].pageY}function d(t){if(t.touches.length===0){document.removeEventListener("touchmove",h);document.removeEventListener("touchend",d)}}function f(){e.setValue(e.dom.value)}function p(){e.dom.style.backgroundColor="";e.dom.style.cursor=""}function m(){e.dom.style.backgroundColor="transparent";e.dom.style.cursor="ns-resize"}function g(t){t.stopPropagation();switch(t.keyCode){case 13:e.dom.blur();break;case 38:t.preventDefault();e.setValue(e.getValue()+e.nudge);e.dom.dispatchEvent(n);break;case 40:t.preventDefault();e.setValue(e.getValue()-e.nudge);e.dom.dispatchEvent(n);break}}m();this.dom.addEventListener("keydown",g);this.dom.addEventListener("mousedown",o);this.dom.addEventListener("touchstart",u);this.dom.addEventListener("change",f);this.dom.addEventListener("focus",p);this.dom.addEventListener("blur",m)}getValue(){return this.value}setValue(t){if(t!==undefined){t=parseFloat(t);if(t<this.min)t=this.min;if(t>this.max)t=this.max;this.value=t;this.dom.value=t.toFixed(this.precision);if(this.unit!=="")this.dom.value+=" "+this.unit}return this}setPrecision(t){this.precision=t;return this}setStep(t){this.step=t;return this}setNudge(t){this.nudge=t;return this}setRange(t,e){this.min=t;this.max=e;return this}setUnit(t){this.unit=t;return this}}class UIInteger extends UIElement{constructor(t){super(document.createElement("input"));this.dom.style.cursor="ns-resize";this.dom.className="Number";this.dom.value="0";this.dom.setAttribute("autocomplete","off");this.value=0;this.min=-Infinity;this.max=Infinity;this.step=1;this.nudge=1;this.setValue(t);const e=this;const n=document.createEvent("HTMLEvents");n.initEvent("change",true,true);let i=0;let r=0;const a={x:0,y:0};const s={x:0,y:0};function o(t){t.preventDefault();i=0;r=e.value;s.x=t.clientX;s.y=t.clientY;document.addEventListener("mousemove",l);document.addEventListener("mouseup",c)}function l(t){const o=e.value;a.x=t.clientX;a.y=t.clientY;i+=a.x-s.x-(a.y-s.y);let l=r+i/(t.shiftKey?5:50)*e.step;l=Math.min(e.max,Math.max(e.min,l))|0;if(o!==l){e.setValue(l);e.dom.dispatchEvent(n)}s.x=t.clientX;s.y=t.clientY}function c(){document.removeEventListener("mousemove",l);document.removeEventListener("mouseup",c);if(Math.abs(i)<2){e.dom.focus();e.dom.select()}}function u(){e.setValue(e.dom.value)}function h(){e.dom.style.backgroundColor="";e.dom.style.cursor=""}function d(){e.dom.style.backgroundColor="transparent";e.dom.style.cursor="ns-resize"}function f(t){t.stopPropagation();switch(t.keyCode){case 13:e.dom.blur();break;case 38:t.preventDefault();e.setValue(e.getValue()+e.nudge);e.dom.dispatchEvent(n);break;case 40:t.preventDefault();e.setValue(e.getValue()-e.nudge);e.dom.dispatchEvent(n);break}}d();this.dom.addEventListener("keydown",f);this.dom.addEventListener("mousedown",o);this.dom.addEventListener("change",u);this.dom.addEventListener("focus",h);this.dom.addEventListener("blur",d)}getValue(){return this.value}setValue(t){if(t!==undefined){t=parseInt(t);this.value=t;this.dom.value=t}return this}setStep(t){this.step=parseInt(t);return this}setNudge(t){this.nudge=t;return this}setRange(t,e){this.min=t;this.max=e;return this}}class UIBreak extends UIElement{constructor(){super(document.createElement("br"));this.dom.className="Break"}}class UIHorizontalRule extends UIElement{constructor(){super(document.createElement("hr"));this.dom.className="HorizontalRule"}}class UIButton extends UIElement{constructor(t){super(document.createElement("button"));this.dom.className="Button";this.dom.textContent=t}}class UIProgress extends UIElement{constructor(t){super(document.createElement("progress"));this.dom.value=t}setValue(t){this.dom.value=t}}class UITabbedPanel extends UIDiv{constructor(){super();this.dom.className="TabbedPanel";this.tabs=[];this.panels=[];this.tabsDiv=new UIDiv;this.tabsDiv.setClass("Tabs");this.panelsDiv=new UIDiv;this.panelsDiv.setClass("Panels");this.add(this.tabsDiv);this.add(this.panelsDiv);this.selected=""}select(t){let e;let n;const i=this;if(this.selected&&this.selected.length){e=this.tabs.find((function(t){return t.dom.id===i.selected}));n=this.panels.find((function(t){return t.dom.id===i.selected}));if(e){e.removeClass("selected")}if(n){n.setDisplay("none")}}e=this.tabs.find((function(e){return e.dom.id===t}));n=this.panels.find((function(e){return e.dom.id===t}));if(e){e.addClass("selected")}if(n){n.setDisplay("")}this.selected=t;return this}addTab(t,e,n){const i=new UITab(e,this);i.setId(t);this.tabs.push(i);this.tabsDiv.add(i);const r=new UIDiv;r.setId(t);r.add(n);r.setDisplay("none");this.panels.push(r);this.panelsDiv.add(r);this.select(t)}}class UITab extends UIText{constructor(t,e){super(t);this.dom.className="Tab";this.parent=e;const n=this;this.dom.addEventListener("click",(function(){n.parent.select(n.dom.id)}))}}class UIListbox extends UIDiv{constructor(){super();this.dom.className="Listbox";this.dom.tabIndex=0;this.items=[];this.listitems=[];this.selectedIndex=0;this.selectedValue=null}setItems(t){if(Array.isArray(t)){this.items=t}this.render()}render(){while(this.listitems.length){const t=this.listitems[0];t.dom.remove();this.listitems.splice(0,1)}for(let t=0;t<this.items.length;t++){const e=this.items[t];const n=new UIListbox.ListboxItem(this);n.setId(e.id||`Listbox-${t}`);n.setTextContent(e.name||e.type);this.add(n)}}add(){const t=Array.from(arguments);this.listitems=this.listitems.concat(t);UIElement.prototype.add.apply(this,t)}selectIndex(t){if(t>=0&&t<this.items.length){this.setValue(this.listitems[t].getId())}this.selectedIndex=t}getValue(){return this.selectedValue}setValue(t){for(let e=0;e<this.listitems.length;e++){const n=this.listitems[e];if(n.getId()===t){n.addClass("active")}else{n.removeClass("active")}}this.selectedValue=t;const e=document.createEvent("HTMLEvents");e.initEvent("change",true,true);this.dom.dispatchEvent(e)}}class ListboxItem extends UIDiv{constructor(t){super();this.dom.className="ListboxItem";this.parent=t;const e=this;function n(){if(e.parent){e.parent.setValue(e.getId())}}this.dom.addEventListener("click",n)}}class Strings{constructor(t){this.language=t.getKey("language");this.values={en:{"menubar/file":"File","menubar/file/new":"New","menubar/file/import":"Import","menubar/file/export/geometry":"Export Geometry","menubar/file/export/object":"Export Object","menubar/file/export/scene":"Export Scene","menubar/file/export/dae":"Export DAE","menubar/file/export/drc":"Export DRC","menubar/file/export/glb":"Export GLB","menubar/file/export/gltf":"Export GLTF","menubar/file/export/obj":"Export OBJ","menubar/file/export/ply":"Export PLY","menubar/file/export/ply_binary":"Export PLY (Binary)","menubar/file/export/stl":"Export STL","menubar/file/export/stl_binary":"Export STL (Binary)","menubar/file/export/usdz":"Export USDZ","menubar/file/publish":"Publish","menubar/edit":"Edit","menubar/edit/undo":"Undo (Ctrl+Z)","menubar/edit/redo":"Redo (Ctrl+Shift+Z)","menubar/edit/clear_history":"Clear History","menubar/edit/center":"Center","menubar/edit/clone":"Clone","menubar/edit/delete":"Delete (Del)","menubar/edit/fixcolormaps":"Fix Color Maps","menubar/add":"Add","menubar/add/group":"Group","menubar/add/plane":"Plane","menubar/add/box":"Box","menubar/add/circle":"Circle","menubar/add/cylinder":"Cylinder","menubar/add/ring":"Ring","menubar/add/sphere":"Sphere","menubar/add/dodecahedron":"Dodecahedron","menubar/add/icosahedron":"Icosahedron","menubar/add/octahedron":"Octahedron","menubar/add/tetrahedron":"Tetrahedron","menubar/add/torus":"Torus","menubar/add/tube":"Tube","menubar/add/torusknot":"TorusKnot","menubar/add/lathe":"Lathe","menubar/add/sprite":"Sprite","menubar/add/pointlight":"PointLight","menubar/add/spotlight":"SpotLight","menubar/add/directionallight":"DirectionalLight","menubar/add/hemispherelight":"HemisphereLight","menubar/add/ambientlight":"AmbientLight","menubar/add/perspectivecamera":"PerspectiveCamera","menubar/add/orthographiccamera":"OrthographicCamera","menubar/status/autosave":"autosave","menubar/play":"Play","menubar/play/stop":"Stop","menubar/play/play":"Play","menubar/examples":"Examples","menubar/examples/Arkanoid":"Arkanoid","menubar/examples/Camera":"Camera","menubar/examples/Particles":"Particles","menubar/examples/Pong":"Pong","menubar/examples/Shaders":"Shaders","menubar/view":"View","menubar/view/fullscreen":"Fullscreen","menubar/help":"Help","menubar/help/source_code":"Source Code","menubar/help/icons":"Icon Pack","menubar/help/about":"About","menubar/help/manual":"Manual","sidebar/animations":"Animations","sidebar/animations/play":"Play","sidebar/animations/stop":"Stop","sidebar/animations/timescale":"Time Scale","sidebar/scene":"Scene","sidebar/scene/background":"Background","sidebar/scene/environment":"Environment","sidebar/scene/fog":"Fog","sidebar/properties/object":"Object","sidebar/properties/geometry":"Geometry","sidebar/properties/material":"Material","sidebar/properties/script":"Script","sidebar/object/type":"Type","sidebar/object/new":"New","sidebar/object/uuid":"UUID","sidebar/object/name":"Name","sidebar/object/position":"Position","sidebar/object/rotation":"Rotation","sidebar/object/scale":"Scale","sidebar/object/fov":"Fov","sidebar/object/left":"Left","sidebar/object/right":"Right","sidebar/object/top":"Top","sidebar/object/bottom":"Bottom","sidebar/object/near":"Near","sidebar/object/far":"Far","sidebar/object/intensity":"Intensity","sidebar/object/color":"Color","sidebar/object/groundcolor":"Ground Color","sidebar/object/distance":"Distance","sidebar/object/angle":"Angle","sidebar/object/penumbra":"Penumbra","sidebar/object/decay":"Decay","sidebar/object/shadow":"Shadow","sidebar/object/shadowBias":"Shadow Bias","sidebar/object/shadowNormalBias":"Shadow Normal Bias","sidebar/object/shadowRadius":"Shadow Radius","sidebar/object/cast":"cast","sidebar/object/receive":"receive","sidebar/object/visible":"Visible","sidebar/object/frustumcull":"Frustum Cull","sidebar/object/renderorder":"Render Order","sidebar/object/userdata":"User data","sidebar/geometry/type":"Type","sidebar/geometry/new":"New","sidebar/geometry/uuid":"UUID","sidebar/geometry/name":"Name","sidebar/geometry/bounds":"Bounds","sidebar/geometry/show_vertex_normals":"Show Vertex Normals","sidebar/geometry/box_geometry/width":"Width","sidebar/geometry/box_geometry/height":"Height","sidebar/geometry/box_geometry/depth":"Depth","sidebar/geometry/box_geometry/widthseg":"Width Seg","sidebar/geometry/box_geometry/heightseg":"Height Seg","sidebar/geometry/box_geometry/depthseg":"Depth Seg","sidebar/geometry/buffer_geometry/attributes":"Attributes","sidebar/geometry/buffer_geometry/index":"index","sidebar/geometry/circle_geometry/radius":"Radius","sidebar/geometry/circle_geometry/segments":"Segments","sidebar/geometry/circle_geometry/thetastart":"Theta start","sidebar/geometry/circle_geometry/thetalength":"Theta length","sidebar/geometry/cylinder_geometry/radiustop":"Radius top","sidebar/geometry/cylinder_geometry/radiusbottom":"Radius bottom","sidebar/geometry/cylinder_geometry/height":"Height","sidebar/geometry/cylinder_geometry/radialsegments":"Radial segments","sidebar/geometry/cylinder_geometry/heightsegments":"Height segments","sidebar/geometry/cylinder_geometry/openended":"Open ended","sidebar/geometry/extrude_geometry/curveSegments":"Curve Segments","sidebar/geometry/extrude_geometry/steps":"Steps","sidebar/geometry/extrude_geometry/depth":"Depth","sidebar/geometry/extrude_geometry/bevelEnabled":"Bevel?","sidebar/geometry/extrude_geometry/bevelThickness":"Thickness","sidebar/geometry/extrude_geometry/bevelSize":"Size","sidebar/geometry/extrude_geometry/bevelOffset":"Offset","sidebar/geometry/extrude_geometry/bevelSegments":"Segments","sidebar/geometry/extrude_geometry/shape":"Convert to Shape","sidebar/geometry/dodecahedron_geometry/radius":"Radius","sidebar/geometry/dodecahedron_geometry/detail":"Detail","sidebar/geometry/icosahedron_geometry/radius":"Radius","sidebar/geometry/icosahedron_geometry/detail":"Detail","sidebar/geometry/octahedron_geometry/radius":"Radius","sidebar/geometry/octahedron_geometry/detail":"Detail","sidebar/geometry/tetrahedron_geometry/radius":"Radius","sidebar/geometry/tetrahedron_geometry/detail":"Detail","sidebar/geometry/lathe_geometry/segments":"Segments","sidebar/geometry/lathe_geometry/phistart":"Phi start (°)","sidebar/geometry/lathe_geometry/philength":"Phi length (°)","sidebar/geometry/lathe_geometry/points":"Points","sidebar/geometry/plane_geometry/width":"Width","sidebar/geometry/plane_geometry/height":"Height","sidebar/geometry/plane_geometry/widthsegments":"Width segments","sidebar/geometry/plane_geometry/heightsegments":"Height segments","sidebar/geometry/ring_geometry/innerRadius":"Inner radius","sidebar/geometry/ring_geometry/outerRadius":"Outer radius","sidebar/geometry/ring_geometry/thetaSegments":"Theta segments","sidebar/geometry/ring_geometry/phiSegments":"Phi segments","sidebar/geometry/ring_geometry/thetastart":"Theta start","sidebar/geometry/ring_geometry/thetalength":"Theta length","sidebar/geometry/shape_geometry/curveSegments":"Curve Segments","sidebar/geometry/shape_geometry/extrude":"Extrude","sidebar/geometry/sphere_geometry/radius":"Radius","sidebar/geometry/sphere_geometry/widthsegments":"Width segments","sidebar/geometry/sphere_geometry/heightsegments":"Height segments","sidebar/geometry/sphere_geometry/phistart":"Phi start","sidebar/geometry/sphere_geometry/philength":"Phi length","sidebar/geometry/sphere_geometry/thetastart":"Theta start","sidebar/geometry/sphere_geometry/thetalength":"Theta length","sidebar/geometry/torus_geometry/radius":"Radius","sidebar/geometry/torus_geometry/tube":"Tube","sidebar/geometry/torus_geometry/radialsegments":"Radial segments","sidebar/geometry/torus_geometry/tubularsegments":"Tubular segments","sidebar/geometry/torus_geometry/arc":"Arc","sidebar/geometry/torusKnot_geometry/radius":"Radius","sidebar/geometry/torusKnot_geometry/tube":"Tube","sidebar/geometry/torusKnot_geometry/tubularsegments":"Tubular segments","sidebar/geometry/torusKnot_geometry/radialsegments":"Radial segments","sidebar/geometry/torusKnot_geometry/p":"P","sidebar/geometry/torusKnot_geometry/q":"Q","sidebar/geometry/tube_geometry/path":"Path","sidebar/geometry/tube_geometry/radius":"Radius","sidebar/geometry/tube_geometry/tube":"Tube","sidebar/geometry/tube_geometry/tubularsegments":"Tubular segments","sidebar/geometry/tube_geometry/radialsegments":"Radial segments","sidebar/geometry/tube_geometry/closed":"Closed","sidebar/geometry/tube_geometry/curvetype":"Curve Type","sidebar/geometry/tube_geometry/tension":"Tension","sidebar/material/new":"New","sidebar/material/copy":"Copy","sidebar/material/paste":"Paste","sidebar/material/slot":"Slot","sidebar/material/type":"Type","sidebar/material/uuid":"UUID","sidebar/material/name":"Name","sidebar/material/program":"Program","sidebar/material/info":"Info","sidebar/material/vertex":"Vert","sidebar/material/fragment":"Frag","sidebar/material/color":"Color","sidebar/material/depthPacking":"Depth Packing","sidebar/material/roughness":"Roughness","sidebar/material/metalness":"Metalness","sidebar/material/reflectivity":"Reflectivity","sidebar/material/emissive":"Emissive","sidebar/material/specular":"Specular","sidebar/material/shininess":"Shininess","sidebar/material/clearcoat":"Clearcoat","sidebar/material/clearcoatroughness":"Clearcoat Roughness","sidebar/material/transmission":"Transmission","sidebar/material/attenuationDistance":"Attenuation Distance","sidebar/material/attenuationColor":"Attenuation Color","sidebar/material/thickness":"Thickness","sidebar/material/vertexcolors":"Vertex Colors","sidebar/material/matcap":"Matcap","sidebar/material/map":"Map","sidebar/material/alphamap":"Alpha Map","sidebar/material/bumpmap":"Bump Map","sidebar/material/normalmap":"Normal Map","sidebar/material/clearcoatnormalmap":"Clearcoat Normal Map","sidebar/material/displacementmap":"Displace Map","sidebar/material/roughnessmap":"Rough. Map","sidebar/material/metalnessmap":"Metal. Map","sidebar/material/specularmap":"Specular Map","sidebar/material/envmap":"Env Map","sidebar/material/lightmap":"Light Map","sidebar/material/aomap":"AO Map","sidebar/material/emissivemap":"Emissive Map","sidebar/material/gradientmap":"Gradient Map","sidebar/material/side":"Side","sidebar/material/size":"Size","sidebar/material/sizeAttenuation":"Size Attenuation","sidebar/material/flatShading":"Flat Shading","sidebar/material/blending":"Blending","sidebar/material/opacity":"Opacity","sidebar/material/transparent":"Transparent","sidebar/material/alphatest":"Alpha Test","sidebar/material/depthtest":"Depth Test","sidebar/material/depthwrite":"Depth Write","sidebar/material/wireframe":"Wireframe","sidebar/script":"Script","sidebar/script/new":"New","sidebar/script/edit":"Edit","sidebar/script/remove":"Remove","sidebar/project":"Project","sidebar/project/title":"Title","sidebar/project/editable":"Editable","sidebar/project/vr":"VR","sidebar/project/renderer":"Renderer","sidebar/project/antialias":"Antialias","sidebar/project/shadows":"Shadows","sidebar/project/physicallyCorrectLights":"Physical lights","sidebar/project/toneMapping":"Tone mapping","sidebar/project/materials":"Materials","sidebar/project/Assign":"Assign","sidebar/project/video":"Video","sidebar/project/resolution":"Resolution","sidebar/project/duration":"Duration","sidebar/project/render":"Render","sidebar/settings":"Settings","sidebar/settings/language":"Language","sidebar/settings/shortcuts":"Shortcuts","sidebar/settings/shortcuts/translate":"Translate","sidebar/settings/shortcuts/rotate":"Rotate","sidebar/settings/shortcuts/scale":"Scale","sidebar/settings/shortcuts/undo":"Undo","sidebar/settings/shortcuts/focus":"Focus","sidebar/settings/viewport":"Viewport","sidebar/settings/viewport/grid":"Grid","sidebar/settings/viewport/helpers":"Helpers","sidebar/history":"History","sidebar/history/persistent":"persistent","toolbar/translate":"Translate","toolbar/rotate":"Rotate","toolbar/scale":"Scale","toolbar/local":"Local","viewport/info/objects":"Objects","viewport/info/vertices":"Vertices","viewport/info/triangles":"Triangles","viewport/info/frametime":"Frametime"}}}getKey(t){return this.values[this.language][t]||"???"}}class Config{constructor(){this.debug=false;this.name="threejs-editor";this.storage={language:"en",autosave:true,"project/title":"","project/editable":false,"project/vr":false,"project/renderer/antialias":true,"project/renderer/shadows":true,"project/renderer/shadowType":1,"project/renderer/physicallyCorrectLights":false,"project/renderer/toneMapping":0,"project/renderer/toneMappingExposure":1,"settings/history":false,"settings/shortcuts/translate":"w","settings/shortcuts/rotate":"e","settings/shortcuts/scale":"r","settings/shortcuts/undo":"z","settings/shortcuts/focus":"f"};if(window.localStorage[this.name]===undefined){window.localStorage[this.name]=JSON.stringify(this.storage)}else{const t=JSON.parse(window.localStorage[this.name]);for(const e in t){this.storage[e]=t[e]}}}getKey(t){return this.storage[t]}setKey(){for(let t=0,e=arguments.length;t<e;t+=2){this.storage[arguments[t]]=arguments[t+1]}window.localStorage[this.name]=JSON.stringify(this.storage);if(this.debug){console.log("["+/\d\d\:\d\d\:\d\d/.exec(new Date)[0]+"]","Saved config to LocalStorage.")}}clear(){delete window.localStorage[this.name]}}class AddScriptCommand extends Command{constructor(t,e,n){super(t);this.type="AddScriptCommand";this.name="Add Script";this.object=e;this.script=n}execute(){if(this.editor.scripts[this.object.uuid]===undefined){this.editor.scripts[this.object.uuid]=[]}this.editor.scripts[this.object.uuid].push(this.script);this.editor.signals.scriptAdded.dispatch(this.script)}undo(){if(this.editor.scripts[this.object.uuid]===undefined)return;const t=this.editor.scripts[this.object.uuid].indexOf(this.script);if(t!==-1){this.editor.scripts[this.object.uuid].splice(t,1)}this.editor.signals.scriptRemoved.dispatch(this.script)}toJSON(){const t=super.toJSON(this);t.objectUuid=this.object.uuid;t.script=this.script;return t}fromJSON(t){super.fromJSON(t);this.script=t.script;this.object=this.editor.objectByUuid(t.objectUuid)}}class MoveObjectCommand extends Command{constructor(t,e,n,i){super(t);this.type="MoveObjectCommand";this.name="Move Object";this.object=e;this.oldParent=e!==undefined?e.parent:undefined;this.oldIndex=this.oldParent!==undefined?this.oldParent.children.indexOf(this.object):undefined;this.newParent=n;if(i!==undefined){this.newIndex=n!==undefined?n.children.indexOf(i):undefined}else{this.newIndex=n!==undefined?n.children.length:undefined}if(this.oldParent===this.newParent&&this.newIndex>this.oldIndex){this.newIndex--}this.newBefore=i}execute(){this.oldParent.remove(this.object);const t=this.newParent.children;t.splice(this.newIndex,0,this.object);this.object.parent=this.newParent;this.object.dispatchEvent({type:"added"});this.editor.signals.sceneGraphChanged.dispatch()}undo(){this.newParent.remove(this.object);const t=this.oldParent.children;t.splice(this.oldIndex,0,this.object);this.object.parent=this.oldParent;this.object.dispatchEvent({type:"added"});this.editor.signals.sceneGraphChanged.dispatch()}toJSON(){const t=super.toJSON(this);t.objectUuid=this.object.uuid;t.newParentUuid=this.newParent.uuid;t.oldParentUuid=this.oldParent.uuid;t.newIndex=this.newIndex;t.oldIndex=this.oldIndex;return t}fromJSON(t){super.fromJSON(t);this.object=this.editor.objectByUuid(t.objectUuid);this.oldParent=this.editor.objectByUuid(t.oldParentUuid);if(this.oldParent===undefined){this.oldParent=this.editor.scene}this.newParent=this.editor.objectByUuid(t.newParentUuid);if(this.newParent===undefined){this.newParent=this.editor.scene}this.newIndex=t.newIndex;this.oldIndex=t.oldIndex}}class MultiCmdsCommand extends Command{constructor(t,e){super(t);this.type="MultiCmdsCommand";this.name="Multiple Changes";this.cmdArray=e!==undefined?e:[]}execute(){this.editor.signals.sceneGraphChanged.active=false;for(let t=0;t<this.cmdArray.length;t++){this.cmdArray[t].execute()}this.editor.signals.sceneGraphChanged.active=true;this.editor.signals.sceneGraphChanged.dispatch()}undo(){this.editor.signals.sceneGraphChanged.active=false;for(let t=this.cmdArray.length-1;t>=0;t--){this.cmdArray[t].undo()}this.editor.signals.sceneGraphChanged.active=true;this.editor.signals.sceneGraphChanged.dispatch()}toJSON(){const t=super.toJSON(this);const e=[];for(let t=0;t<this.cmdArray.length;t++){e.push(this.cmdArray[t].toJSON())}t.cmds=e;return t}fromJSON(t){super.fromJSON(t);const e=t.cmds;for(let t=0;t<e.length;t++){const n=new window[e[t].type];n.fromJSON(e[t]);this.cmdArray.push(n)}}}class RemoveObjectCommand extends Command{constructor(t,e){super(t);this.type="RemoveObjectCommand";this.name="Remove Object";this.object=e;this.parent=e!==undefined?e.parent:undefined;if(this.parent!==undefined){this.index=this.parent.children.indexOf(this.object)}}execute(){this.editor.removeObject(this.object);this.editor.deselect()}undo(){this.editor.addObject(this.object,this.parent,this.index);this.editor.select(this.object)}toJSON(){const t=super.toJSON(this);t.object=this.object.toJSON();t.index=this.index;t.parentUuid=this.parent.uuid;return t}fromJSON(t){super.fromJSON(t);this.parent=this.editor.objectByUuid(t.parentUuid);if(this.parent===undefined){this.parent=this.editor.scene}this.index=t.index;this.object=this.editor.objectByUuid(t.object.object.uuid);if(this.object===undefined){const e=new ObjectLoader;this.object=e.parse(t.object)}}}class RemoveScriptCommand extends Command{constructor(t,e,n){super(t);this.type="RemoveScriptCommand";this.name="Remove Script";this.object=e;this.script=n;if(this.object&&this.script){this.index=this.editor.scripts[this.object.uuid].indexOf(this.script)}}execute(){if(this.editor.scripts[this.object.uuid]===undefined)return;if(this.index!==-1){this.editor.scripts[this.object.uuid].splice(this.index,1)}this.editor.signals.scriptRemoved.dispatch(this.script)}undo(){if(this.editor.scripts[this.object.uuid]===undefined){this.editor.scripts[this.object.uuid]=[]}this.editor.scripts[this.object.uuid].splice(this.index,0,this.script);this.editor.signals.scriptAdded.dispatch(this.script)}toJSON(){const t=super.toJSON(this);t.objectUuid=this.object.uuid;t.script=this.script;t.index=this.index;return t}fromJSON(t){super.fromJSON(t);this.script=t.script;this.index=t.index;this.object=this.editor.objectByUuid(t.objectUuid)}}class SetColorCommand extends Command{constructor(t,e,n,i){super(t);this.type="SetColorCommand";this.name=`Set ${n}`;this.updatable=true;this.object=e;this.attributeName=n;this.oldValue=e!==undefined?this.object[this.attributeName].getHex():undefined;this.newValue=i}execute(){this.object[this.attributeName].setHex(this.newValue);this.editor.signals.objectChanged.dispatch(this.object)}undo(){this.object[this.attributeName].setHex(this.oldValue);this.editor.signals.objectChanged.dispatch(this.object)}update(t){this.newValue=t.newValue}toJSON(){const t=super.toJSON(this);t.objectUuid=this.object.uuid;t.attributeName=this.attributeName;t.oldValue=this.oldValue;t.newValue=this.newValue;return t}fromJSON(t){super.fromJSON(t);this.object=this.editor.objectByUuid(t.objectUuid);this.attributeName=t.attributeName;this.oldValue=t.oldValue;this.newValue=t.newValue}}class SetGeometryCommand extends Command{constructor(t,e,n){super(t);this.type="SetGeometryCommand";this.name="Set Geometry";this.updatable=true;this.object=e;this.oldGeometry=e!==undefined?e.geometry:undefined;this.newGeometry=n}execute(){this.object.geometry.dispose();this.object.geometry=this.newGeometry;this.object.geometry.computeBoundingSphere();this.editor.signals.geometryChanged.dispatch(this.object);this.editor.signals.sceneGraphChanged.dispatch()}undo(){this.object.geometry.dispose();this.object.geometry=this.oldGeometry;this.object.geometry.computeBoundingSphere();this.editor.signals.geometryChanged.dispatch(this.object);this.editor.signals.sceneGraphChanged.dispatch()}update(t){this.newGeometry=t.newGeometry}toJSON(){const t=super.toJSON(this);t.objectUuid=this.object.uuid;t.oldGeometry=this.object.geometry.toJSON();t.newGeometry=this.newGeometry.toJSON();return t}fromJSON(t){super.fromJSON(t);this.object=this.editor.objectByUuid(t.objectUuid);this.oldGeometry=e(t.oldGeometry);this.newGeometry=e(t.newGeometry);function e(t){const e=new ObjectLoader;return e.parseGeometries([t])[t.uuid]}}}class SetGeometryValueCommand extends Command{constructor(t,e,n,i){super(t);this.type="SetGeometryValueCommand";this.name=`Set Geometry.${n}`;this.object=e;this.attributeName=n;this.oldValue=e!==undefined?e.geometry[n]:undefined;this.newValue=i}execute(){this.object.geometry[this.attributeName]=this.newValue;this.editor.signals.objectChanged.dispatch(this.object);this.editor.signals.geometryChanged.dispatch();this.editor.signals.sceneGraphChanged.dispatch()}undo(){this.object.geometry[this.attributeName]=this.oldValue;this.editor.signals.objectChanged.dispatch(this.object);this.editor.signals.geometryChanged.dispatch();this.editor.signals.sceneGraphChanged.dispatch()}toJSON(){const t=super.toJSON(this);t.objectUuid=this.object.uuid;t.attributeName=this.attributeName;t.oldValue=this.oldValue;t.newValue=this.newValue;return t}fromJSON(t){super.fromJSON(t);this.object=this.editor.objectByUuid(t.objectUuid);this.attributeName=t.attributeName;this.oldValue=t.oldValue;this.newValue=t.newValue}}class SetMaterialColorCommand extends Command{constructor(t,e,n,i,r){super(t);this.type="SetMaterialColorCommand";this.name=`Set Material.${n}`;this.updatable=true;this.object=e;this.material=this.object!==undefined?this.editor.getObjectMaterial(e,r):undefined;this.oldValue=this.material!==undefined?this.material[n].getHex():undefined;this.newValue=i;this.attributeName=n}execute(){this.material[this.attributeName].setHex(this.newValue);this.editor.signals.materialChanged.dispatch(this.material)}undo(){this.material[this.attributeName].setHex(this.oldValue);this.editor.signals.materialChanged.dispatch(this.material)}update(t){this.newValue=t.newValue}toJSON(){const t=super.toJSON(this);t.objectUuid=this.object.uuid;t.attributeName=this.attributeName;t.oldValue=this.oldValue;t.newValue=this.newValue;return t}fromJSON(t){super.fromJSON(t);this.object=this.editor.objectByUuid(t.objectUuid);this.attributeName=t.attributeName;this.oldValue=t.oldValue;this.newValue=t.newValue}}class SetMaterialCommand extends Command{constructor(t,e,n,i){super(t);this.type="SetMaterialCommand";this.name="New Material";this.object=e;this.materialSlot=i;this.oldMaterial=this.editor.getObjectMaterial(e,i);this.newMaterial=n}execute(){this.editor.setObjectMaterial(this.object,this.materialSlot,this.newMaterial);this.editor.signals.materialChanged.dispatch(this.newMaterial)}undo(){this.editor.setObjectMaterial(this.object,this.materialSlot,this.oldMaterial);this.editor.signals.materialChanged.dispatch(this.oldMaterial)}toJSON(){const t=super.toJSON(this);t.objectUuid=this.object.uuid;t.oldMaterial=this.oldMaterial.toJSON();t.newMaterial=this.newMaterial.toJSON();return t}fromJSON(t){super.fromJSON(t);this.object=this.editor.objectByUuid(t.objectUuid);this.oldMaterial=e(t.oldMaterial);this.newMaterial=e(t.newMaterial);function e(t){const e=new ObjectLoader;const n=e.parseImages(t.images);const i=e.parseTextures(t.textures,n);const r=e.parseMaterials([t],i);return r[t.uuid]}}}class SetMaterialMapCommand extends Command{constructor(t,e,n,i,r){super(t);this.type="SetMaterialMapCommand";this.name=`Set Material.${n}`;this.object=e;this.material=this.editor.getObjectMaterial(e,r);this.oldMap=e!==undefined?this.material[n]:undefined;this.newMap=i;this.mapName=n}execute(){if(this.oldMap!==null&&this.oldMap!==undefined)this.oldMap.dispose();this.material[this.mapName]=this.newMap;this.material.needsUpdate=true;this.editor.signals.materialChanged.dispatch(this.material)}undo(){this.material[this.mapName]=this.oldMap;this.material.needsUpdate=true;this.editor.signals.materialChanged.dispatch(this.material)}toJSON(){const t=super.toJSON(this);t.objectUuid=this.object.uuid;t.mapName=this.mapName;t.newMap=e(this.newMap);t.oldMap=e(this.oldMap);return t;function e(t){if(t===null||t===undefined)return null;const e={geometries:{},materials:{},textures:{},images:{}};const i=t.toJSON(e);const r=n(e.images);if(r.length>0)i.images=r;i.sourceFile=t.sourceFile;return i}function n(t){const e=[];for(const n in t){const i=t[n];delete i.metadata;e.push(i)}return e}}fromJSON(t){super.fromJSON(t);this.object=this.editor.objectByUuid(t.objectUuid);this.mapName=t.mapName;this.oldMap=e(t.oldMap);this.newMap=e(t.newMap);function e(t){let e=null;if(t!==null){const n=new ObjectLoader;const i=n.parseImages(t.images);const r=n.parseTextures([t],i);e=r[t.uuid];e.sourceFile=t.sourceFile}return e}}}class SetMaterialValueCommand extends Command{constructor(t,e,n,i,r){super(t);this.type="SetMaterialValueCommand";this.name=`Set Material.${n}`;this.updatable=true;this.object=e;this.material=this.editor.getObjectMaterial(e,r);this.oldValue=this.material!==undefined?this.material[n]:undefined;this.newValue=i;this.attributeName=n}execute(){this.material[this.attributeName]=this.newValue;this.material.needsUpdate=true;this.editor.signals.objectChanged.dispatch(this.object);this.editor.signals.materialChanged.dispatch(this.material)}undo(){this.material[this.attributeName]=this.oldValue;this.material.needsUpdate=true;this.editor.signals.objectChanged.dispatch(this.object);this.editor.signals.materialChanged.dispatch(this.material)}update(t){this.newValue=t.newValue}toJSON(){const t=super.toJSON(this);t.objectUuid=this.object.uuid;t.attributeName=this.attributeName;t.oldValue=this.oldValue;t.newValue=this.newValue;return t}fromJSON(t){super.fromJSON(t);this.attributeName=t.attributeName;this.oldValue=t.oldValue;this.newValue=t.newValue;this.object=this.editor.objectByUuid(t.objectUuid)}}class SetMaterialVectorCommand extends Command{constructor(t,e,n,i,r){super(t);this.type="SetMaterialColorCommand";this.name=`Set Material.${n}`;this.updatable=true;this.object=e;this.material=this.editor.getObjectMaterial(e,r);this.oldValue=this.material!==undefined?this.material[n].toArray():undefined;this.newValue=i;this.attributeName=n}execute(){this.material[this.attributeName].fromArray(this.newValue);this.editor.signals.materialChanged.dispatch(this.material)}undo(){this.material[this.attributeName].fromArray(this.oldValue);this.editor.signals.materialChanged.dispatch(this.material)}update(t){this.newValue=t.newValue}toJSON(){const t=super.toJSON(this);t.objectUuid=this.object.uuid;t.attributeName=this.attributeName;t.oldValue=this.oldValue;t.newValue=this.newValue;return t}fromJSON(t){super.fromJSON(t);this.object=this.editor.objectByUuid(t.objectUuid);this.attributeName=t.attributeName;this.oldValue=t.oldValue;this.newValue=t.newValue}}class SetPositionCommand$1 extends Command{constructor(t,e,n,i){super(t);this.type="SetPositionCommand";this.name="Set Position";this.updatable=true;this.object=e;if(e!==undefined&&n!==undefined){this.oldPosition=e.position.clone();this.newPosition=n.clone()}if(i!==undefined){this.oldPosition=i.clone()}}execute(){this.object.position.copy(this.newPosition);this.object.updateMatrixWorld(true);this.editor.signals.objectChanged.dispatch(this.object)}undo(){this.object.position.copy(this.oldPosition);this.object.updateMatrixWorld(true);this.editor.signals.objectChanged.dispatch(this.object)}update(t){this.newPosition.copy(t.newPosition)}toJSON(){const t=super.toJSON(this);t.objectUuid=this.object.uuid;t.oldPosition=this.oldPosition.toArray();t.newPosition=this.newPosition.toArray();return t}fromJSON(t){super.fromJSON(t);this.object=this.editor.objectByUuid(t.objectUuid);this.oldPosition=(new Vector3$1).fromArray(t.oldPosition);this.newPosition=(new Vector3$1).fromArray(t.newPosition)}}class SetRotationCommand$1 extends Command{constructor(t,e,n,i){super(t);this.type="SetRotationCommand";this.name="Set Rotation";this.updatable=true;this.object=e;if(e!==undefined&&n!==undefined){this.oldRotation=e.rotation.clone();this.newRotation=n.clone()}if(i!==undefined){this.oldRotation=i.clone()}}execute(){this.object.rotation.copy(this.newRotation);this.object.updateMatrixWorld(true);this.editor.signals.objectChanged.dispatch(this.object)}undo(){this.object.rotation.copy(this.oldRotation);this.object.updateMatrixWorld(true);this.editor.signals.objectChanged.dispatch(this.object)}update(t){this.newRotation.copy(t.newRotation)}toJSON(){const t=super.toJSON(this);t.objectUuid=this.object.uuid;t.oldRotation=this.oldRotation.toArray();t.newRotation=this.newRotation.toArray();return t}fromJSON(t){super.fromJSON(t);this.object=this.editor.objectByUuid(t.objectUuid);this.oldRotation=(new Euler$1).fromArray(t.oldRotation);this.newRotation=(new Euler$1).fromArray(t.newRotation)}}class SetScaleCommand$1 extends Command{constructor(t,e,n,i){super(t);this.type="SetScaleCommand";this.name="Set Scale";this.updatable=true;this.object=e;if(e!==undefined&&n!==undefined){this.oldScale=e.scale.clone();this.newScale=n.clone()}if(i!==undefined){this.oldScale=i.clone()}}execute(){this.object.scale.copy(this.newScale);this.object.updateMatrixWorld(true);this.editor.signals.objectChanged.dispatch(this.object)}undo(){this.object.scale.copy(this.oldScale);this.object.updateMatrixWorld(true);this.editor.signals.objectChanged.dispatch(this.object)}update(t){this.newScale.copy(t.newScale)}toJSON(){const t=super.toJSON(this);t.objectUuid=this.object.uuid;t.oldScale=this.oldScale.toArray();t.newScale=this.newScale.toArray();return t}fromJSON(t){super.fromJSON(t);this.object=this.editor.objectByUuid(t.objectUuid);this.oldScale=(new Vector3$1).fromArray(t.oldScale);this.newScale=(new Vector3$1).fromArray(t.newScale)}}class SetScriptValueCommand extends Command{constructor(t,e,n,i,r){super(t);this.type="SetScriptValueCommand";this.name=`Set Script.${i}`;this.updatable=true;this.object=e;this.script=n;this.attributeName=i;this.oldValue=n!==undefined?n[this.attributeName]:undefined;this.newValue=r}execute(){this.script[this.attributeName]=this.newValue;this.editor.signals.scriptChanged.dispatch()}undo(){this.script[this.attributeName]=this.oldValue;this.editor.signals.scriptChanged.dispatch()}update(t){this.newValue=t.newValue}toJSON(){const t=super.toJSON(this);t.objectUuid=this.object.uuid;t.index=this.editor.scripts[this.object.uuid].indexOf(this.script);t.attributeName=this.attributeName;t.oldValue=this.oldValue;t.newValue=this.newValue;return t}fromJSON(t){super.fromJSON(t);this.oldValue=t.oldValue;this.newValue=t.newValue;this.attributeName=t.attributeName;this.object=this.editor.objectByUuid(t.objectUuid);this.script=this.editor.scripts[t.objectUuid][t.index]}}var Commands=Object.freeze({__proto__:null,AddObjectCommand:AddObjectCommand,AddScriptCommand:AddScriptCommand,MoveObjectCommand:MoveObjectCommand,MultiCmdsCommand:MultiCmdsCommand,RemoveObjectCommand:RemoveObjectCommand,RemoveScriptCommand:RemoveScriptCommand,SetColorCommand:SetColorCommand,SetGeometryCommand:SetGeometryCommand,SetGeometryValueCommand:SetGeometryValueCommand,SetMaterialColorCommand:SetMaterialColorCommand,SetMaterialCommand:SetMaterialCommand,SetMaterialMapCommand:SetMaterialMapCommand,SetMaterialValueCommand:SetMaterialValueCommand,SetMaterialVectorCommand:SetMaterialVectorCommand,SetPositionCommand:SetPositionCommand$1,SetRotationCommand:SetRotationCommand$1,SetScaleCommand:SetScaleCommand$1,SetSceneCommand:SetSceneCommand,SetScriptValueCommand:SetScriptValueCommand,SetUuidCommand:SetUuidCommand,SetValueCommand:SetValueCommand});class History{constructor(t){this.editor=t;this.undos=[];this.redos=[];this.lastCmdTime=new Date;this.idCounter=0;this.historyDisabled=false;this.config=t.config}execute(t,e){const n=this.undos[this.undos.length-1];const i=(new Date).getTime()-this.lastCmdTime.getTime();const r=n&&n.updatable&&t.updatable&&n.object===t.object&&n.type===t.type&&n.script===t.script&&n.attributeName===t.attributeName;if(r&&t.type==="SetScriptValueCommand"){n.update(t);t=n}else if(r&&i<500){n.update(t);t=n}else{this.undos.push(t);t.id=++this.idCounter}t.name=e!==undefined?e:t.name;t.execute();t.inMemory=true;if(this.config.getKey("settings/history")){t.json=t.toJSON()}this.lastCmdTime=new Date;this.redos=[]}undo(){if(this.historyDisabled){alert("Undo/Redo disabled while scene is playing.");return}let t=undefined;if(this.undos.length>0){t=this.undos.pop();if(t.inMemory===false){t.fromJSON(t.json)}}if(t!==undefined){t.undo();this.redos.push(t)}return t}redo(){if(this.historyDisabled){alert("Undo/Redo disabled while scene is playing.");return}let t=undefined;if(this.redos.length>0){t=this.redos.pop();if(t.inMemory===false){t.fromJSON(t.json)}}if(t!==undefined){t.execute();this.undos.push(t)}return t}toJSON(){const t={};t.undos=[];t.redos=[];if(!this.config.getKey("settings/history")){return t}for(let e=0;e<this.undos.length;e++){if(this.undos[e].hasOwnProperty("json")){t.undos.push(this.undos[e].json)}}for(let e=0;e<this.redos.length;e++){if(this.redos[e].hasOwnProperty("json")){t.redos.push(this.redos[e].json)}}return t}fromJSON(t){if(t===undefined)return;for(let e=0;e<t.undos.length;e++){const n=t.undos[e];const i=new Commands[n.type](this.editor);i.json=n;i.id=n.id;i.name=n.name;this.undos.push(i);this.idCounter=n.id>this.idCounter?n.id:this.idCounter}for(let e=0;e<t.redos.length;e++){const n=t.redos[e];const i=new Commands[n.type](this.editor);i.json=n;i.id=n.id;i.name=n.name;this.redos.push(i);this.idCounter=n.id>this.idCounter?n.id:this.idCounter}}clear(){this.undos=[];this.redos=[];this.idCounter=0}goToState(t){if(this.historyDisabled){alert("Undo/Redo disabled while scene is playing.");return}let e=this.undos.length>0?this.undos[this.undos.length-1]:undefined;if(e===undefined||t>e.id){e=this.redo();while(e!==undefined&&t>e.id){e=this.redo()}}else{while(true){e=this.undos[this.undos.length-1];if(e===undefined||t===e.id)break;this.undo()}}}enableSerialization(t){this.goToState(-1);let e=this.redo();while(e!==undefined){if(!e.hasOwnProperty("json")){e.json=e.toJSON()}e=this.redo()}this.goToState(t)}}class SetPositionCommand extends Command{constructor(t,e,n,i){super(t);this.type="SetPositionCommand";this.name="Set Position";this.updatable=true;this.object=e;if(e!==undefined&&n!==undefined){this.oldPosition=e.position.clone();this.newPosition=n.clone()}if(i!==undefined){this.oldPosition=i.clone()}}execute(){this.object.position.copy(this.newPosition);this.object.updateMatrixWorld(true)}undo(){this.object.position.copy(this.oldPosition);this.object.updateMatrixWorld(true)}update(t){this.newPosition.copy(t.newPosition)}toJSON(){const t=super.toJSON(this);t.objectUuid=this.object.uuid;t.oldPosition=this.oldPosition.toArray();t.newPosition=this.newPosition.toArray();return t}fromJSON(t){super.fromJSON(t);this.object=this.editor.objectByUuid(t.objectUuid);this.oldPosition=(new Vector3$1).fromArray(t.oldPosition);this.newPosition=(new Vector3$1).fromArray(t.newPosition)}}class SetRotationCommand extends Command{constructor(t,e,n,i){super(t);this.type="SetRotationCommand";this.name="Set Rotation";this.updatable=true;this.object=e;if(e!==undefined&&n!==undefined){this.oldRotation=e.rotation.clone();this.newRotation=n.clone()}if(i!==undefined){this.oldRotation=i.clone()}}execute(){this.object.rotation.copy(this.newRotation);this.object.updateMatrixWorld(true)}undo(){this.object.rotation.copy(this.oldRotation);this.object.updateMatrixWorld(true)}update(t){this.newRotation.copy(t.newRotation)}toJSON(){const t=super.toJSON(this);t.objectUuid=this.object.uuid;t.oldRotation=this.oldRotation.toArray();t.newRotation=this.newRotation.toArray();return t}fromJSON(t){super.fromJSON(t);this.object=this.editor.objectByUuid(t.objectUuid);this.oldRotation=(new Euler$1).fromArray(t.oldRotation);this.newRotation=(new Euler$1).fromArray(t.newRotation)}}class SetScaleCommand extends Command{constructor(t,e,n,i){super(t);this.type="SetScaleCommand";this.name="Set Scale";this.updatable=true;this.object=e;if(e!==undefined&&n!==undefined){this.oldScale=e.scale.clone();this.newScale=n.clone()}if(i!==undefined){this.oldScale=i.clone()}}execute(){this.object.scale.copy(this.newScale);this.object.updateMatrixWorld(true)}undo(){this.object.scale.copy(this.oldScale);this.object.updateMatrixWorld(true)}update(t){this.newScale.copy(t.newScale)}toJSON(){const t=super.toJSON(this);t.objectUuid=this.object.uuid;t.oldScale=this.oldScale.toArray();t.newScale=this.newScale.toArray();return t}fromJSON(t){super.fromJSON(t);this.object=this.editor.objectByUuid(t.objectUuid);this.oldScale=(new Vector3$1).fromArray(t.oldScale);this.newScale=(new Vector3$1).fromArray(t.newScale)}}class VR{constructor(t){let e=null;let n=null;let i=null;const r=[];this.currentSession=null;const a=async a=>{const o=document.getElementById("sidebar");o.style.width="300px";o.style.height="700px";if(e===null){e=new InteractiveGroup(i);t.sceneHelpers.add(e);const n=new HTMLMesh(o);n.position.set(1,1.5,-.5);n.rotation.y=-.5;n.scale.setScalar(2);e.add(n);r.push(n);const a=new THREE.BufferGeometry;a.setFromPoints([new THREE.Vector3(0,0,0),new THREE.Vector3(0,0,-5)]);const s=i.xr.getController(0);s.add(new THREE.Line(a));e.add(s);const l=i.xr.getController(1);l.add(new THREE.Line(a));e.add(l);const c=new XRControllerModelFactory;const u=i.xr.getControllerGrip(0);u.add(c.createControllerModel(u));e.add(u);const h=i.xr.getControllerGrip(1);h.add(c.createControllerModel(h));e.add(h)}n=t.camera.clone();e.visible=true;this.currentSession=a;this.currentSession.addEventListener("end",s);await i.xr.setSession(this.currentSession)};const s=async()=>{const r=document.getElementById("sidebar");r.style.width="";r.style.height="";t.camera.copy(n);e.visible=false;this.currentSession.removeEventListener("end",s);this.currentSession=null;await i.xr.setSession(null)}}}class ViewportInfo{constructor(t){const e=new UIPanel;e.setId("viewInfo");this.objectsText=new UIText("0").setClass("item-value");this.verticesText=new UIText("0").setClass("item-value");this.trianglesText=new UIText("0").setClass("item-value");this.frametimeText=new UIText("0").setClass("item-value");let n=new UIDiv;n.add(new UIText(t.strings.getKey("viewport/info/objects")),this.objectsText);e.add(n);n=new UIDiv;n.add(new UIText(t.strings.getKey("viewport/info/vertices")),this.verticesText);e.add(n);n=new UIDiv;n.add(new UIText(t.strings.getKey("viewport/info/triangles")),this.trianglesText);e.add(n);n=new UIDiv;n.add(new UIText(t.strings.getKey("viewport/info/frametime")),this.frametimeText);e.add(n);this.editor=t;this.container=e}update(){const t=this.editor.scene;let e=0,n=0,i=0;for(let r=0,a=t.children.length;r<a;r++){const a=t.children[r];a.traverseVisible((function(t){e++;if(t.isMesh){const e=t.geometry;n+=e.attributes.position.count;if(e.index!==null){i+=e.index.count/3}else{i+=e.attributes.position.count/3}}}))}this.objectsText.setValue(e.format());this.verticesText.setValue(n.format());this.trianglesText.setValue(i.format())}updateFrametime(t){this.frametimeText.setValue(Number(t).toFixed(2)+" ms")}}class RoomEnvironment extends Scene{constructor(){super();const t=new BoxGeometry$1;t.deleteAttribute("uv");const e=new MeshStandardMaterial({side:BackSide});const n=new MeshStandardMaterial;const i=new PointLight(16777215,5,28,2);i.position.set(.418,16.199,.3);this.add(i);const r=new Mesh$1(t,e);r.position.set(-.757,13.219,.717);r.scale.set(31.713,28.305,28.591);this.add(r);const a=new Mesh$1(t,n);a.position.set(-10.906,2.009,1.846);a.rotation.set(0,-.195,0);a.scale.set(2.328,7.905,4.651);this.add(a);const s=new Mesh$1(t,n);s.position.set(-5.607,-.754,-.758);s.rotation.set(0,.994,0);s.scale.set(1.97,1.534,3.955);this.add(s);const o=new Mesh$1(t,n);o.position.set(6.167,.857,7.803);o.rotation.set(0,.561,0);o.scale.set(3.927,6.285,3.687);this.add(o);const l=new Mesh$1(t,n);l.position.set(-2.017,.018,6.124);l.rotation.set(0,.333,0);l.scale.set(2.002,4.566,2.064);this.add(l);const c=new Mesh$1(t,n);c.position.set(2.291,-.756,-2.621);c.rotation.set(0,-.286,0);c.scale.set(1.546,1.552,1.496);this.add(c);const u=new Mesh$1(t,n);u.position.set(-2.193,-.369,-5.547);u.rotation.set(0,.516,0);u.scale.set(3.875,3.487,2.986);this.add(u);const h=new Mesh$1(t,createAreaLightMaterial(50));h.position.set(-16.116,14.37,8.208);h.scale.set(.1,2.428,2.739);this.add(h);const d=new Mesh$1(t,createAreaLightMaterial(50));d.position.set(-16.109,18.021,-8.207);d.scale.set(.1,2.425,2.751);this.add(d);const f=new Mesh$1(t,createAreaLightMaterial(17));f.position.set(14.904,12.198,-1.832);f.scale.set(.15,4.265,6.331);this.add(f);const p=new Mesh$1(t,createAreaLightMaterial(43));p.position.set(-.462,8.89,14.52);p.scale.set(4.38,5.441,.088);this.add(p);const m=new Mesh$1(t,createAreaLightMaterial(20));m.position.set(3.235,11.486,-12.541);m.scale.set(2.5,2,.1);this.add(m);const g=new Mesh$1(t,createAreaLightMaterial(100));g.position.set(0,20,0);g.scale.set(1,.1,1);this.add(g)}}function createAreaLightMaterial(t){const e=new MeshBasicMaterial$1;e.color.setScalar(t);return e}const CopyShader={uniforms:{tDiffuse:{value:null},opacity:{value:1}},vertexShader:`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,fragmentShader:`\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = opacity * texel;\n\n\t\t}`};class Pass$1{constructor(){this.enabled=true;this.needsSwap=true;this.clear=false;this.renderToScreen=false}setSize(){}render(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}}const _camera$1=new OrthographicCamera(-1,1,1,-1,0,1);const _geometry$1=new BufferGeometry$1;_geometry$1.setAttribute("position",new Float32BufferAttribute$1([-1,3,0,-1,-1,0,3,-1,0],3));_geometry$1.setAttribute("uv",new Float32BufferAttribute$1([0,2,0,0,2,0],2));class FullScreenQuad$1{constructor(t){this._mesh=new Mesh$1(_geometry$1,t)}dispose(){this._mesh.geometry.dispose()}render(t){t.render(this._mesh,_camera$1)}get material(){return this._mesh.material}set material(t){this._mesh.material=t}}class ShaderPass extends Pass$1{constructor(t,e){super();this.textureID=e!==undefined?e:"tDiffuse";if(t instanceof ShaderMaterial){this.uniforms=t.uniforms;this.material=t}else if(t){this.uniforms=UniformsUtils.clone(t.uniforms);this.material=new ShaderMaterial({defines:Object.assign({},t.defines),uniforms:this.uniforms,vertexShader:t.vertexShader,fragmentShader:t.fragmentShader})}this.fsQuad=new FullScreenQuad$1(this.material)}render(t,e,n){if(this.uniforms[this.textureID]){this.uniforms[this.textureID].value=n.texture}this.fsQuad.material=this.material;if(this.renderToScreen){t.setRenderTarget(null);this.fsQuad.render(t)}else{t.setRenderTarget(e);if(this.clear)t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil);this.fsQuad.render(t)}}}class MaskPass extends Pass$1{constructor(t,e){super();this.scene=t;this.camera=e;this.clear=true;this.needsSwap=false;this.inverse=false}render(t,e,n){const i=t.getContext();const r=t.state;r.buffers.color.setMask(false);r.buffers.depth.setMask(false);r.buffers.color.setLocked(true);r.buffers.depth.setLocked(true);let a,s;if(this.inverse){a=0;s=1}else{a=1;s=0}r.buffers.stencil.setTest(true);r.buffers.stencil.setOp(i.REPLACE,i.REPLACE,i.REPLACE);r.buffers.stencil.setFunc(i.ALWAYS,a,4294967295);r.buffers.stencil.setClear(s);r.buffers.stencil.setLocked(true);t.setRenderTarget(n);if(this.clear)t.clear();t.render(this.scene,this.camera);t.setRenderTarget(e);if(this.clear)t.clear();t.render(this.scene,this.camera);r.buffers.color.setLocked(false);r.buffers.depth.setLocked(false);r.buffers.stencil.setLocked(false);r.buffers.stencil.setFunc(i.EQUAL,1,4294967295);r.buffers.stencil.setOp(i.KEEP,i.KEEP,i.KEEP);r.buffers.stencil.setLocked(true)}}class ClearMaskPass extends Pass$1{constructor(){super();this.needsSwap=false}render(t){t.state.buffers.stencil.setLocked(false);t.state.buffers.stencil.setTest(false)}}class EffectComposer{constructor(t,e){this.renderer=t;if(e===undefined){const n={minFilter:LinearFilter,magFilter:LinearFilter,format:RGBAFormat};const i=t.getSize(new Vector2);this._pixelRatio=t.getPixelRatio();this._width=i.width;this._height=i.height;e=new WebGLRenderTarget(this._width*this._pixelRatio,this._height*this._pixelRatio,n);e.texture.name="EffectComposer.rt1"}else{this._pixelRatio=1;this._width=e.width;this._height=e.height}this.renderTarget1=e;this.renderTarget2=e.clone();this.renderTarget2.texture.name="EffectComposer.rt2";this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2;this.renderToScreen=true;this.passes=[];if(CopyShader===undefined){console.error("THREE.EffectComposer relies on CopyShader")}if(ShaderPass===undefined){console.error("THREE.EffectComposer relies on ShaderPass")}this.copyPass=new ShaderPass(CopyShader);this.clock=new Clock}swapBuffers(){const t=this.readBuffer;this.readBuffer=this.writeBuffer;this.writeBuffer=t}addPass(t){this.passes.push(t);t.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}insertPass(t,e){this.passes.splice(e,0,t);t.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}removePass(t){const e=this.passes.indexOf(t);if(e!==-1){this.passes.splice(e,1)}}isLastEnabledPass(t){for(let e=t+1;e<this.passes.length;e++){if(this.passes[e].enabled){return false}}return true}render(t){if(t===undefined){t=this.clock.getDelta()}const e=this.renderer.getRenderTarget();let n=false;for(let e=0,i=this.passes.length;e<i;e++){const i=this.passes[e];if(i.enabled===false)continue;i.renderToScreen=this.renderToScreen&&this.isLastEnabledPass(e);i.render(this.renderer,this.writeBuffer,this.readBuffer,t,n);if(i.needsSwap){if(n){const e=this.renderer.getContext();const n=this.renderer.state.buffers.stencil;n.setFunc(e.NOTEQUAL,1,4294967295);this.copyPass.render(this.renderer,this.writeBuffer,this.readBuffer,t);n.setFunc(e.EQUAL,1,4294967295)}this.swapBuffers()}if(MaskPass!==undefined){if(i instanceof MaskPass){n=true}else if(i instanceof ClearMaskPass){n=false}}}this.renderer.setRenderTarget(e)}reset(t){if(t===undefined){const e=this.renderer.getSize(new Vector2);this._pixelRatio=this.renderer.getPixelRatio();this._width=e.width;this._height=e.height;t=this.renderTarget1.clone();t.setSize(this._width*this._pixelRatio,this._height*this._pixelRatio)}this.renderTarget1.dispose();this.renderTarget2.dispose();this.renderTarget1=t;this.renderTarget2=t.clone();this.writeBuffer=this.renderTarget1;this.readBuffer=this.renderTarget2}setSize(t,e){this._width=t;this._height=e;const n=this._width*this._pixelRatio;const i=this._height*this._pixelRatio;this.renderTarget1.setSize(n,i);this.renderTarget2.setSize(n,i);for(let t=0;t<this.passes.length;t++){this.passes[t].setSize(n,i)}}setPixelRatio(t){this._pixelRatio=t;this.setSize(this._width,this._height)}}class Pass{constructor(){this.enabled=true;this.needsSwap=true;this.clear=false;this.renderToScreen=false}setSize(){}render(){console.error("THREE.Pass: .render() must be implemented in derived pass.")}}const _camera=new OrthographicCamera(-1,1,1,-1,0,1);const _geometry=new BufferGeometry$1;_geometry.setAttribute("position",new Float32BufferAttribute$1([-1,3,0,-1,-1,0,3,-1,0],3));_geometry.setAttribute("uv",new Float32BufferAttribute$1([0,2,0,0,2,0],2));class FullScreenQuad{constructor(t){this._mesh=new Mesh$1(_geometry,t)}dispose(){this._mesh.geometry.dispose()}render(t){t.render(this._mesh,_camera)}get material(){return this._mesh.material}set material(t){this._mesh.material=t}}class RenderPass extends Pass$1{constructor(t,e,n,i,r){super();this.scene=t;this.camera=e;this.overrideMaterial=n;this.clearColor=i;this.clearAlpha=r!==undefined?r:0;this.clear=true;this.clearDepth=false;this.needsSwap=false;this._oldClearColor=new Color$1}render(t,e,n){const i=t.autoClear;t.autoClear=false;let r,a;if(this.overrideMaterial!==undefined){a=this.scene.overrideMaterial;this.scene.overrideMaterial=this.overrideMaterial}if(this.clearColor){t.getClearColor(this._oldClearColor);r=t.getClearAlpha();t.setClearColor(this.clearColor,this.clearAlpha)}if(this.clearDepth){t.clearDepth()}t.setRenderTarget(this.renderToScreen?null:n);if(this.clear)t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil);t.render(this.scene,this.camera);if(this.clearColor){t.setClearColor(this._oldClearColor,r)}if(this.overrideMaterial!==undefined){this.scene.overrideMaterial=a}t.autoClear=i}}class OutlinePass extends Pass$1{constructor(t,e,n,i){super();this.renderScene=e;this.renderCamera=n;this.selectedObjects=i!==undefined?i:[];this.visibleEdgeColor=new Color$1(1,1,1);this.hiddenEdgeColor=new Color$1(.1,.04,.02);this.edgeGlow=0;this.usePatternTexture=false;this.edgeThickness=1;this.edgeStrength=3;this.downSampleRatio=2;this.pulsePeriod=0;this._visibilityCache=new Map;this.resolution=t!==undefined?new Vector2(t.x,t.y):new Vector2(256,256);const r={minFilter:LinearFilter,magFilter:LinearFilter,format:RGBAFormat};const a=Math.round(this.resolution.x/this.downSampleRatio);const s=Math.round(this.resolution.y/this.downSampleRatio);this.renderTargetMaskBuffer=new WebGLRenderTarget(this.resolution.x,this.resolution.y,r);this.renderTargetMaskBuffer.texture.name="OutlinePass.mask";this.renderTargetMaskBuffer.texture.generateMipmaps=false;this.depthMaterial=new MeshDepthMaterial;this.depthMaterial.side=DoubleSide$1;this.depthMaterial.depthPacking=RGBADepthPacking;this.depthMaterial.blending=NoBlending;this.prepareMaskMaterial=this.getPrepareMaskMaterial();this.prepareMaskMaterial.side=DoubleSide$1;this.prepareMaskMaterial.fragmentShader=u(this.prepareMaskMaterial.fragmentShader,this.renderCamera);this.renderTargetDepthBuffer=new WebGLRenderTarget(this.resolution.x,this.resolution.y,r);this.renderTargetDepthBuffer.texture.name="OutlinePass.depth";this.renderTargetDepthBuffer.texture.generateMipmaps=false;this.renderTargetMaskDownSampleBuffer=new WebGLRenderTarget(a,s,r);this.renderTargetMaskDownSampleBuffer.texture.name="OutlinePass.depthDownSample";this.renderTargetMaskDownSampleBuffer.texture.generateMipmaps=false;this.renderTargetBlurBuffer1=new WebGLRenderTarget(a,s,r);this.renderTargetBlurBuffer1.texture.name="OutlinePass.blur1";this.renderTargetBlurBuffer1.texture.generateMipmaps=false;this.renderTargetBlurBuffer2=new WebGLRenderTarget(Math.round(a/2),Math.round(s/2),r);this.renderTargetBlurBuffer2.texture.name="OutlinePass.blur2";this.renderTargetBlurBuffer2.texture.generateMipmaps=false;this.edgeDetectionMaterial=this.getEdgeDetectionMaterial();this.renderTargetEdgeBuffer1=new WebGLRenderTarget(a,s,r);this.renderTargetEdgeBuffer1.texture.name="OutlinePass.edge1";this.renderTargetEdgeBuffer1.texture.generateMipmaps=false;this.renderTargetEdgeBuffer2=new WebGLRenderTarget(Math.round(a/2),Math.round(s/2),r);this.renderTargetEdgeBuffer2.texture.name="OutlinePass.edge2";this.renderTargetEdgeBuffer2.texture.generateMipmaps=false;const o=4;const l=4;this.separableBlurMaterial1=this.getSeperableBlurMaterial(o);this.separableBlurMaterial1.uniforms["texSize"].value.set(a,s);this.separableBlurMaterial1.uniforms["kernelRadius"].value=1;this.separableBlurMaterial2=this.getSeperableBlurMaterial(l);this.separableBlurMaterial2.uniforms["texSize"].value.set(Math.round(a/2),Math.round(s/2));this.separableBlurMaterial2.uniforms["kernelRadius"].value=l;this.overlayMaterial=this.getOverlayMaterial();if(CopyShader===undefined)console.error("THREE.OutlinePass relies on CopyShader");const c=CopyShader;this.copyUniforms=UniformsUtils.clone(c.uniforms);this.copyUniforms["opacity"].value=1;this.materialCopy=new ShaderMaterial({uniforms:this.copyUniforms,vertexShader:c.vertexShader,fragmentShader:c.fragmentShader,blending:NoBlending,depthTest:false,depthWrite:false,transparent:true});this.enabled=true;this.needsSwap=false;this._oldClearColor=new Color$1;this.oldClearAlpha=1;this.fsQuad=new FullScreenQuad$1(null);this.tempPulseColor1=new Color$1;this.tempPulseColor2=new Color$1;this.textureMatrix=new Matrix4$1;function u(t,e){const n=e.isPerspectiveCamera?"perspective":"orthographic";return t.replace(/DEPTH_TO_VIEW_Z/g,n+"DepthToViewZ")}}dispose(){this.renderTargetMaskBuffer.dispose();this.renderTargetDepthBuffer.dispose();this.renderTargetMaskDownSampleBuffer.dispose();this.renderTargetBlurBuffer1.dispose();this.renderTargetBlurBuffer2.dispose();this.renderTargetEdgeBuffer1.dispose();this.renderTargetEdgeBuffer2.dispose()}setSize(t,e){this.renderTargetMaskBuffer.setSize(t,e);this.renderTargetDepthBuffer.setSize(t,e);let n=Math.round(t/this.downSampleRatio);let i=Math.round(e/this.downSampleRatio);this.renderTargetMaskDownSampleBuffer.setSize(n,i);this.renderTargetBlurBuffer1.setSize(n,i);this.renderTargetEdgeBuffer1.setSize(n,i);this.separableBlurMaterial1.uniforms["texSize"].value.set(n,i);n=Math.round(n/2);i=Math.round(i/2);this.renderTargetBlurBuffer2.setSize(n,i);this.renderTargetEdgeBuffer2.setSize(n,i);this.separableBlurMaterial2.uniforms["texSize"].value.set(n,i)}changeVisibilityOfSelectedObjects(t){const e=this._visibilityCache;function n(n){if(n.isMesh){if(t===true){n.visible=e.get(n)}else{e.set(n,n.visible);n.visible=t}}}for(let t=0;t<this.selectedObjects.length;t++){const e=this.selectedObjects[t];e.traverse(n)}}changeVisibilityOfNonSelectedObjects(t){const e=this._visibilityCache;const n=[];function i(t){if(t.isMesh)n.push(t)}for(let t=0;t<this.selectedObjects.length;t++){const e=this.selectedObjects[t];e.traverse(i)}function r(i){if(i.isMesh||i.isSprite){let r=false;for(let t=0;t<n.length;t++){const e=n[t].id;if(e===i.id){r=true;break}}if(r===false){const n=i.visible;if(t===false||e.get(i)===true){i.visible=t}e.set(i,n)}}else if(i.isPoints||i.isLine){if(t===true){i.visible=e.get(i)}else{e.set(i,i.visible);i.visible=t}}}this.renderScene.traverse(r)}updateTextureMatrix(){this.textureMatrix.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1);this.textureMatrix.multiply(this.renderCamera.projectionMatrix);this.textureMatrix.multiply(this.renderCamera.matrixWorldInverse)}render(t,e,n,i,r){if(this.selectedObjects.length>0){t.getClearColor(this._oldClearColor);this.oldClearAlpha=t.getClearAlpha();const e=t.autoClear;t.autoClear=false;if(r)t.state.buffers.stencil.setTest(false);t.setClearColor(16777215,1);this.changeVisibilityOfSelectedObjects(false);const i=this.renderScene.background;this.renderScene.background=null;this.renderScene.overrideMaterial=this.depthMaterial;t.setRenderTarget(this.renderTargetDepthBuffer);t.clear();t.render(this.renderScene,this.renderCamera);this.changeVisibilityOfSelectedObjects(true);this._visibilityCache.clear();this.updateTextureMatrix();this.changeVisibilityOfNonSelectedObjects(false);this.renderScene.overrideMaterial=this.prepareMaskMaterial;this.prepareMaskMaterial.uniforms["cameraNearFar"].value.set(this.renderCamera.near,this.renderCamera.far);this.prepareMaskMaterial.uniforms["depthTexture"].value=this.renderTargetDepthBuffer.texture;this.prepareMaskMaterial.uniforms["textureMatrix"].value=this.textureMatrix;t.setRenderTarget(this.renderTargetMaskBuffer);t.clear();t.render(this.renderScene,this.renderCamera);this.renderScene.overrideMaterial=null;this.changeVisibilityOfNonSelectedObjects(true);this._visibilityCache.clear();this.renderScene.background=i;this.fsQuad.material=this.materialCopy;this.copyUniforms["tDiffuse"].value=this.renderTargetMaskBuffer.texture;t.setRenderTarget(this.renderTargetMaskDownSampleBuffer);t.clear();this.fsQuad.render(t);this.tempPulseColor1.copy(this.visibleEdgeColor);this.tempPulseColor2.copy(this.hiddenEdgeColor);if(this.pulsePeriod>0){const t=(1+.25)/2+Math.cos(performance.now()*.01/this.pulsePeriod)*(1-.25)/2;this.tempPulseColor1.multiplyScalar(t);this.tempPulseColor2.multiplyScalar(t)}this.fsQuad.material=this.edgeDetectionMaterial;this.edgeDetectionMaterial.uniforms["maskTexture"].value=this.renderTargetMaskDownSampleBuffer.texture;this.edgeDetectionMaterial.uniforms["texSize"].value.set(this.renderTargetMaskDownSampleBuffer.width,this.renderTargetMaskDownSampleBuffer.height);this.edgeDetectionMaterial.uniforms["visibleEdgeColor"].value=this.tempPulseColor1;this.edgeDetectionMaterial.uniforms["hiddenEdgeColor"].value=this.tempPulseColor2;t.setRenderTarget(this.renderTargetEdgeBuffer1);t.clear();this.fsQuad.render(t);this.fsQuad.material=this.separableBlurMaterial1;this.separableBlurMaterial1.uniforms["colorTexture"].value=this.renderTargetEdgeBuffer1.texture;this.separableBlurMaterial1.uniforms["direction"].value=OutlinePass.BlurDirectionX;this.separableBlurMaterial1.uniforms["kernelRadius"].value=this.edgeThickness;t.setRenderTarget(this.renderTargetBlurBuffer1);t.clear();this.fsQuad.render(t);this.separableBlurMaterial1.uniforms["colorTexture"].value=this.renderTargetBlurBuffer1.texture;this.separableBlurMaterial1.uniforms["direction"].value=OutlinePass.BlurDirectionY;t.setRenderTarget(this.renderTargetEdgeBuffer1);t.clear();this.fsQuad.render(t);this.fsQuad.material=this.separableBlurMaterial2;this.separableBlurMaterial2.uniforms["colorTexture"].value=this.renderTargetEdgeBuffer1.texture;this.separableBlurMaterial2.uniforms["direction"].value=OutlinePass.BlurDirectionX;t.setRenderTarget(this.renderTargetBlurBuffer2);t.clear();this.fsQuad.render(t);this.separableBlurMaterial2.uniforms["colorTexture"].value=this.renderTargetBlurBuffer2.texture;this.separableBlurMaterial2.uniforms["direction"].value=OutlinePass.BlurDirectionY;t.setRenderTarget(this.renderTargetEdgeBuffer2);t.clear();this.fsQuad.render(t);this.fsQuad.material=this.overlayMaterial;this.overlayMaterial.uniforms["maskTexture"].value=this.renderTargetMaskBuffer.texture;this.overlayMaterial.uniforms["edgeTexture1"].value=this.renderTargetEdgeBuffer1.texture;this.overlayMaterial.uniforms["edgeTexture2"].value=this.renderTargetEdgeBuffer2.texture;this.overlayMaterial.uniforms["patternTexture"].value=this.patternTexture;this.overlayMaterial.uniforms["edgeStrength"].value=this.edgeStrength;this.overlayMaterial.uniforms["edgeGlow"].value=this.edgeGlow;this.overlayMaterial.uniforms["usePatternTexture"].value=this.usePatternTexture;if(r)t.state.buffers.stencil.setTest(true);t.setRenderTarget(n);this.fsQuad.render(t);t.setClearColor(this._oldClearColor,this.oldClearAlpha);t.autoClear=e}if(this.renderToScreen){this.fsQuad.material=this.materialCopy;this.copyUniforms["tDiffuse"].value=n.texture;t.setRenderTarget(null);this.fsQuad.render(t)}}getPrepareMaskMaterial(){return new ShaderMaterial({uniforms:{depthTexture:{value:null},cameraNearFar:{value:new Vector2(.5,.5)},textureMatrix:{value:null}},vertexShader:`#include <morphtarget_pars_vertex>\n\t\t\t\t#include <skinning_pars_vertex>\n\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tuniform mat4 textureMatrix;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\t#include <skinbase_vertex>\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <morphtarget_vertex>\n\t\t\t\t\t#include <skinning_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t\tvPosition = mvPosition;\n\t\t\t\t\tvec4 worldPosition = modelMatrix * vec4( transformed, 1.0 );\n\t\t\t\t\tprojTexCoord = textureMatrix * worldPosition;\n\n\t\t\t\t}`,fragmentShader:`#include <packing>\n\t\t\t\tvarying vec4 vPosition;\n\t\t\t\tvarying vec4 projTexCoord;\n\t\t\t\tuniform sampler2D depthTexture;\n\t\t\t\tuniform vec2 cameraNearFar;\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tfloat depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));\n\t\t\t\t\tfloat viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );\n\t\t\t\t\tfloat depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;\n\t\t\t\t\tgl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);\n\n\t\t\t\t}`})}getEdgeDetectionMaterial(){return new ShaderMaterial({uniforms:{maskTexture:{value:null},texSize:{value:new Vector2(.5,.5)},visibleEdgeColor:{value:new Vector3$1(1,1,1)},hiddenEdgeColor:{value:new Vector3$1(1,1,1)}},vertexShader:`varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,fragmentShader:`varying vec2 vUv;\n\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec3 visibleEdgeColor;\n\t\t\t\tuniform vec3 hiddenEdgeColor;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tvec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);\n\t\t\t\t\tvec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);\n\t\t\t\t\tvec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);\n\t\t\t\t\tvec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);\n\t\t\t\t\tvec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);\n\t\t\t\t\tfloat diff1 = (c1.r - c2.r)*0.5;\n\t\t\t\t\tfloat diff2 = (c3.r - c4.r)*0.5;\n\t\t\t\t\tfloat d = length( vec2(diff1, diff2) );\n\t\t\t\t\tfloat a1 = min(c1.g, c2.g);\n\t\t\t\t\tfloat a2 = min(c3.g, c4.g);\n\t\t\t\t\tfloat visibilityFactor = min(a1, a2);\n\t\t\t\t\tvec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;\n\t\t\t\t\tgl_FragColor = vec4(edgeColor, 1.0) * vec4(d);\n\t\t\t\t}`})}getSeperableBlurMaterial(t){return new ShaderMaterial({defines:{MAX_RADIUS:t},uniforms:{colorTexture:{value:null},texSize:{value:new Vector2(.5,.5)},direction:{value:new Vector2(.5,.5)},kernelRadius:{value:1}},vertexShader:`varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,fragmentShader:`#include <common>\n\t\t\t\tvarying vec2 vUv;\n\t\t\t\tuniform sampler2D colorTexture;\n\t\t\t\tuniform vec2 texSize;\n\t\t\t\tuniform vec2 direction;\n\t\t\t\tuniform float kernelRadius;\n\n\t\t\t\tfloat gaussianPdf(in float x, in float sigma) {\n\t\t\t\t\treturn 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec2 invSize = 1.0 / texSize;\n\t\t\t\t\tfloat weightSum = gaussianPdf(0.0, kernelRadius);\n\t\t\t\t\tvec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;\n\t\t\t\t\tvec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);\n\t\t\t\t\tvec2 uvOffset = delta;\n\t\t\t\t\tfor( int i = 1; i <= MAX_RADIUS; i ++ ) {\n\t\t\t\t\t\tfloat w = gaussianPdf(uvOffset.x, kernelRadius);\n\t\t\t\t\t\tvec4 sample1 = texture2D( colorTexture, vUv + uvOffset);\n\t\t\t\t\t\tvec4 sample2 = texture2D( colorTexture, vUv - uvOffset);\n\t\t\t\t\t\tdiffuseSum += ((sample1 + sample2) * w);\n\t\t\t\t\t\tweightSum += (2.0 * w);\n\t\t\t\t\t\tuvOffset += delta;\n\t\t\t\t\t}\n\t\t\t\t\tgl_FragColor = diffuseSum/weightSum;\n\t\t\t\t}`})}getOverlayMaterial(){return new ShaderMaterial({uniforms:{maskTexture:{value:null},edgeTexture1:{value:null},edgeTexture2:{value:null},patternTexture:{value:null},edgeStrength:{value:1},edgeGlow:{value:1},usePatternTexture:{value:0}},vertexShader:`varying vec2 vUv;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvUv = uv;\n\t\t\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\t\t\t\t}`,fragmentShader:`varying vec2 vUv;\n\n\t\t\t\tuniform sampler2D maskTexture;\n\t\t\t\tuniform sampler2D edgeTexture1;\n\t\t\t\tuniform sampler2D edgeTexture2;\n\t\t\t\tuniform sampler2D patternTexture;\n\t\t\t\tuniform float edgeStrength;\n\t\t\t\tuniform float edgeGlow;\n\t\t\t\tuniform bool usePatternTexture;\n\n\t\t\t\tvoid main() {\n\t\t\t\t\tvec4 edgeValue1 = texture2D(edgeTexture1, vUv);\n\t\t\t\t\tvec4 edgeValue2 = texture2D(edgeTexture2, vUv);\n\t\t\t\t\tvec4 maskColor = texture2D(maskTexture, vUv);\n\t\t\t\t\tvec4 patternColor = texture2D(patternTexture, 6.0 * vUv);\n\t\t\t\t\tfloat visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;\n\t\t\t\t\tvec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;\n\t\t\t\t\tvec4 finalColor = edgeStrength * maskColor.r * edgeValue;\n\t\t\t\t\tif(usePatternTexture)\n\t\t\t\t\t\tfinalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);\n\t\t\t\t\tgl_FragColor = finalColor;\n\t\t\t\t}`,blending:AdditiveBlending,depthTest:false,depthWrite:false,transparent:true})}}OutlinePass.BlurDirectionX=new Vector2(1,0);OutlinePass.BlurDirectionY=new Vector2(0,1);const FXAAShader={uniforms:{tDiffuse:{value:null},resolution:{value:new Vector2(1/1024,1/512)}},vertexShader:`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,fragmentShader:`\n\n\t\tprecision highp float;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tuniform vec2 resolution;\n\n\t\tvarying vec2 vUv;\n\n\t\t#define FXAA_PC 1\n\t\t#define FXAA_GLSL_100 1\n\t\t#define FXAA_QUALITY_PRESET 12\n\n\t\t#define FXAA_GREEN_AS_LUMA 1\n\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#ifndef FXAA_PC_CONSOLE\n\t\t\t\t//\n\t\t\t\t// The console algorithm for PC is included\n\t\t\t\t// for developers targeting really low spec machines.\n\t\t\t\t// Likely better to just run FXAA_PC, and use a really low preset.\n\t\t\t\t//\n\t\t\t\t#define FXAA_PC_CONSOLE 0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#ifndef FXAA_GLSL_120\n\t\t\t\t#define FXAA_GLSL_120 0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#ifndef FXAA_GLSL_130\n\t\t\t\t#define FXAA_GLSL_130 0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#ifndef FXAA_HLSL_3\n\t\t\t\t#define FXAA_HLSL_3 0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#ifndef FXAA_HLSL_4\n\t\t\t\t#define FXAA_HLSL_4 0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#ifndef FXAA_HLSL_5\n\t\t\t\t#define FXAA_HLSL_5 0\n\t\t#endif\n\t\t/*==========================================================================*/\n\t\t#ifndef FXAA_GREEN_AS_LUMA\n\t\t\t\t//\n\t\t\t\t// For those using non-linear color,\n\t\t\t\t// and either not able to get luma in alpha, or not wanting to,\n\t\t\t\t// this enables FXAA to run using green as a proxy for luma.\n\t\t\t\t// So with this enabled, no need to pack luma in alpha.\n\t\t\t\t//\n\t\t\t\t// This will turn off AA on anything which lacks some amount of green.\n\t\t\t\t// Pure red and blue or combination of only R and B, will get no AA.\n\t\t\t\t//\n\t\t\t\t// Might want to lower the settings for both,\n\t\t\t\t//\t\tfxaaConsoleEdgeThresholdMin\n\t\t\t\t//\t\tfxaaQualityEdgeThresholdMin\n\t\t\t\t// In order to insure AA does not get turned off on colors\n\t\t\t\t// which contain a minor amount of green.\n\t\t\t\t//\n\t\t\t\t// 1 = On.\n\t\t\t\t// 0 = Off.\n\t\t\t\t//\n\t\t\t\t#define FXAA_GREEN_AS_LUMA 0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#ifndef FXAA_EARLY_EXIT\n\t\t\t\t//\n\t\t\t\t// Controls algorithm's early exit path.\n\t\t\t\t// On PS3 turning this ON adds 2 cycles to the shader.\n\t\t\t\t// On 360 turning this OFF adds 10ths of a millisecond to the shader.\n\t\t\t\t// Turning this off on console will result in a more blurry image.\n\t\t\t\t// So this defaults to on.\n\t\t\t\t//\n\t\t\t\t// 1 = On.\n\t\t\t\t// 0 = Off.\n\t\t\t\t//\n\t\t\t\t#define FXAA_EARLY_EXIT 1\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#ifndef FXAA_DISCARD\n\t\t\t\t//\n\t\t\t\t// Only valid for PC OpenGL currently.\n\t\t\t\t// Probably will not work when FXAA_GREEN_AS_LUMA = 1.\n\t\t\t\t//\n\t\t\t\t// 1 = Use discard on pixels which don't need AA.\n\t\t\t\t//\t\t For APIs which enable concurrent TEX+ROP from same surface.\n\t\t\t\t// 0 = Return unchanged color on pixels which don't need AA.\n\t\t\t\t//\n\t\t\t\t#define FXAA_DISCARD 0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#ifndef FXAA_FAST_PIXEL_OFFSET\n\t\t\t\t//\n\t\t\t\t// Used for GLSL 120 only.\n\t\t\t\t//\n\t\t\t\t// 1 = GL API supports fast pixel offsets\n\t\t\t\t// 0 = do not use fast pixel offsets\n\t\t\t\t//\n\t\t\t\t#ifdef GL_EXT_gpu_shader4\n\t\t\t\t\t\t#define FXAA_FAST_PIXEL_OFFSET 1\n\t\t\t\t#endif\n\t\t\t\t#ifdef GL_NV_gpu_shader5\n\t\t\t\t\t\t#define FXAA_FAST_PIXEL_OFFSET 1\n\t\t\t\t#endif\n\t\t\t\t#ifdef GL_ARB_gpu_shader5\n\t\t\t\t\t\t#define FXAA_FAST_PIXEL_OFFSET 1\n\t\t\t\t#endif\n\t\t\t\t#ifndef FXAA_FAST_PIXEL_OFFSET\n\t\t\t\t\t\t#define FXAA_FAST_PIXEL_OFFSET 0\n\t\t\t\t#endif\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#ifndef FXAA_GATHER4_ALPHA\n\t\t\t\t//\n\t\t\t\t// 1 = API supports gather4 on alpha channel.\n\t\t\t\t// 0 = API does not support gather4 on alpha channel.\n\t\t\t\t//\n\t\t\t\t#if (FXAA_HLSL_5 == 1)\n\t\t\t\t\t\t#define FXAA_GATHER4_ALPHA 1\n\t\t\t\t#endif\n\t\t\t\t#ifdef GL_ARB_gpu_shader5\n\t\t\t\t\t\t#define FXAA_GATHER4_ALPHA 1\n\t\t\t\t#endif\n\t\t\t\t#ifdef GL_NV_gpu_shader5\n\t\t\t\t\t\t#define FXAA_GATHER4_ALPHA 1\n\t\t\t\t#endif\n\t\t\t\t#ifndef FXAA_GATHER4_ALPHA\n\t\t\t\t\t\t#define FXAA_GATHER4_ALPHA 0\n\t\t\t\t#endif\n\t\t#endif\n\n\n\t\t/*============================================================================\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFXAA QUALITY - TUNING KNOBS\n\t\t------------------------------------------------------------------------------\n\t\tNOTE the other tuning knobs are now in the shader function inputs!\n\t\t============================================================================*/\n\t\t#ifndef FXAA_QUALITY_PRESET\n\t\t\t\t//\n\t\t\t\t// Choose the quality preset.\n\t\t\t\t// This needs to be compiled into the shader as it effects code.\n\t\t\t\t// Best option to include multiple presets is to\n\t\t\t\t// in each shader define the preset, then include this file.\n\t\t\t\t//\n\t\t\t\t// OPTIONS\n\t\t\t\t// -----------------------------------------------------------------------\n\t\t\t\t// 10 to 15 - default medium dither (10=fastest, 15=highest quality)\n\t\t\t\t// 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\n\t\t\t\t// 39\t\t\t - no dither, very expensive\n\t\t\t\t//\n\t\t\t\t// NOTES\n\t\t\t\t// -----------------------------------------------------------------------\n\t\t\t\t// 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\n\t\t\t\t// 13 = about same speed as FXAA 3.9 and better than 12\n\t\t\t\t// 23 = closest to FXAA 3.9 visually and performance wise\n\t\t\t\t//\t_ = the lowest digit is directly related to performance\n\t\t\t\t// _\t= the highest digit is directly related to style\n\t\t\t\t//\n\t\t\t\t#define FXAA_QUALITY_PRESET 12\n\t\t#endif\n\n\n\t\t/*============================================================================\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t FXAA QUALITY - PRESETS\n\n\t\t============================================================================*/\n\n\t\t/*============================================================================\n\t\t\t\t\t\t\t\t\t\t\t\t FXAA QUALITY - MEDIUM DITHER PRESETS\n\t\t============================================================================*/\n\t\t#if (FXAA_QUALITY_PRESET == 10)\n\t\t\t\t#define FXAA_QUALITY_PS 3\n\t\t\t\t#define FXAA_QUALITY_P0 1.5\n\t\t\t\t#define FXAA_QUALITY_P1 3.0\n\t\t\t\t#define FXAA_QUALITY_P2 12.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 11)\n\t\t\t\t#define FXAA_QUALITY_PS 4\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 3.0\n\t\t\t\t#define FXAA_QUALITY_P3 12.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 12)\n\t\t\t\t#define FXAA_QUALITY_PS 5\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 4.0\n\t\t\t\t#define FXAA_QUALITY_P4 12.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 13)\n\t\t\t\t#define FXAA_QUALITY_PS 6\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\n\t\t\t\t#define FXAA_QUALITY_P4 4.0\n\t\t\t\t#define FXAA_QUALITY_P5 12.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 14)\n\t\t\t\t#define FXAA_QUALITY_PS 7\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\n\t\t\t\t#define FXAA_QUALITY_P5 4.0\n\t\t\t\t#define FXAA_QUALITY_P6 12.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 15)\n\t\t\t\t#define FXAA_QUALITY_PS 8\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\n\t\t\t\t#define FXAA_QUALITY_P5 2.0\n\t\t\t\t#define FXAA_QUALITY_P6 4.0\n\t\t\t\t#define FXAA_QUALITY_P7 12.0\n\t\t#endif\n\n\t\t/*============================================================================\n\t\t\t\t\t\t\t\t\t\t\t\t FXAA QUALITY - LOW DITHER PRESETS\n\t\t============================================================================*/\n\t\t#if (FXAA_QUALITY_PRESET == 20)\n\t\t\t\t#define FXAA_QUALITY_PS 3\n\t\t\t\t#define FXAA_QUALITY_P0 1.5\n\t\t\t\t#define FXAA_QUALITY_P1 2.0\n\t\t\t\t#define FXAA_QUALITY_P2 8.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 21)\n\t\t\t\t#define FXAA_QUALITY_PS 4\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 8.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 22)\n\t\t\t\t#define FXAA_QUALITY_PS 5\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\n\t\t\t\t#define FXAA_QUALITY_P4 8.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 23)\n\t\t\t\t#define FXAA_QUALITY_PS 6\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\n\t\t\t\t#define FXAA_QUALITY_P5 8.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 24)\n\t\t\t\t#define FXAA_QUALITY_PS 7\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\n\t\t\t\t#define FXAA_QUALITY_P5 3.0\n\t\t\t\t#define FXAA_QUALITY_P6 8.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 25)\n\t\t\t\t#define FXAA_QUALITY_PS 8\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\n\t\t\t\t#define FXAA_QUALITY_P5 2.0\n\t\t\t\t#define FXAA_QUALITY_P6 4.0\n\t\t\t\t#define FXAA_QUALITY_P7 8.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 26)\n\t\t\t\t#define FXAA_QUALITY_PS 9\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\n\t\t\t\t#define FXAA_QUALITY_P5 2.0\n\t\t\t\t#define FXAA_QUALITY_P6 2.0\n\t\t\t\t#define FXAA_QUALITY_P7 4.0\n\t\t\t\t#define FXAA_QUALITY_P8 8.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 27)\n\t\t\t\t#define FXAA_QUALITY_PS 10\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\n\t\t\t\t#define FXAA_QUALITY_P5 2.0\n\t\t\t\t#define FXAA_QUALITY_P6 2.0\n\t\t\t\t#define FXAA_QUALITY_P7 2.0\n\t\t\t\t#define FXAA_QUALITY_P8 4.0\n\t\t\t\t#define FXAA_QUALITY_P9 8.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 28)\n\t\t\t\t#define FXAA_QUALITY_PS 11\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\n\t\t\t\t#define FXAA_QUALITY_P5 2.0\n\t\t\t\t#define FXAA_QUALITY_P6 2.0\n\t\t\t\t#define FXAA_QUALITY_P7 2.0\n\t\t\t\t#define FXAA_QUALITY_P8 2.0\n\t\t\t\t#define FXAA_QUALITY_P9 4.0\n\t\t\t\t#define FXAA_QUALITY_P10 8.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 29)\n\t\t\t\t#define FXAA_QUALITY_PS 12\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\n\t\t\t\t#define FXAA_QUALITY_P5 2.0\n\t\t\t\t#define FXAA_QUALITY_P6 2.0\n\t\t\t\t#define FXAA_QUALITY_P7 2.0\n\t\t\t\t#define FXAA_QUALITY_P8 2.0\n\t\t\t\t#define FXAA_QUALITY_P9 2.0\n\t\t\t\t#define FXAA_QUALITY_P10 4.0\n\t\t\t\t#define FXAA_QUALITY_P11 8.0\n\t\t#endif\n\n\t\t/*============================================================================\n\t\t\t\t\t\t\t\t\t\t\t\t FXAA QUALITY - EXTREME QUALITY\n\t\t============================================================================*/\n\t\t#if (FXAA_QUALITY_PRESET == 39)\n\t\t\t\t#define FXAA_QUALITY_PS 12\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.0\n\t\t\t\t#define FXAA_QUALITY_P2 1.0\n\t\t\t\t#define FXAA_QUALITY_P3 1.0\n\t\t\t\t#define FXAA_QUALITY_P4 1.0\n\t\t\t\t#define FXAA_QUALITY_P5 1.5\n\t\t\t\t#define FXAA_QUALITY_P6 2.0\n\t\t\t\t#define FXAA_QUALITY_P7 2.0\n\t\t\t\t#define FXAA_QUALITY_P8 2.0\n\t\t\t\t#define FXAA_QUALITY_P9 2.0\n\t\t\t\t#define FXAA_QUALITY_P10 4.0\n\t\t\t\t#define FXAA_QUALITY_P11 8.0\n\t\t#endif\n\n\n\n\t\t/*============================================================================\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAPI PORTING\n\n\t\t============================================================================*/\n\t\t#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)\n\t\t\t\t#define FxaaBool bool\n\t\t\t\t#define FxaaDiscard discard\n\t\t\t\t#define FxaaFloat float\n\t\t\t\t#define FxaaFloat2 vec2\n\t\t\t\t#define FxaaFloat3 vec3\n\t\t\t\t#define FxaaFloat4 vec4\n\t\t\t\t#define FxaaHalf float\n\t\t\t\t#define FxaaHalf2 vec2\n\t\t\t\t#define FxaaHalf3 vec3\n\t\t\t\t#define FxaaHalf4 vec4\n\t\t\t\t#define FxaaInt2 ivec2\n\t\t\t\t#define FxaaSat(x) clamp(x, 0.0, 1.0)\n\t\t\t\t#define FxaaTex sampler2D\n\t\t#else\n\t\t\t\t#define FxaaBool bool\n\t\t\t\t#define FxaaDiscard clip(-1)\n\t\t\t\t#define FxaaFloat float\n\t\t\t\t#define FxaaFloat2 float2\n\t\t\t\t#define FxaaFloat3 float3\n\t\t\t\t#define FxaaFloat4 float4\n\t\t\t\t#define FxaaHalf half\n\t\t\t\t#define FxaaHalf2 half2\n\t\t\t\t#define FxaaHalf3 half3\n\t\t\t\t#define FxaaHalf4 half4\n\t\t\t\t#define FxaaSat(x) saturate(x)\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_GLSL_100 == 1)\n\t\t\t#define FxaaTexTop(t, p) texture2D(t, p, 0.0)\n\t\t\t#define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_GLSL_120 == 1)\n\t\t\t\t// Requires,\n\t\t\t\t//\t#version 120\n\t\t\t\t// And at least,\n\t\t\t\t//\t#extension GL_EXT_gpu_shader4 : enable\n\t\t\t\t//\t(or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)\n\t\t\t\t#define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\n\t\t\t\t#if (FXAA_FAST_PIXEL_OFFSET == 1)\n\t\t\t\t\t\t#define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)\n\t\t\t\t#else\n\t\t\t\t\t\t#define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\n\t\t\t\t#endif\n\t\t\t\t#if (FXAA_GATHER4_ALPHA == 1)\n\t\t\t\t\t\t// use #extension GL_ARB_gpu_shader5 : enable\n\t\t\t\t\t\t#define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\n\t\t\t\t\t\t#define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\n\t\t\t\t\t\t#define FxaaTexGreen4(t, p) textureGather(t, p, 1)\n\t\t\t\t\t\t#define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\n\t\t\t\t#endif\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_GLSL_130 == 1)\n\t\t\t\t// Requires "#version 130" or better\n\t\t\t\t#define FxaaTexTop(t, p) textureLod(t, p, 0.0)\n\t\t\t\t#define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)\n\t\t\t\t#if (FXAA_GATHER4_ALPHA == 1)\n\t\t\t\t\t\t// use #extension GL_ARB_gpu_shader5 : enable\n\t\t\t\t\t\t#define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\n\t\t\t\t\t\t#define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\n\t\t\t\t\t\t#define FxaaTexGreen4(t, p) textureGather(t, p, 1)\n\t\t\t\t\t\t#define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\n\t\t\t\t#endif\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_HLSL_3 == 1)\n\t\t\t\t#define FxaaInt2 float2\n\t\t\t\t#define FxaaTex sampler2D\n\t\t\t\t#define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))\n\t\t\t\t#define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_HLSL_4 == 1)\n\t\t\t\t#define FxaaInt2 int2\n\t\t\t\tstruct FxaaTex { SamplerState smpl; Texture2D tex; };\n\t\t\t\t#define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\n\t\t\t\t#define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_HLSL_5 == 1)\n\t\t\t\t#define FxaaInt2 int2\n\t\t\t\tstruct FxaaTex { SamplerState smpl; Texture2D tex; };\n\t\t\t\t#define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\n\t\t\t\t#define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\n\t\t\t\t#define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)\n\t\t\t\t#define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)\n\t\t\t\t#define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)\n\t\t\t\t#define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)\n\t\t#endif\n\n\n\t\t/*============================================================================\n\t\t\t\t\t\t\t\t\t\t\t GREEN AS LUMA OPTION SUPPORT FUNCTION\n\t\t============================================================================*/\n\t\t#if (FXAA_GREEN_AS_LUMA == 0)\n\t\t\t\tFxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }\n\t\t#else\n\t\t\t\tFxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\n\t\t#endif\n\n\n\n\n\t\t/*============================================================================\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t FXAA3 QUALITY - PC\n\n\t\t============================================================================*/\n\t\t#if (FXAA_PC == 1)\n\t\t/*--------------------------------------------------------------------------*/\n\t\tFxaaFloat4 FxaaPixelShader(\n\t\t\t\t//\n\t\t\t\t// Use noperspective interpolation here (turn off perspective interpolation).\n\t\t\t\t// {xy} = center of pixel\n\t\t\t\tFxaaFloat2 pos,\n\t\t\t\t//\n\t\t\t\t// Used only for FXAA Console, and not used on the 360 version.\n\t\t\t\t// Use noperspective interpolation here (turn off perspective interpolation).\n\t\t\t\t// {xy_} = upper left of pixel\n\t\t\t\t// {_zw} = lower right of pixel\n\t\t\t\tFxaaFloat4 fxaaConsolePosPos,\n\t\t\t\t//\n\t\t\t\t// Input color texture.\n\t\t\t\t// {rgb_} = color in linear or perceptual color space\n\t\t\t\t// if (FXAA_GREEN_AS_LUMA == 0)\n\t\t\t\t//\t\t {__a} = luma in perceptual color space (not linear)\n\t\t\t\tFxaaTex tex,\n\t\t\t\t//\n\t\t\t\t// Only used on the optimized 360 version of FXAA Console.\n\t\t\t\t// For everything but 360, just use the same input here as for "tex".\n\t\t\t\t// For 360, same texture, just alias with a 2nd sampler.\n\t\t\t\t// This sampler needs to have an exponent bias of -1.\n\t\t\t\tFxaaTex fxaaConsole360TexExpBiasNegOne,\n\t\t\t\t//\n\t\t\t\t// Only used on the optimized 360 version of FXAA Console.\n\t\t\t\t// For everything but 360, just use the same input here as for "tex".\n\t\t\t\t// For 360, same texture, just alias with a 3nd sampler.\n\t\t\t\t// This sampler needs to have an exponent bias of -2.\n\t\t\t\tFxaaTex fxaaConsole360TexExpBiasNegTwo,\n\t\t\t\t//\n\t\t\t\t// Only used on FXAA Quality.\n\t\t\t\t// This must be from a constant/uniform.\n\t\t\t\t// {x_} = 1.0/screenWidthInPixels\n\t\t\t\t// {_y} = 1.0/screenHeightInPixels\n\t\t\t\tFxaaFloat2 fxaaQualityRcpFrame,\n\t\t\t\t//\n\t\t\t\t// Only used on FXAA Console.\n\t\t\t\t// This must be from a constant/uniform.\n\t\t\t\t// This effects sub-pixel AA quality and inversely sharpness.\n\t\t\t\t//\t Where N ranges between,\n\t\t\t\t//\t\t N = 0.50 (default)\n\t\t\t\t//\t\t N = 0.33 (sharper)\n\t\t\t\t// {x__} = -N/screenWidthInPixels\n\t\t\t\t// {_y_} = -N/screenHeightInPixels\n\t\t\t\t// {_z_} =\tN/screenWidthInPixels\n\t\t\t\t// {__w} =\tN/screenHeightInPixels\n\t\t\t\tFxaaFloat4 fxaaConsoleRcpFrameOpt,\n\t\t\t\t//\n\t\t\t\t// Only used on FXAA Console.\n\t\t\t\t// Not used on 360, but used on PS3 and PC.\n\t\t\t\t// This must be from a constant/uniform.\n\t\t\t\t// {x__} = -2.0/screenWidthInPixels\n\t\t\t\t// {_y_} = -2.0/screenHeightInPixels\n\t\t\t\t// {_z_} =\t2.0/screenWidthInPixels\n\t\t\t\t// {__w} =\t2.0/screenHeightInPixels\n\t\t\t\tFxaaFloat4 fxaaConsoleRcpFrameOpt2,\n\t\t\t\t//\n\t\t\t\t// Only used on FXAA Console.\n\t\t\t\t// Only used on 360 in place of fxaaConsoleRcpFrameOpt2.\n\t\t\t\t// This must be from a constant/uniform.\n\t\t\t\t// {x__} =\t8.0/screenWidthInPixels\n\t\t\t\t// {_y_} =\t8.0/screenHeightInPixels\n\t\t\t\t// {_z_} = -4.0/screenWidthInPixels\n\t\t\t\t// {__w} = -4.0/screenHeightInPixels\n\t\t\t\tFxaaFloat4 fxaaConsole360RcpFrameOpt2,\n\t\t\t\t//\n\t\t\t\t// Only used on FXAA Quality.\n\t\t\t\t// This used to be the FXAA_QUALITY_SUBPIX define.\n\t\t\t\t// It is here now to allow easier tuning.\n\t\t\t\t// Choose the amount of sub-pixel aliasing removal.\n\t\t\t\t// This can effect sharpness.\n\t\t\t\t//\t 1.00 - upper limit (softer)\n\t\t\t\t//\t 0.75 - default amount of filtering\n\t\t\t\t//\t 0.50 - lower limit (sharper, less sub-pixel aliasing removal)\n\t\t\t\t//\t 0.25 - almost off\n\t\t\t\t//\t 0.00 - completely off\n\t\t\t\tFxaaFloat fxaaQualitySubpix,\n\t\t\t\t//\n\t\t\t\t// Only used on FXAA Quality.\n\t\t\t\t// This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\n\t\t\t\t// It is here now to allow easier tuning.\n\t\t\t\t// The minimum amount of local contrast required to apply algorithm.\n\t\t\t\t//\t 0.333 - too little (faster)\n\t\t\t\t//\t 0.250 - low quality\n\t\t\t\t//\t 0.166 - default\n\t\t\t\t//\t 0.125 - high quality\n\t\t\t\t//\t 0.063 - overkill (slower)\n\t\t\t\tFxaaFloat fxaaQualityEdgeThreshold,\n\t\t\t\t//\n\t\t\t\t// Only used on FXAA Quality.\n\t\t\t\t// This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\n\t\t\t\t// It is here now to allow easier tuning.\n\t\t\t\t// Trims the algorithm from processing darks.\n\t\t\t\t//\t 0.0833 - upper limit (default, the start of visible unfiltered edges)\n\t\t\t\t//\t 0.0625 - high quality (faster)\n\t\t\t\t//\t 0.0312 - visible limit (slower)\n\t\t\t\t// Special notes when using FXAA_GREEN_AS_LUMA,\n\t\t\t\t//\t Likely want to set this to zero.\n\t\t\t\t//\t As colors that are mostly not-green\n\t\t\t\t//\t will appear very dark in the green channel!\n\t\t\t\t//\t Tune by looking at mostly non-green content,\n\t\t\t\t//\t then start at zero and increase until aliasing is a problem.\n\t\t\t\tFxaaFloat fxaaQualityEdgeThresholdMin,\n\t\t\t\t//\n\t\t\t\t// Only used on FXAA Console.\n\t\t\t\t// This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.\n\t\t\t\t// It is here now to allow easier tuning.\n\t\t\t\t// This does not effect PS3, as this needs to be compiled in.\n\t\t\t\t//\t Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.\n\t\t\t\t//\t Due to the PS3 being ALU bound,\n\t\t\t\t//\t there are only three safe values here: 2 and 4 and 8.\n\t\t\t\t//\t These options use the shaders ability to a free *|/ by 2|4|8.\n\t\t\t\t// For all other platforms can be a non-power of two.\n\t\t\t\t//\t 8.0 is sharper (default!!!)\n\t\t\t\t//\t 4.0 is softer\n\t\t\t\t//\t 2.0 is really soft (good only for vector graphics inputs)\n\t\t\t\tFxaaFloat fxaaConsoleEdgeSharpness,\n\t\t\t\t//\n\t\t\t\t// Only used on FXAA Console.\n\t\t\t\t// This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.\n\t\t\t\t// It is here now to allow easier tuning.\n\t\t\t\t// This does not effect PS3, as this needs to be compiled in.\n\t\t\t\t//\t Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.\n\t\t\t\t//\t Due to the PS3 being ALU bound,\n\t\t\t\t//\t there are only two safe values here: 1/4 and 1/8.\n\t\t\t\t//\t These options use the shaders ability to a free *|/ by 2|4|8.\n\t\t\t\t// The console setting has a different mapping than the quality setting.\n\t\t\t\t// Other platforms can use other values.\n\t\t\t\t//\t 0.125 leaves less aliasing, but is softer (default!!!)\n\t\t\t\t//\t 0.25 leaves more aliasing, and is sharper\n\t\t\t\tFxaaFloat fxaaConsoleEdgeThreshold,\n\t\t\t\t//\n\t\t\t\t// Only used on FXAA Console.\n\t\t\t\t// This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.\n\t\t\t\t// It is here now to allow easier tuning.\n\t\t\t\t// Trims the algorithm from processing darks.\n\t\t\t\t// The console setting has a different mapping than the quality setting.\n\t\t\t\t// This only applies when FXAA_EARLY_EXIT is 1.\n\t\t\t\t// This does not apply to PS3,\n\t\t\t\t// PS3 was simplified to avoid more shader instructions.\n\t\t\t\t//\t 0.06 - faster but more aliasing in darks\n\t\t\t\t//\t 0.05 - default\n\t\t\t\t//\t 0.04 - slower and less aliasing in darks\n\t\t\t\t// Special notes when using FXAA_GREEN_AS_LUMA,\n\t\t\t\t//\t Likely want to set this to zero.\n\t\t\t\t//\t As colors that are mostly not-green\n\t\t\t\t//\t will appear very dark in the green channel!\n\t\t\t\t//\t Tune by looking at mostly non-green content,\n\t\t\t\t//\t then start at zero and increase until aliasing is a problem.\n\t\t\t\tFxaaFloat fxaaConsoleEdgeThresholdMin,\n\t\t\t\t//\n\t\t\t\t// Extra constants for 360 FXAA Console only.\n\t\t\t\t// Use zeros or anything else for other platforms.\n\t\t\t\t// These must be in physical constant registers and NOT immediates.\n\t\t\t\t// Immediates will result in compiler un-optimizing.\n\t\t\t\t// {xyzw} = float4(1.0, -1.0, 0.25, -0.25)\n\t\t\t\tFxaaFloat4 fxaaConsole360ConstDir\n\t\t) {\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaFloat2 posM;\n\t\t\t\tposM.x = pos.x;\n\t\t\t\tposM.y = pos.y;\n\t\t\t\t#if (FXAA_GATHER4_ALPHA == 1)\n\t\t\t\t\t\t#if (FXAA_DISCARD == 0)\n\t\t\t\t\t\t\t\tFxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\n\t\t\t\t\t\t\t\t#if (FXAA_GREEN_AS_LUMA == 0)\n\t\t\t\t\t\t\t\t\t\t#define lumaM rgbyM.w\n\t\t\t\t\t\t\t\t#else\n\t\t\t\t\t\t\t\t\t\t#define lumaM rgbyM.y\n\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#if (FXAA_GREEN_AS_LUMA == 0)\n\t\t\t\t\t\t\t\tFxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);\n\t\t\t\t\t\t\t\tFxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\t\tFxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);\n\t\t\t\t\t\t\t\tFxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#if (FXAA_DISCARD == 1)\n\t\t\t\t\t\t\t\t#define lumaM luma4A.w\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#define lumaE luma4A.z\n\t\t\t\t\t\t#define lumaS luma4A.x\n\t\t\t\t\t\t#define lumaSE luma4A.y\n\t\t\t\t\t\t#define lumaNW luma4B.w\n\t\t\t\t\t\t#define lumaN luma4B.z\n\t\t\t\t\t\t#define lumaW luma4B.x\n\t\t\t\t#else\n\t\t\t\t\t\tFxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\n\t\t\t\t\t\t#if (FXAA_GREEN_AS_LUMA == 0)\n\t\t\t\t\t\t\t\t#define lumaM rgbyM.w\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\t\t#define lumaM rgbyM.y\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#if (FXAA_GLSL_100 == 1)\n\t\t\t\t\t\t\tFxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tFxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t#endif\n\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaFloat maxSM = max(lumaS, lumaM);\n\t\t\t\tFxaaFloat minSM = min(lumaS, lumaM);\n\t\t\t\tFxaaFloat maxESM = max(lumaE, maxSM);\n\t\t\t\tFxaaFloat minESM = min(lumaE, minSM);\n\t\t\t\tFxaaFloat maxWN = max(lumaN, lumaW);\n\t\t\t\tFxaaFloat minWN = min(lumaN, lumaW);\n\t\t\t\tFxaaFloat rangeMax = max(maxWN, maxESM);\n\t\t\t\tFxaaFloat rangeMin = min(minWN, minESM);\n\t\t\t\tFxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\n\t\t\t\tFxaaFloat range = rangeMax - rangeMin;\n\t\t\t\tFxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\n\t\t\t\tFxaaBool earlyExit = range < rangeMaxClamped;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tif(earlyExit)\n\t\t\t\t\t\t#if (FXAA_DISCARD == 1)\n\t\t\t\t\t\t\t\tFxaaDiscard;\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\t\treturn rgbyM;\n\t\t\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t#if (FXAA_GATHER4_ALPHA == 0)\n\t\t\t\t\t\t#if (FXAA_GLSL_100 == 1)\n\t\t\t\t\t\t\tFxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tFxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t#endif\n\t\t\t\t#else\n\t\t\t\t\t\tFxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\tFxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\n\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaFloat lumaNS = lumaN + lumaS;\n\t\t\t\tFxaaFloat lumaWE = lumaW + lumaE;\n\t\t\t\tFxaaFloat subpixRcpRange = 1.0/range;\n\t\t\t\tFxaaFloat subpixNSWE = lumaNS + lumaWE;\n\t\t\t\tFxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\n\t\t\t\tFxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaFloat lumaNESE = lumaNE + lumaSE;\n\t\t\t\tFxaaFloat lumaNWNE = lumaNW + lumaNE;\n\t\t\t\tFxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\n\t\t\t\tFxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaFloat lumaNWSW = lumaNW + lumaSW;\n\t\t\t\tFxaaFloat lumaSWSE = lumaSW + lumaSE;\n\t\t\t\tFxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\n\t\t\t\tFxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\n\t\t\t\tFxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\n\t\t\t\tFxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\n\t\t\t\tFxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\n\t\t\t\tFxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\n\t\t\t\tFxaaFloat lengthSign = fxaaQualityRcpFrame.x;\n\t\t\t\tFxaaBool horzSpan = edgeHorz >= edgeVert;\n\t\t\t\tFxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tif(!horzSpan) lumaN = lumaW;\n\t\t\t\tif(!horzSpan) lumaS = lumaE;\n\t\t\t\tif(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\n\t\t\t\tFxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaFloat gradientN = lumaN - lumaM;\n\t\t\t\tFxaaFloat gradientS = lumaS - lumaM;\n\t\t\t\tFxaaFloat lumaNN = lumaN + lumaM;\n\t\t\t\tFxaaFloat lumaSS = lumaS + lumaM;\n\t\t\t\tFxaaBool pairN = abs(gradientN) >= abs(gradientS);\n\t\t\t\tFxaaFloat gradient = max(abs(gradientN), abs(gradientS));\n\t\t\t\tif(pairN) lengthSign = -lengthSign;\n\t\t\t\tFxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaFloat2 posB;\n\t\t\t\tposB.x = posM.x;\n\t\t\t\tposB.y = posM.y;\n\t\t\t\tFxaaFloat2 offNP;\n\t\t\t\toffNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\n\t\t\t\toffNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\n\t\t\t\tif(!horzSpan) posB.x += lengthSign * 0.5;\n\t\t\t\tif( horzSpan) posB.y += lengthSign * 0.5;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaFloat2 posN;\n\t\t\t\tposN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\n\t\t\t\tposN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\n\t\t\t\tFxaaFloat2 posP;\n\t\t\t\tposP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\n\t\t\t\tposP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\n\t\t\t\tFxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\n\t\t\t\tFxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\n\t\t\t\tFxaaFloat subpixE = subpixC * subpixC;\n\t\t\t\tFxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tif(!pairN) lumaNN = lumaSS;\n\t\t\t\tFxaaFloat gradientScaled = gradient * 1.0/4.0;\n\t\t\t\tFxaaFloat lumaMM = lumaM - lumaNN * 0.5;\n\t\t\t\tFxaaFloat subpixF = subpixD * subpixE;\n\t\t\t\tFxaaBool lumaMLTZero = lumaMM < 0.0;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tlumaEndN -= lumaNN * 0.5;\n\t\t\t\tlumaEndP -= lumaNN * 0.5;\n\t\t\t\tFxaaBool doneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\tFxaaBool doneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\n\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\n\t\t\t\tFxaaBool doneNP = (!doneN) || (!doneP);\n\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\n\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tif(doneNP) {\n\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\n\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\n\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\n\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\n\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 3)\n\t\t\t\t\t\tif(doneNP) {\n\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\n\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\n\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\n\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\n\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 4)\n\t\t\t\t\t\t\t\tif(doneNP) {\n\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\n\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\n\t\t\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\n\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\n\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 5)\n\t\t\t\t\t\t\t\t\t\tif(doneNP) {\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\n\t\t\t\t\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 6)\n\t\t\t\t\t\t\t\t\t\t\t\tif(doneNP) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 7)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(doneNP) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t#if (FXAA_QUALITY_PS > 8)\n\t\t\t\tif(doneNP) {\n\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\n\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\n\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\n\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\n\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 9)\n\t\t\t\t\t\tif(doneNP) {\n\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\n\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\n\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\n\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\n\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 10)\n\t\t\t\t\t\t\t\tif(doneNP) {\n\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\n\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\n\t\t\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\n\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\n\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 11)\n\t\t\t\t\t\t\t\t\t\tif(doneNP) {\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\n\t\t\t\t\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 12)\n\t\t\t\t\t\t\t\t\t\t\t\tif(doneNP) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t}\n\t\t\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t}\n\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t}\n\t\t\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t}\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaFloat dstN = posM.x - posN.x;\n\t\t\t\tFxaaFloat dstP = posP.x - posM.x;\n\t\t\t\tif(!horzSpan) dstN = posM.y - posN.y;\n\t\t\t\tif(!horzSpan) dstP = posP.y - posM.y;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\n\t\t\t\tFxaaFloat spanLength = (dstP + dstN);\n\t\t\t\tFxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\n\t\t\t\tFxaaFloat spanLengthRcp = 1.0/spanLength;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaBool directionN = dstN < dstP;\n\t\t\t\tFxaaFloat dst = min(dstN, dstP);\n\t\t\t\tFxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\n\t\t\t\tFxaaFloat subpixG = subpixF * subpixF;\n\t\t\t\tFxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\n\t\t\t\tFxaaFloat subpixH = subpixG * fxaaQualitySubpix;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\n\t\t\t\tFxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\n\t\t\t\tif(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\n\t\t\t\tif( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\n\t\t\t\t#if (FXAA_DISCARD == 1)\n\t\t\t\t\t\treturn FxaaTexTop(tex, posM);\n\t\t\t\t#else\n\t\t\t\t\t\treturn FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\n\t\t\t\t#endif\n\t\t}\n\t\t/*==========================================================================*/\n\t\t#endif\n\n\t\tvoid main() {\n\t\t\tgl_FragColor = FxaaPixelShader(\n\t\t\t\tvUv,\n\t\t\t\tvec4(0.0),\n\t\t\t\ttDiffuse,\n\t\t\t\ttDiffuse,\n\t\t\t\ttDiffuse,\n\t\t\t\tresolution,\n\t\t\t\tvec4(0.0),\n\t\t\t\tvec4(0.0),\n\t\t\t\tvec4(0.0),\n\t\t\t\t0.75,\n\t\t\t\t0.166,\n\t\t\t\t0.0833,\n\t\t\t\t0.0,\n\t\t\t\t0.0,\n\t\t\t\t0.0,\n\t\t\t\tvec4(0.0)\n\t\t\t);\n\n\t\t\t// TODO avoid querying texture twice for same texel\n\t\t\tgl_FragColor.a = texture2D(tDiffuse, vUv).a;\n\t\t}`};class Editor{constructor(){this.config=new Config;this.history=new History(this);this.strings=new Strings(this.config);this.loader=new Loader(this);this.camera=_DEFAULT_CAMERA.clone();this.scene=new Scene;this.scene.name="Scene";this.sceneHelpers=new Scene;this.resetSceneBgColor();this.object={};this.geometries={};this.materials={};this.textures={};this.scripts={};this.materialsRefCounter=new Map;this.mixer=new AnimationMixer(this.scene);this.selected=null;this.helpers={};this.cameras={};this.viewportCamera=this.camera;this.addCamera(this.camera)}resetSceneBgColor(){this.scene.background=new Color$1(3355443)}setScene(t){this.scene.uuid=t.uuid;this.scene.name=t.name;this.scene.background=t.background;this.scene.environment=t.environment;this.scene.fog=t.fog;this.scene.userData=JSON.parse(JSON.stringify(t.userData));while(t.children.length>0){this.addObject(t.children[0])}}addObject(t,e,n){var i=this;t.traverse((function(t){if(t.geometry!==undefined)i.addGeometry(t.geometry);if(t.material!==undefined)i.addMaterial(t.material);i.addCamera(t);i.addHelper(t)}));if(e===undefined){this.scene.add(t)}else{e.children.splice(n,0,t);t.parent=e}}moveObject(t,e,n){if(e===undefined){e=this.scene}e.add(t);if(n!==undefined){var i=e.children.indexOf(n);e.children.splice(i,0,t);e.children.pop()}}nameObject(t,e){t.name=e}removeObject(t){if(t.parent===null)return;var e=this;t.traverse((function(t){e.removeCamera(t);e.removeHelper(t);if(t.material!==undefined)e.removeMaterial(t.material)}));t.parent.remove(t)}addGeometry(t){this.geometries[t.uuid]=t}setGeometryName(t,e){t.name=e}addMaterial(t){if(Array.isArray(t)){for(var e=0,n=t.length;e<n;e++){this.addMaterialToRefCounter(t[e])}}else{this.addMaterialToRefCounter(t)}}addMaterialToRefCounter(t){var e=this.materialsRefCounter;var n=e.get(t);if(n===undefined){e.set(t,1);this.materials[t.uuid]=t}else{n++;e.set(t,n)}}removeMaterial(t){if(Array.isArray(t)){for(var e=0,n=t.length;e<n;e++){this.removeMaterialFromRefCounter(t[e])}}else{this.removeMaterialFromRefCounter(t)}}removeMaterialFromRefCounter(t){var e=this.materialsRefCounter;var n=e.get(t);n--;if(n===0){e.delete(t);delete this.materials[t.uuid]}else{e.set(t,n)}}getMaterialById(t){var e;var n=Object.values(this.materials);for(var i=0;i<n.length;i++){if(n[i].id===t){e=n[i];break}}return e}setMaterialName(t,e){t.name=e}addTexture(t){this.textures[t.uuid]=t}addCamera(t){if(t.isCamera){this.cameras[t.uuid]=t}}removeCamera(t){if(this.cameras[t.uuid]!==undefined){delete this.cameras[t.uuid]}}addHelper(){var t=new SphereGeometry$1(2,4,2);var e=new MeshBasicMaterial$1({color:16711680,visible:false});return function(n,i){if(i===undefined){if(n.isCamera){i=new CameraHelper(n)}else if(n.isPointLight){i=new PointLightHelper(n,1)}else if(n.isDirectionalLight){i=new DirectionalLightHelper(n,1)}else if(n.isSpotLight){i=new SpotLightHelper(n)}else if(n.isHemisphereLight){i=new HemisphereLightHelper(n,1)}else if(n.isSkinnedMesh){i=new SkeletonHelper(n.skeleton.bones[0])}else if(n.isBone===true&&n.parent?.isBone!==true){i=new SkeletonHelper(n)}else{return}var r=new Mesh$1(t,e);r.name="picker";r.userData.object=n;i.add(r)}this.sceneHelpers.add(i);this.helpers[n.id]=i}}removeHelper(t){if(this.helpers[t.id]!==undefined){var e=this.helpers[t.id];e.parent.remove(e);delete this.helpers[t.id]}}addScript(t,e){if(this.scripts[t.uuid]===undefined){this.scripts[t.uuid]=[]}this.scripts[t.uuid].push(e)}removeScript(t,e){if(this.scripts[t.uuid]===undefined)return;var n=this.scripts[t.uuid].indexOf(e);if(n!==-1){this.scripts[t.uuid].splice(n,1)}}getObjectMaterial(t,e){var n=t.material;if(Array.isArray(n)&&e!==undefined){n=n[e]}return n}setObjectMaterial(t,e,n){if(Array.isArray(t.material)&&e!==undefined){t.material[e]=n}else{t.material=n}}setViewportCamera(t){this.viewportCamera=this.cameras[t]}select(t){if(this.selected===t)return;var e=null;if(t!==null){e=t.uuid}if(t&&t.type==="LineSegments"){t=t.parent}this.selected=t;this.config.setKey("selected",e);viewport.selectObject(t)}selectById(t){if(t===this.camera.id){this.select(this.camera);return}this.select(this.scene.getObjectById(t))}selectByUuid(t){var e=this;this.scene.traverse((function(n){if(n.uuid===t){e.select(n)}}))}deselect(){this.select(null)}focus(t){if(t!==undefined){}}focusById(t){this.focus(this.scene.getObjectById(t))}clear(){this.history.clear();this.camera.copy(_DEFAULT_CAMERA);this.scene.name="Scene";this.scene.userData={};this.scene.environment=null;this.scene.fog=null;var t=this.scene.children;while(t.length>0){this.removeObject(t[0])}this.geometries={};this.materials={};this.textures={};this.scripts={};this.materialsRefCounter.clear();this.animations={};this.mixer.stopAllAction();this.deselect()}async fromJSON(t){var e=new ObjectLoader;var n=await e.parseAsync(t.camera);this.camera.copy(n);this.history.fromJSON(t.history);this.scripts=t.scripts;this.setScene(await e.parseAsync(t.scene))}toJSON(){var t=this.scene;var e=this.scripts;for(var n in e){var i=e[n];if(i.length===0||t.getObjectByProperty("uuid",n)===undefined){delete e[n]}}return{metadata:{},project:{shadows:this.config.getKey("project/renderer/shadows"),shadowType:this.config.getKey("project/renderer/shadowType"),vr:this.config.getKey("project/vr"),physicallyCorrectLights:this.config.getKey("project/renderer/physicallyCorrectLights"),toneMapping:this.config.getKey("project/renderer/toneMapping"),toneMappingExposure:this.config.getKey("project/renderer/toneMappingExposure")},camera:this.camera.toJSON(),scene:this.scene.toJSON(),scripts:this.scripts,history:this.history.toJSON()}}objectByUuid(t){return this.scene.getObjectByProperty("uuid",t,true)}execute(t,e){this.history.execute(t,e)}undo(){this.history.undo()}redo(){this.history.redo()}}function EditorControls(t,e){this.enabled=true;this.center=new Vector3$1;this.panSpeed=.002;this.zoomSpeed=.1;this.rotationSpeed=.005;this._mousedown=false;var n=this;var i=new Vector3$1;var r=new Vector3$1;var a=new Box3;var s={NONE:-1,ROTATE:0,ZOOM:1,PAN:2};var o=s.ROTATE;var l=this.center;var c=new Matrix3;var u=new Vector2;var h=new Vector2;var d=new Spherical;var f=new Sphere;var p={type:"change"};this.focus=function(e){var i;a.setFromObject(e);if(a.isEmpty()===false){a.getCenter(l);i=a.getBoundingSphere(f).radius}else{l.setFromMatrixPosition(e.matrixWorld);i=.1}r.set(0,0,1);r.applyQuaternion(t.quaternion);r.multiplyScalar(i*4);t.position.copy(l).add(r);n.dispatchEvent(p)};this.pan=function(e){var i=t.position.distanceTo(l);e.multiplyScalar(i*n.panSpeed);e.applyMatrix3(c.getNormalMatrix(t.matrix));t.position.add(e);l.add(e);n.dispatchEvent(p)};this.zoom=function(e){var i=t.position.distanceTo(l);e.multiplyScalar(i*n.zoomSpeed*.1);if(e.length()>i)return;e.applyMatrix3(c.getNormalMatrix(t.matrix));t.position.add(e);n.dispatchEvent(p)};this.rotate=function(e){i.copy(t.position).sub(l);d.setFromVector3(i);d.theta+=e.x*n.rotationSpeed;d.phi+=e.y*n.rotationSpeed;d.makeSafe();i.setFromSpherical(d);t.position.copy(l).add(i);t.lookAt(l);n.dispatchEvent(p)};function m(t){if(n.enabled===false)return;switch(t.pointerType){case"mouse":case"pen":y(t);break}e.ownerDocument.addEventListener("pointermove",g);e.ownerDocument.addEventListener("pointerup",_)}function g(t){if(n.enabled===false)return;switch(t.pointerType){case"mouse":case"pen":x(t);break}}function _(t){switch(t.pointerType){case"mouse":case"pen":v();break}e.ownerDocument.removeEventListener("pointermove",g);e.ownerDocument.removeEventListener("pointerup",_)}function y(t){n._mousedown=true;h.set(t.clientX,t.clientY)}function x(t){u.set(t.clientX,t.clientY);var e=u.x-h.x;var i=u.y-h.y;if(o===s.ROTATE){n.rotate(r.set(-e,-i,0))}else if(o===s.ZOOM){n.zoom(r.set(0,0,i))}else if(o===s.PAN){n.pan(r.set(-e,i,0))}h.set(t.clientX,t.clientY)}function v(){n._mousedown=false}this.setState=function(t){o=s[t]};this.dispose=function(){e.removeEventListener("pointerdown",m)};e.addEventListener("pointerdown",m)}EditorControls.prototype=Object.create(EventDispatcher.prototype);EditorControls.prototype.constructor=EditorControls;let BoxGeometry=BoxGeometry$1,BufferGeometry=BufferGeometry$1,CylinderGeometry=CylinderGeometry$1,DoubleSide=DoubleSide$1,Euler=Euler$1,Float32BufferAttribute=Float32BufferAttribute$1,Line=Line$1,LineBasicMaterial=LineBasicMaterial$1,Matrix4=Matrix4$1,Mesh=Mesh$1,MeshBasicMaterial=MeshBasicMaterial$1,Object3D=Object3D$1,OctahedronGeometry=OctahedronGeometry$1,PlaneGeometry=PlaneGeometry$1,Quaternion=Quaternion$1,Raycaster=Raycaster$1,SphereGeometry=SphereGeometry$1,TorusGeometry=TorusGeometry$1,Vector3=Vector3$1;const _raycaster=new Raycaster;const _tempVector=new Vector3;const _tempVector2=new Vector3;const _tempQuaternion=new Quaternion;const _unit={X:new Vector3(1,0,0),Y:new Vector3(0,1,0),Z:new Vector3(0,0,1)};const _changeEvent={type:"change"};const _mouseDownEvent={type:"mouseDown"};const _mouseUpEvent={type:"mouseUp",mode:null};const _objectChangeEvent={type:"objectChange"};class TransformControls extends Object3D{constructor(t,e){super();if(e===undefined){console.warn('THREE.TransformControls: The second parameter "domElement" is now mandatory.');e=document}this.visible=false;this.domElement=e;const n=new TransformControlsGizmo;this._gizmo=n;this.add(n);const i=new TransformControlsPlane;this._plane=i;this.add(i);const r=this;function a(t,e){let a=e;Object.defineProperty(r,t,{get:function(){return a!==undefined?a:e},set:function(e){if(a!==e){a=e;i[t]=e;n[t]=e;r.dispatchEvent({type:t+"-changed",value:e});r.dispatchEvent(_changeEvent)}}});r[t]=e;i[t]=e;n[t]=e}a("camera",t);a("object",undefined);a("enabled",true);a("axis",null);a("mode","translate");a("translationSnap",null);a("rotationSnap",null);a("scaleSnap",null);a("space","world");a("size",1);a("dragging",false);a("showX",true);a("showY",true);a("showZ",true);const s=new Vector3;const o=new Vector3;const l=new Quaternion;const c=new Quaternion;const u=new Vector3;const h=new Quaternion;const d=new Vector3;const f=new Vector3;const p=new Vector3;const m=0;const g=new Vector3;a("worldPosition",s);a("worldPositionStart",o);a("worldQuaternion",l);a("worldQuaternionStart",c);a("cameraPosition",u);a("cameraQuaternion",h);a("pointStart",d);a("pointEnd",f);a("rotationAxis",p);a("rotationAngle",m);a("eye",g);this._offset=new Vector3;this._startNorm=new Vector3;this._endNorm=new Vector3;this._cameraScale=new Vector3;this._parentPosition=new Vector3;this._parentQuaternion=new Quaternion;this._parentQuaternionInv=new Quaternion;this._parentScale=new Vector3;this._worldScaleStart=new Vector3;this._worldQuaternionInv=new Quaternion;this._worldScale=new Vector3;this._positionStart=new Vector3;this._quaternionStart=new Quaternion;this._scaleStart=new Vector3;this._getPointer=getPointer.bind(this);this._onPointerDown=onPointerDown.bind(this);this._onPointerHover=onPointerHover.bind(this);this._onPointerMove=onPointerMove.bind(this);this._onPointerUp=onPointerUp.bind(this);this.domElement.addEventListener("pointerdown",this._onPointerDown);this.domElement.addEventListener("pointermove",this._onPointerHover);this.domElement.addEventListener("pointerup",this._onPointerUp)}updateMatrixWorld(){if(this.object!==undefined){this.object.updateMatrixWorld();if(this.object.parent===null){console.error("TransformControls: The attached 3D object must be a part of the scene graph.")}else{this.object.parent.matrixWorld.decompose(this._parentPosition,this._parentQuaternion,this._parentScale)}this.object.matrixWorld.decompose(this.worldPosition,this.worldQuaternion,this._worldScale);this._parentQuaternionInv.copy(this._parentQuaternion).invert();this._worldQuaternionInv.copy(this.worldQuaternion).invert()}this.camera.updateMatrixWorld();this.camera.matrixWorld.decompose(this.cameraPosition,this.cameraQuaternion,this._cameraScale);this.eye.copy(this.cameraPosition).sub(this.worldPosition).normalize();super.updateMatrixWorld(this)}pointerHover(t){if(this.object===undefined||this.dragging===true)return;_raycaster.setFromCamera(t,this.camera);const e=intersectObjectWithRay(this._gizmo.picker[this.mode],_raycaster);if(e){this.axis=e.object.name}else{this.axis=null}}pointerDown(t){if(this.object===undefined||this.dragging===true||t.button!==0)return;if(this.axis!==null){_raycaster.setFromCamera(t,this.camera);const e=intersectObjectWithRay(this._plane,_raycaster,true);if(e){this.object.updateMatrixWorld();this.object.parent.updateMatrixWorld();this._positionStart.copy(this.object.position);this._quaternionStart.copy(this.object.quaternion);this._scaleStart.copy(this.object.scale);this.object.matrixWorld.decompose(this.worldPositionStart,this.worldQuaternionStart,this._worldScaleStart);this.pointStart.copy(e.point).sub(this.worldPositionStart)}this.dragging=true;_mouseDownEvent.mode=this.mode;this.dispatchEvent(_mouseDownEvent)}}pointerMove(t){const e=this.axis;const n=this.mode;const i=this.object;let r=this.space;if(n==="scale"){r="local"}else if(e==="E"||e==="XYZE"||e==="XYZ"){r="world"}if(i===undefined||e===null||this.dragging===false||t.button!==-1)return;_raycaster.setFromCamera(t,this.camera);const a=intersectObjectWithRay(this._plane,_raycaster,true);if(!a)return;this.pointEnd.copy(a.point).sub(this.worldPositionStart);if(n==="translate"){this._offset.copy(this.pointEnd).sub(this.pointStart);if(r==="local"&&e!=="XYZ"){this._offset.applyQuaternion(this._worldQuaternionInv)}if(e.indexOf("X")===-1)this._offset.x=0;if(e.indexOf("Y")===-1)this._offset.y=0;if(e.indexOf("Z")===-1)this._offset.z=0;if(r==="local"&&e!=="XYZ"){this._offset.applyQuaternion(this._quaternionStart).divide(this._parentScale)}else{this._offset.applyQuaternion(this._parentQuaternionInv).divide(this._parentScale)}i.position.copy(this._offset).add(this._positionStart);if(this.translationSnap){if(r==="local"){i.position.applyQuaternion(_tempQuaternion.copy(this._quaternionStart).invert());if(e.search("X")!==-1){i.position.x=Math.round(i.position.x/this.translationSnap)*this.translationSnap}if(e.search("Y")!==-1){i.position.y=Math.round(i.position.y/this.translationSnap)*this.translationSnap}if(e.search("Z")!==-1){i.position.z=Math.round(i.position.z/this.translationSnap)*this.translationSnap}i.position.applyQuaternion(this._quaternionStart)}if(r==="world"){if(i.parent){i.position.add(_tempVector.setFromMatrixPosition(i.parent.matrixWorld))}if(e.search("X")!==-1){i.position.x=Math.round(i.position.x/this.translationSnap)*this.translationSnap}if(e.search("Y")!==-1){i.position.y=Math.round(i.position.y/this.translationSnap)*this.translationSnap}if(e.search("Z")!==-1){i.position.z=Math.round(i.position.z/this.translationSnap)*this.translationSnap}if(i.parent){i.position.sub(_tempVector.setFromMatrixPosition(i.parent.matrixWorld))}}}}else if(n==="scale"){if(e.search("XYZ")!==-1){let t=this.pointEnd.length()/this.pointStart.length();if(this.pointEnd.dot(this.pointStart)<0)t*=-1;_tempVector2.set(t,t,t)}else{_tempVector.copy(this.pointStart);_tempVector2.copy(this.pointEnd);_tempVector.applyQuaternion(this._worldQuaternionInv);_tempVector2.applyQuaternion(this._worldQuaternionInv);_tempVector2.divide(_tempVector);if(e.search("X")===-1){_tempVector2.x=1}if(e.search("Y")===-1){_tempVector2.y=1}if(e.search("Z")===-1){_tempVector2.z=1}}i.scale.copy(this._scaleStart).multiply(_tempVector2);if(this.scaleSnap){if(e.search("X")!==-1){i.scale.x=Math.round(i.scale.x/this.scaleSnap)*this.scaleSnap||this.scaleSnap}if(e.search("Y")!==-1){i.scale.y=Math.round(i.scale.y/this.scaleSnap)*this.scaleSnap||this.scaleSnap}if(e.search("Z")!==-1){i.scale.z=Math.round(i.scale.z/this.scaleSnap)*this.scaleSnap||this.scaleSnap}}}else if(n==="rotate"){this._offset.copy(this.pointEnd).sub(this.pointStart);const t=20/this.worldPosition.distanceTo(_tempVector.setFromMatrixPosition(this.camera.matrixWorld));if(e==="E"){this.rotationAxis.copy(this.eye);this.rotationAngle=this.pointEnd.angleTo(this.pointStart);this._startNorm.copy(this.pointStart).normalize();this._endNorm.copy(this.pointEnd).normalize();this.rotationAngle*=this._endNorm.cross(this._startNorm).dot(this.eye)<0?1:-1}else if(e==="XYZE"){this.rotationAxis.copy(this._offset).cross(this.eye).normalize();this.rotationAngle=this._offset.dot(_tempVector.copy(this.rotationAxis).cross(this.eye))*t}else if(e==="X"||e==="Y"||e==="Z"){this.rotationAxis.copy(_unit[e]);_tempVector.copy(_unit[e]);if(r==="local"){_tempVector.applyQuaternion(this.worldQuaternion)}this.rotationAngle=this._offset.dot(_tempVector.cross(this.eye).normalize())*t}if(this.rotationSnap)this.rotationAngle=Math.round(this.rotationAngle/this.rotationSnap)*this.rotationSnap;if(r==="local"&&e!=="E"&&e!=="XYZE"){i.quaternion.copy(this._quaternionStart);i.quaternion.multiply(_tempQuaternion.setFromAxisAngle(this.rotationAxis,this.rotationAngle)).normalize()}else{this.rotationAxis.applyQuaternion(this._parentQuaternionInv);i.quaternion.copy(_tempQuaternion.setFromAxisAngle(this.rotationAxis,this.rotationAngle));i.quaternion.multiply(this._quaternionStart).normalize()}}this.dispatchEvent(_changeEvent);this.dispatchEvent(_objectChangeEvent)}pointerUp(t){if(t.button!==0)return;if(this.dragging&&this.axis!==null){_mouseUpEvent.mode=this.mode;this.dispatchEvent(_mouseUpEvent)}this.dragging=false;this.axis=null}dispose(){this.domElement.removeEventListener("pointerdown",this._onPointerDown);this.domElement.removeEventListener("pointermove",this._onPointerHover);this.domElement.removeEventListener("pointermove",this._onPointerMove);this.domElement.removeEventListener("pointerup",this._onPointerUp);this.traverse((function(t){if(t.geometry)t.geometry.dispose();if(t.material)t.material.dispose()}))}attach(t){this.object=t;this.visible=true;return this}detach(){this.object=undefined;this.visible=false;this.axis=null;return this}reset(){if(!this.enabled)return;if(this.dragging){this.object.position.copy(this._positionStart);this.object.quaternion.copy(this._quaternionStart);this.object.scale.copy(this._scaleStart);this.dispatchEvent(_changeEvent);this.dispatchEvent(_objectChangeEvent);this.pointStart.copy(this.pointEnd)}}getRaycaster(){return _raycaster}getMode(){return this.mode}setMode(t){this.mode=t}setTranslationSnap(t){this.translationSnap=t}setRotationSnap(t){this.rotationSnap=t}setScaleSnap(t){this.scaleSnap=t}setSize(t){this.size=t}setSpace(t){this.space=t}update(){console.warn("THREE.TransformControls: update function has no more functionality and therefore has been deprecated.")}}TransformControls.prototype.isTransformControls=true;function getPointer(t){if(this.domElement.ownerDocument.pointerLockElement){return{x:0,y:0,button:t.button}}else{const e=this.domElement.getBoundingClientRect();return{x:(t.clientX-e.left)/e.width*2-1,y:-(t.clientY-e.top)/e.height*2+1,button:t.button}}}function onPointerHover(t){if(!this.enabled||viewport.viewHelper.controls._mousedown)return;switch(t.pointerType){case"mouse":case"pen":this.pointerHover(this._getPointer(t));break}}function onPointerDown(t){if(!this.enabled)return;if(!document.pointerLockElement){this.domElement.setPointerCapture(t.pointerId)}this.domElement.addEventListener("pointermove",this._onPointerMove);this.pointerHover(this._getPointer(t));this.pointerDown(this._getPointer(t))}function onPointerMove(t){if(!this.enabled)return;this.pointerMove(this._getPointer(t))}function onPointerUp(t){if(!this.enabled)return;this.domElement.releasePointerCapture(t.pointerId);this.domElement.removeEventListener("pointermove",this._onPointerMove);this.pointerUp(this._getPointer(t))}function intersectObjectWithRay(t,e,n){const i=e.intersectObject(t,true);for(let t=0;t<i.length;t++){if(i[t].object.visible||n){return i[t]}}return false}const _tempEuler=new Euler;const _alignVector=new Vector3(0,1,0);const _zeroVector=new Vector3(0,0,0);const _lookAtMatrix=new Matrix4;const _tempQuaternion2=new Quaternion;const _identityQuaternion=new Quaternion;const _dirVector=new Vector3;const _tempMatrix=new Matrix4;const _unitX=new Vector3(1,0,0);const _unitY=new Vector3(0,1,0);const _unitZ=new Vector3(0,0,1);const _v1=new Vector3;const _v2=new Vector3;const _v3=new Vector3;class TransformControlsGizmo extends Object3D{constructor(){super();this.type="TransformControlsGizmo";const t=new MeshBasicMaterial({depthTest:false,depthWrite:false,fog:false,toneMapped:false,transparent:true});const e=new LineBasicMaterial({depthTest:false,depthWrite:false,fog:false,toneMapped:false,transparent:true});const n=t.clone();n.opacity=.15;const i=e.clone();i.opacity=.5;const r=t.clone();r.color.setHex(16721969);const a=t.clone();a.color.setHex(5306890);const s=t.clone();s.color.setHex(2062077);const o=t.clone();o.color.setHex(16721969);o.opacity=.5;const l=t.clone();l.color.setHex(5306890);l.opacity=.5;const c=t.clone();c.color.setHex(2062077);c.opacity=.5;const u=t.clone();u.opacity=.25;const h=t.clone();h.color.setHex(16776960);h.opacity=.25;const d=t.clone();d.color.setHex(16776960);const f=t.clone();f.color.setHex(7895160);const p=new CylinderGeometry(0,.04,.1,12);p.translate(0,.05,0);const m=new BoxGeometry(.08,.08,.08);m.translate(0,.04,0);const g=new BufferGeometry;g.setAttribute("position",new Float32BufferAttribute([0,0,0,1,0,0],3));const _=new CylinderGeometry(.0075,.0075,.5,3);_.translate(0,.25,0);function y(t,e){const n=new TorusGeometry(t,.0075,3,64,e*Math.PI*2);n.rotateY(Math.PI/2);n.rotateX(Math.PI/2);return n}function x(){const t=new BufferGeometry;t.setAttribute("position",new Float32BufferAttribute([0,0,0,1,1,1],3));return t}const v={X:[[new Mesh(p,r),[.5,0,0],[0,0,-Math.PI/2]],[new Mesh(_,r),[0,0,0],[0,0,-Math.PI/2]]],Y:[[new Mesh(p,a),[0,.5,0]],[new Mesh(_,a)]],Z:[[new Mesh(p,s),[0,0,.5],[Math.PI/2,0,0]],[new Mesh(_,s),null,[Math.PI/2,0,0]]],XYZ:[[new Mesh(new OctahedronGeometry(.1,0),u.clone()),[0,0,0]]],XY:[[new Mesh(new BoxGeometry(.1,.1,.01),c.clone()),[.25,.25,0]]],YZ:[[new Mesh(new BoxGeometry(.1,.1,.01),o.clone()),[0,.25,.25],[0,Math.PI/2,0]]],XZ:[[new Mesh(new BoxGeometry(.1,.1,.01),l.clone()),[.25,0,.25],[-Math.PI/2,0,0]]]};const b={X:[[new Mesh(new CylinderGeometry(.2,0,.6,4),n),[.3,0,0],[0,0,-Math.PI/2]],[new Mesh(new CylinderGeometry(.2,0,.6,4),n),[-.3,0,0],[0,0,Math.PI/2]]],Y:[[new Mesh(new CylinderGeometry(.2,0,.6,4),n),[0,.3,0]],[new Mesh(new CylinderGeometry(.2,0,.6,4),n),[0,-.3,0],[0,0,Math.PI]]],Z:[[new Mesh(new CylinderGeometry(.2,0,.6,4),n),[0,0,.3],[Math.PI/2,0,0]],[new Mesh(new CylinderGeometry(.2,0,.6,4),n),[0,0,-.3],[-Math.PI/2,0,0]]],XYZ:[[new Mesh(new OctahedronGeometry(.2,0),n)]],XY:[[new Mesh(new BoxGeometry(.2,.2,.01),n),[.25,.25,0]]],YZ:[[new Mesh(new BoxGeometry(.2,.2,.01),n),[0,.25,.25],[0,Math.PI/2,0]]],XZ:[[new Mesh(new BoxGeometry(.2,.2,.01),n),[.25,0,.25],[-Math.PI/2,0,0]]]};const M={START:[[new Mesh(new OctahedronGeometry(.01,2),i),null,null,null,"helper"]],END:[[new Mesh(new OctahedronGeometry(.01,2),i),null,null,null,"helper"]],DELTA:[[new Line(x(),i),null,null,null,"helper"]],X:[[new Line(g,i.clone()),[-1e3,0,0],null,[1e6,1,1],"helper"]],Y:[[new Line(g,i.clone()),[0,-1e3,0],[0,0,Math.PI/2],[1e6,1,1],"helper"]],Z:[[new Line(g,i.clone()),[0,0,-1e3],[0,-Math.PI/2,0],[1e6,1,1],"helper"]]};const w={XYZE:[[new Mesh(y(.5,1),f),null,[0,Math.PI/2,0]]],X:[[new Mesh(y(.5,.5),r)]],Y:[[new Mesh(y(.5,.5),a),null,[0,0,-Math.PI/2]]],Z:[[new Mesh(y(.5,.5),s),null,[0,Math.PI/2,0]]],E:[[new Mesh(y(.75,1),h),null,[0,Math.PI/2,0]]]};const S={AXIS:[[new Line(g,i.clone()),[-1e3,0,0],null,[1e6,1,1],"helper"]]};const A={XYZE:[[new Mesh(new SphereGeometry(.25,10,8),n)]],X:[[new Mesh(new TorusGeometry(.5,.1,4,24),n),[0,0,0],[0,-Math.PI/2,-Math.PI/2]]],Y:[[new Mesh(new TorusGeometry(.5,.1,4,24),n),[0,0,0],[Math.PI/2,0,0]]],Z:[[new Mesh(new TorusGeometry(.5,.1,4,24),n),[0,0,0],[0,0,-Math.PI/2]]],E:[[new Mesh(new TorusGeometry(.75,.1,2,24),n)]]};const T={X:[[new Mesh(m,r),[.5,0,0],[0,0,-Math.PI/2]],[new Mesh(_,r),[0,0,0],[0,0,-Math.PI/2]]],Y:[[new Mesh(m,a),[0,.5,0]],[new Mesh(_,a)]],Z:[[new Mesh(m,s),[0,0,.5],[Math.PI/2,0,0]],[new Mesh(_,s),[0,0,0],[Math.PI/2,0,0]]],XY:[[new Mesh(new BoxGeometry(.1,.1,.01),c),[.25,.25,0]]],YZ:[[new Mesh(new BoxGeometry(.1,.1,.01),o),[0,.25,.25],[0,Math.PI/2,0]]],XZ:[[new Mesh(new BoxGeometry(.1,.1,.01),l),[.25,0,.25],[-Math.PI/2,0,0]]],XYZ:[[new Mesh(new BoxGeometry(.1,.1,.1),u.clone())]]};const E={X:[[new Mesh(new CylinderGeometry(.2,0,.6,4),n),[.3,0,0],[0,0,-Math.PI/2]],[new Mesh(new CylinderGeometry(.2,0,.6,4),n),[-.3,0,0],[0,0,Math.PI/2]]],Y:[[new Mesh(new CylinderGeometry(.2,0,.6,4),n),[0,.3,0]],[new Mesh(new CylinderGeometry(.2,0,.6,4),n),[0,-.3,0],[0,0,Math.PI]]],Z:[[new Mesh(new CylinderGeometry(.2,0,.6,4),n),[0,0,.3],[Math.PI/2,0,0]],[new Mesh(new CylinderGeometry(.2,0,.6,4),n),[0,0,-.3],[-Math.PI/2,0,0]]],XY:[[new Mesh(new BoxGeometry(.2,.2,.01),n),[.25,.25,0]]],YZ:[[new Mesh(new BoxGeometry(.2,.2,.01),n),[0,.25,.25],[0,Math.PI/2,0]]],XZ:[[new Mesh(new BoxGeometry(.2,.2,.01),n),[.25,0,.25],[-Math.PI/2,0,0]]],XYZ:[[new Mesh(new BoxGeometry(.2,.2,.2),n),[0,0,0]]]};const L={X:[[new Line(g,i.clone()),[-1e3,0,0],null,[1e6,1,1],"helper"]],Y:[[new Line(g,i.clone()),[0,-1e3,0],[0,0,Math.PI/2],[1e6,1,1],"helper"]],Z:[[new Line(g,i.clone()),[0,0,-1e3],[0,-Math.PI/2,0],[1e6,1,1],"helper"]]};function C(t){const e=new Object3D;for(const n in t){for(let i=t[n].length;i--;){const r=t[n][i][0].clone();const a=t[n][i][1];const s=t[n][i][2];const o=t[n][i][3];const l=t[n][i][4];r.name=n;r.tag=l;if(a){r.position.set(a[0],a[1],a[2])}if(s){r.rotation.set(s[0],s[1],s[2])}if(o){r.scale.set(o[0],o[1],o[2])}r.updateMatrix();const c=r.geometry.clone();c.applyMatrix4(r.matrix);r.geometry=c;r.renderOrder=Infinity;r.position.set(0,0,0);r.rotation.set(0,0,0);r.scale.set(1,1,1);e.add(r)}}return e}this.gizmo={};this.picker={};this.helper={};this.add(this.gizmo["translate"]=C(v));this.add(this.gizmo["rotate"]=C(w));this.add(this.gizmo["scale"]=C(T));this.add(this.picker["translate"]=C(b));this.add(this.picker["rotate"]=C(A));this.add(this.picker["scale"]=C(E));this.add(this.helper["translate"]=C(M));this.add(this.helper["rotate"]=C(S));this.add(this.helper["scale"]=C(L));this.picker["translate"].visible=false;this.picker["rotate"].visible=false;this.picker["scale"].visible=false}updateMatrixWorld(t){const e=this.mode==="scale"?"local":this.space;const n=e==="local"?this.worldQuaternion:_identityQuaternion;this.gizmo["translate"].visible=this.mode==="translate";this.gizmo["rotate"].visible=this.mode==="rotate";this.gizmo["scale"].visible=this.mode==="scale";this.helper["translate"].visible=this.mode==="translate";this.helper["rotate"].visible=this.mode==="rotate";this.helper["scale"].visible=this.mode==="scale";let i=[];i=i.concat(this.picker[this.mode].children);i=i.concat(this.gizmo[this.mode].children);i=i.concat(this.helper[this.mode].children);for(let t=0;t<i.length;t++){const e=i[t];e.visible=true;e.rotation.set(0,0,0);e.position.copy(this.worldPosition);let r;if(this.camera.isOrthographicCamera){r=(this.camera.top-this.camera.bottom)/this.camera.zoom}else{r=this.worldPosition.distanceTo(this.cameraPosition)*Math.min(1.9*Math.tan(Math.PI*this.camera.fov/360)/this.camera.zoom,7)}e.scale.set(1,1,1).multiplyScalar(r*this.size/4);if(e.tag==="helper"){e.visible=false;if(e.name==="AXIS"){e.position.copy(this.worldPositionStart);e.visible=!!this.axis;if(this.axis==="X"){_tempQuaternion.setFromEuler(_tempEuler.set(0,0,0));e.quaternion.copy(n).multiply(_tempQuaternion);if(Math.abs(_alignVector.copy(_unitX).applyQuaternion(n).dot(this.eye))>.9){e.visible=false}}if(this.axis==="Y"){_tempQuaternion.setFromEuler(_tempEuler.set(0,0,Math.PI/2));e.quaternion.copy(n).multiply(_tempQuaternion);if(Math.abs(_alignVector.copy(_unitY).applyQuaternion(n).dot(this.eye))>.9){e.visible=false}}if(this.axis==="Z"){_tempQuaternion.setFromEuler(_tempEuler.set(0,Math.PI/2,0));e.quaternion.copy(n).multiply(_tempQuaternion);if(Math.abs(_alignVector.copy(_unitZ).applyQuaternion(n).dot(this.eye))>.9){e.visible=false}}if(this.axis==="XYZE"){_tempQuaternion.setFromEuler(_tempEuler.set(0,Math.PI/2,0));_alignVector.copy(this.rotationAxis);e.quaternion.setFromRotationMatrix(_lookAtMatrix.lookAt(_zeroVector,_alignVector,_unitY));e.quaternion.multiply(_tempQuaternion);e.visible=this.dragging}if(this.axis==="E"){e.visible=false}}else if(e.name==="START"){e.position.copy(this.worldPositionStart);e.visible=this.dragging}else if(e.name==="END"){e.position.copy(this.worldPosition);e.visible=this.dragging}else if(e.name==="DELTA"){e.position.copy(this.worldPositionStart);e.quaternion.copy(this.worldQuaternionStart);_tempVector.set(1e-10,1e-10,1e-10).add(this.worldPositionStart).sub(this.worldPosition).multiplyScalar(-1);_tempVector.applyQuaternion(this.worldQuaternionStart.clone().invert());e.scale.copy(_tempVector);e.visible=this.dragging}else{e.quaternion.copy(n);if(this.dragging){e.position.copy(this.worldPositionStart)}else{e.position.copy(this.worldPosition)}if(this.axis){e.visible=this.axis.search(e.name)!==-1}}continue}e.quaternion.copy(n);if(this.mode==="translate"||this.mode==="scale"){const t=.99;const i=.2;if(e.name==="X"){if(Math.abs(_alignVector.copy(_unitX).applyQuaternion(n).dot(this.eye))>t){e.scale.set(1e-10,1e-10,1e-10);e.visible=false}}if(e.name==="Y"){if(Math.abs(_alignVector.copy(_unitY).applyQuaternion(n).dot(this.eye))>t){e.scale.set(1e-10,1e-10,1e-10);e.visible=false}}if(e.name==="Z"){if(Math.abs(_alignVector.copy(_unitZ).applyQuaternion(n).dot(this.eye))>t){e.scale.set(1e-10,1e-10,1e-10);e.visible=false}}if(e.name==="XY"){if(Math.abs(_alignVector.copy(_unitZ).applyQuaternion(n).dot(this.eye))<i){e.scale.set(1e-10,1e-10,1e-10);e.visible=false}}if(e.name==="YZ"){if(Math.abs(_alignVector.copy(_unitX).applyQuaternion(n).dot(this.eye))<i){e.scale.set(1e-10,1e-10,1e-10);e.visible=false}}if(e.name==="XZ"){if(Math.abs(_alignVector.copy(_unitY).applyQuaternion(n).dot(this.eye))<i){e.scale.set(1e-10,1e-10,1e-10);e.visible=false}}}else if(this.mode==="rotate"){_tempQuaternion2.copy(n);_alignVector.copy(this.eye).applyQuaternion(_tempQuaternion.copy(n).invert());if(e.name.search("E")!==-1){e.quaternion.setFromRotationMatrix(_lookAtMatrix.lookAt(this.eye,_zeroVector,_unitY))}if(e.name==="X"){_tempQuaternion.setFromAxisAngle(_unitX,Math.atan2(-_alignVector.y,_alignVector.z));_tempQuaternion.multiplyQuaternions(_tempQuaternion2,_tempQuaternion);e.quaternion.copy(_tempQuaternion)}if(e.name==="Y"){_tempQuaternion.setFromAxisAngle(_unitY,Math.atan2(_alignVector.x,_alignVector.z));_tempQuaternion.multiplyQuaternions(_tempQuaternion2,_tempQuaternion);e.quaternion.copy(_tempQuaternion)}if(e.name==="Z"){_tempQuaternion.setFromAxisAngle(_unitZ,Math.atan2(_alignVector.y,_alignVector.x));_tempQuaternion.multiplyQuaternions(_tempQuaternion2,_tempQuaternion);e.quaternion.copy(_tempQuaternion)}}e.visible=e.visible&&(e.name.indexOf("X")===-1||this.showX);e.visible=e.visible&&(e.name.indexOf("Y")===-1||this.showY);e.visible=e.visible&&(e.name.indexOf("Z")===-1||this.showZ);e.visible=e.visible&&(e.name.indexOf("E")===-1||this.showX&&this.showY&&this.showZ);e.material._color=e.material._color||e.material.color.clone();e.material._opacity=e.material._opacity||e.material.opacity;e.material.color.copy(e.material._color);e.material.opacity=e.material._opacity;if(this.enabled&&this.axis){if(e.name===this.axis){e.material.color.setHex(16776960);e.material.opacity=1}else if(this.axis.split("").some((function(t){return e.name===t}))){e.material.color.setHex(16776960);e.material.opacity=1}}}super.updateMatrixWorld(t)}}TransformControlsGizmo.prototype.isTransformControlsGizmo=true;class TransformControlsPlane extends Mesh{constructor(){super(new PlaneGeometry(1e5,1e5,2,2),new MeshBasicMaterial({visible:false,wireframe:true,side:DoubleSide,transparent:true,opacity:.1,toneMapped:false}));this.type="TransformControlsPlane"}updateMatrixWorld(t){let e=this.space;this.position.copy(this.worldPosition);if(this.mode==="scale")e="local";_v1.copy(_unitX).applyQuaternion(e==="local"?this.worldQuaternion:_identityQuaternion);_v2.copy(_unitY).applyQuaternion(e==="local"?this.worldQuaternion:_identityQuaternion);_v3.copy(_unitZ).applyQuaternion(e==="local"?this.worldQuaternion:_identityQuaternion);_alignVector.copy(_v2);switch(this.mode){case"translate":case"scale":switch(this.axis){case"X":_alignVector.copy(this.eye).cross(_v1);_dirVector.copy(_v1).cross(_alignVector);break;case"Y":_alignVector.copy(this.eye).cross(_v2);_dirVector.copy(_v2).cross(_alignVector);break;case"Z":_alignVector.copy(this.eye).cross(_v3);_dirVector.copy(_v3).cross(_alignVector);break;case"XY":_dirVector.copy(_v3);break;case"YZ":_dirVector.copy(_v1);break;case"XZ":_alignVector.copy(_v3);_dirVector.copy(_v2);break;case"XYZ":case"E":_dirVector.set(0,0,0);break}break;case"rotate":default:_dirVector.set(0,0,0)}if(_dirVector.length()===0){this.quaternion.copy(this.cameraQuaternion)}else{_tempMatrix.lookAt(_tempVector.set(0,0,0),_dirVector,_alignVector);this.quaternion.setFromRotationMatrix(_tempMatrix)}super.updateMatrixWorld(t)}}TransformControlsPlane.prototype.isTransformControlsPlane=true;class Viewport{constructor(t){const e=this;const n=new UIPanel;n.setId("viewport");n.setPosition("absolute");let i=new ViewportInfo(t);n.add(i.container);const r=t.camera;const a=t.scene;const s=t.sceneHelpers;let o=true;const l=new Group;const c=new GridHelper(30,30);c.material.color.setHex(4013373);c.material.vertexColors=false;l.add(c);const u=new GridHelper(30,6);u.material.color.setHex(5723991);u.material.depthFunc=AlwaysDepth;u.material.vertexColors=false;l.add(u);const h=new ViewHelper(r,n);const d=new VR(t);const f=new Box3;const p=new Box3Helper(f,Settings.wireframe.highlight);p.material.depthTest=AlwaysDepth;p.material.transparent=true;p.visible=false;s.add(p);let m=null;let g=null;let _=null;const y=new TransformControls(r,n.dom);y.addEventListener("change",(function(){const e=y.object;if(e!==undefined){f.setFromObject(e,true);const n=t.helpers[e.id];if(n!==undefined&&n.isSkeletonHelper!==true){n.update()}}k()}));y.addEventListener("mouseDown",(function(){const t=y.object;m=t.position.clone();g=t.rotation.clone();_=t.scale.clone();R.enabled=false}));y.addEventListener("mouseUp",(function(){const e=y.object;if(e!==undefined){switch(y.getMode()){case"translate":if(!m.equals(e.position)){t.execute(new SetPositionCommand(t,e,e.position,m))}break;case"rotate":if(!g.equals(e.rotation)){t.execute(new SetRotationCommand(t,e,e.rotation,g))}break;case"scale":if(!_.equals(e.scale)){t.execute(new SetScaleCommand(t,e,e.scale,_))}break}}R.enabled=true}));s.add(y);const x=new Raycaster$1;x.params.Line.threshold=.1;const v=new Vector2;function b(){r.aspect=n.dom.offsetWidth/n.dom.offsetHeight;r.updateProjectionMatrix()}function M(t,e){v.set(t.x*2-1,-(t.y*2)+1);x.setFromCamera(v,r);return x.intersectObjects(e).filter((t=>t.object.visible===true))}const w=new Vector2;const S=new Vector2;const A=new Vector2;function T(t,e,n){const i=t.getBoundingClientRect();return[(e-i.left)/i.width,(n-i.top)/i.height]}function E(){if(w.distanceTo(S)===0){const e=M(S,a.children);if(e.length>0){const n=e[0].object;if(n.userData.object!==undefined){t.select(n.userData.object)}else{t.select(n)}}else{t.select(null)}k()}}function L(t){const e=T(n.dom,t.clientX,t.clientY);w.fromArray(e);document.addEventListener("mouseup",C)}function C(t){const e=T(n.dom,t.clientX,t.clientY);S.fromArray(e);E();document.removeEventListener("mouseup",C)}function P(t){const e=T(n.dom,t.clientX,t.clientY);A.fromArray(e);const i=M(A,a.children);if(i.length>0){let t=i[0].object;let e=t.position.clone().add(new Vector3$1(3,3,6)),n=t.position.clone();r.position.set(...e.toArray());r.lookAt(n);R.center.set(...n.toArray());k()}}n.dom.addEventListener("mousedown",L);n.dom.addEventListener("dblclick",P);const R=new EditorControls(r,n.dom);R.center.set(0,0,0);R.addEventListener("change",(function(){k()}));h.controls=R;let F=new Clock;function I(){const e=t.mixer;const n=F.getDelta();let i=false;if(e.stats.actions.inUse>0){e.update(n);i=true}if(h.animating===true){h.update(n);i=true}else{F=new Clock}if(d.currentSession!==null){i=true}if(i===true){k();requestAnimationFrame(I)}}let B=0,D=0,N=n.dom.offsetWidth,U=n.dom.offsetHeight;var V={minFilter:LinearFilter,magFilter:LinearFilter,format:RGBAFormat,type:HalfFloatType,stencilBuffer:false,samples:4};var G=new WebGLRenderTarget(N,U,V);let O=new EffectComposer(renderer,G);let z=new RenderPass(a,r);O.addPass(z);let $=new OutlinePass(new Vector2(N,U),a,r);O.addPass($);$.edgeStrength=5,$.edgeThickness=.5;$.visibleEdgeColor.set("#ff3300");$.hiddenEdgeColor.set("#002255");let H=new ShaderPass(FXAAShader);O.addPass(H);function k(){B=performance.now();a.add(l);O.render();a.remove(l);if(r===t.viewportCamera){renderer.autoClear=false;if(o===true)renderer.render(s,r);if(d.currentSession===null)h.render(renderer);renderer.autoClear=true}D=performance.now();e.viewInfo.updateFrametime(D-B)}function W(){B=performance.now();a.add(l);renderer.setViewport(0,0,n.dom.offsetWidth,n.dom.offsetHeight);renderer.render(a,t.viewportCamera);a.remove(l);if(r===t.viewportCamera){renderer.autoClear=false;if(o===true)renderer.render(s,r);if(d.currentSession===null)h.render(renderer);renderer.autoClear=true}D=performance.now();e.viewInfo.updateFrametime(D-B)}function j(){N=n.dom.offsetWidth||1;U=n.dom.offsetHeight||1;b();renderer.setSize(N,U);O.setSize(N,U);H.uniforms["resolution"].value.set(1/N,1/U);k()}function X(t){o=t}this.resize=j;this.render=k;this.animate=I;this.viewInfo=i;this.container=n;this.viewHelper=h;this.toggleSceneHelpers=X;this.grid=l;this.selectObject=function(t){$.selectedObjects=[];p.visible=false;y.detach();if(t!==null&&t!==a&&t!==r){f.setFromObject(t,true);if(f.isEmpty()===false){p.visible=true;$.selectedObjects=[t]}y.attach(t)}k()};this.transformControlsSetMode=function(t){y.visible=true;y.setMode(t)};this.editorControlsSetState=function(t){R.setState(t)}}}const vpTemp=new Vector4;class ViewHelper extends Object3D$1{constructor(t,e){super();const n=this;const i=e.dom;const r=new UIPanel;r.setId("viewHelper");r.dom.addEventListener("pointerup",(t=>{t.stopPropagation();this.handleClick(t)}));r.dom.addEventListener("pointermove",(function(t){let e=new Vector2;let a=i.getBoundingClientRect();let s=a.left+(i.offsetWidth-T);let o=a.top;e.x=(t.clientX-s)/T*2-1;e.y=-((t.clientY-o)/T)*2+1;u.setFromCamera(e,f);r.removeClass("mouseHand");let l=u.intersectObjects(c);if(l.length){n.hoverHighlight=()=>{l[0].object.userData.originalMaterial=l[0].object.material;l[0].object.material=S;delete n.hoverHighlight};r.addClass("mouseHand");viewport.render()}}));r.dom.addEventListener("pointerdown",(function(t){t.stopPropagation()}));r.dom.addEventListener("pointerout",(function(t){viewport.render()}));e.add(r);this.isViewHelper=true;this.animating=false;this.controls=null;const a=new Color$1("#ff1414");const s=new Color$1("#8adb00");const o=new Color$1("#1212ff");const l=new Color$1("#ffffff");const c=[];const u=new Raycaster$1;const h=new Vector2;const d=new Object3D$1;const f=new OrthographicCamera(-2,2,2,-2,0,4);f.position.set(0,0,2);const p=new BoxGeometry$1(.8,.05,.05).translate(.4,0,0);const m=new Mesh$1(p,B(a));const g=new Mesh$1(p,B(s));const _=new Mesh$1(p,B(o));g.rotation.z=Math.PI/2;_.rotation.y=-Math.PI/2;this.add(m);this.add(_);this.add(g);const y=new Sprite(D(a,"X"));y.userData.type="posX";const x=new Sprite(D(s,"Y"));x.userData.type="posY";const v=new Sprite(D(o,"Z"));v.userData.type="posZ";const b=new Sprite(D(a));b.userData.type="negX";const M=new Sprite(D(s));M.userData.type="negY";const w=new Sprite(D(o));w.userData.type="negZ";const S=D(l);y.position.x=1;x.position.y=1;v.position.z=1;b.position.x=-1;b.scale.setScalar(.8);M.position.y=-1;M.scale.setScalar(.8);w.position.z=-1;w.scale.setScalar(.8);this.add(y);this.add(x);this.add(v);this.add(b);this.add(M);this.add(w);c.push(y);c.push(x);c.push(v);c.push(b);c.push(M);c.push(w);const A=new Vector3$1;const T=128;const E=2*Math.PI;this.render=function(e,r){this.quaternion.copy(t.quaternion).invert();this.updateMatrixWorld();A.set(0,0,1);A.applyQuaternion(t.quaternion);c.map((t=>{if(t.userData.originalMaterial){t.material=t.userData.originalMaterial;delete t.userData.originalMaterial}}));if(A.x>=0){y.material.opacity=1;b.material.opacity=.5}else{y.material.opacity=.5;b.material.opacity=1}if(A.y>=0){x.material.opacity=1;M.material.opacity=.5}else{x.material.opacity=.5;M.material.opacity=1}if(A.z>=0){v.material.opacity=1;w.material.opacity=.5}else{v.material.opacity=.5;w.material.opacity=1}if(n.hoverHighlight)n.hoverHighlight();const a=i.offsetWidth-T;const s=i.offsetHeight-T;e.clearDepth();e.getViewport(vpTemp);e.setViewport(a,s,T,T);e.render(this,f);e.setViewport(vpTemp.x,vpTemp.y,vpTemp.z,vpTemp.w)};const L=new Vector3$1;const C=new Quaternion$1;const P=new Quaternion$1;const R=new Quaternion$1;let F=0;this.handleClick=function(t){if(this.animating===true)return false;const e=i.getBoundingClientRect();const n=e.left+(i.offsetWidth-T);const r=e.top;h.x=(t.clientX-n)/T*2-1;h.y=-((t.clientY-r)/T)*2+1;u.setFromCamera(h,f);const a=u.intersectObjects(c);if(a.length>0){const t=a[0];const e=t.object;I(e,this.controls.center);this.animating=true;viewport.animate();return true}else{return false}};this.update=function(e){const n=e*E;const i=this.controls.center;P.rotateTowards(R,n);t.position.set(0,0,1).applyQuaternion(P).multiplyScalar(F).add(i);t.quaternion.rotateTowards(C,n);if(P.angleTo(R)===0){this.animating=false}};function I(e,n){switch(e.userData.type){case"posX":L.set(1,0,0);C.setFromEuler(new Euler$1(0,Math.PI*.5,0));break;case"posY":L.set(0,1,0);C.setFromEuler(new Euler$1(-Math.PI*.5,0,0));break;case"posZ":L.set(0,0,1);C.setFromEuler(new Euler$1);break;case"negX":L.set(-1,0,0);C.setFromEuler(new Euler$1(0,-Math.PI*.5,0));break;case"negY":L.set(0,-1,0);C.setFromEuler(new Euler$1(Math.PI*.5,0,0));break;case"negZ":L.set(0,0,-1);C.setFromEuler(new Euler$1(0,Math.PI,0));break;default:console.error("ViewHelper: Invalid axis.")}F=t.position.distanceTo(n);L.multiplyScalar(F).add(n);d.position.copy(n);d.lookAt(t.position);P.copy(d.quaternion);d.lookAt(L);R.copy(d.quaternion)}function B(t){return new MeshBasicMaterial$1({color:t,toneMapped:false})}function D(t,e=null){const n=document.createElement("canvas");n.width=64;n.height=64;const i=n.getContext("2d");i.beginPath();i.arc(32,32,16,0,2*Math.PI);i.closePath();i.fillStyle=t.getStyle();i.fill();if(e!==null){i.font="24px Arial";i.textAlign="center";i.fillStyle="#000000";i.fillText(e,32,41)}const r=new CanvasTexture(n);return new SpriteMaterial({map:r,toneMapped:false})}}}class Selection{constructor(){this.thickness=3;this.lineColor=16737792}clear(){if(this.outline){editor.scene.remove(this.outline)}}add(t){let e=new Group,n=[],i;i=t.clone();e.add(i);e.traverse((t=>t.isMesh?n.push(t):null));n.map((t=>{let e=t.parent;let n=new EdgesGeometry(t.geometry,90);let i=(new LineSegmentsGeometry).fromEdgesGeometry(n);let r=new LineMaterial({color:this.lineColor});let a=new LineSegments2(i,r);e.add(a)}));i=e.clone();editor.scene.add(i);n=[];i.traverse((t=>t.isMesh?n.push(t):null));n.map((t=>{let e=t.parent;let n=t.geometry.clone();for(let t in n.attributes){if(t!=="position"){n.deleteAttribute(t)}}let i=BufferGeometryUtils.mergeVertices(n);let r=new ConditionalEdgesGeometry(i);let a=(new ConditionalLineSegmentsGeometry).fromConditionalEdgesGeometry(r);let s=new ConditionalLineMaterial({color:this.lineColor});let o=new LineSegments2(a,s);o.position.copy(t.position);o.scale.copy(t.scale);o.rotation.copy(t.rotation);e.add(o)}));n.map((t=>t.type==="Mesh"?t.parent.remove(t):null));i.traverse((t=>{if(t.material&&t.material.resolution){renderer.getSize(t.material.resolution);t.material.resolution.multiplyScalar(window.devicePixelRatio);t.material.linewidth=this.thickness}if(t.material)t.visible=t.isLineSegments2}));t.material.transparent=true;t.material.opacity=.3;this.outline=i}}class File{constructor(t,e){this._file=t||new karaqu.File;if(!t.blob)return;switch(this._file.kind){case"obj":let t=new FileReader;t.addEventListener("load",(async()=>{await Promise.all(["MTLLoader","OBJLoader"].map((async t=>{let e={},n=await this.getLoader(t),i=new RegExp(`export { ${t} }`),r=n.data.replace(i,`module.exports = { ${t} };`),a=`let module = mod; ${r}`;new Function("mod","THREE",a).call({},e,THREE$1);APP.Loaders[t]=e.exports[t]})));let e=this._file.xNode?`${this._file.dir+this._file.name}.mtl`:`/app/ant/degas/sample/${this._file.name}.mtl`;let n=await(new APP.Loaders.MTLLoader).loadAsync(e),i=await(new APP.Loaders.OBJLoader).setMaterials(n).parse(t.result);i.name=this._file.name;APP.workspace.dispatch({type:"add-mesh",object:i})}),false);t.readAsText(this._file.blob);break}}dispatch(t){let e=degas,n;switch(t.type){case"close-file":break}}getLoader(t){return window.fetch("/app/ant/degas/loaders/"+t+".js",{responseType:"text"})}async toBlob(t,e){}get isDirty(){}}let Color={clamp:(t,e,n)=>Math.min(Math.max(t,e),n),intToHex:t=>t.toString(16).padStart(2,"0"),hexToHsv(t){let e=this.hexToRgb(t);return this.rgbToHsv(e)},hexToRgb(t){if(t.length===4){let[e,n,i,r]=t.split("");t=e+n+n+i+i+r+r}let e=parseInt(t.substr(1,2),16),n=parseInt(t.substr(3,2),16),i=parseInt(t.substr(5,2),16),r=parseInt(t.substr(7,2)||"ff",16)/255;return{r:e,g:n,b:i,a:r}},parseRgb(t){let e=t.match(/^rgba\((\d+),\s*(\d+),\s*(\d+),\s*([\.\d]+)\)$/);if(!e)e=t.match(/^rgb?\((\d+),\s*(\d+),\s*(\d+)\)$/);let n=Math.round((+e[4]||1)*255);return{r:+e[1],g:+e[2],b:+e[3],a:n}},hsvToRgb(t){let e=t.h/60,n=t.s/100,i=t.v/100,r=Math.floor(e),a=e-r,s=i*(1-n),o=i*(1-a*n),l=i*(1-(1-a)*n),c=r%6,u=[i,o,s,s,l,i][c],h=[l,i,i,o,s,s][c],d=[s,s,l,i,i,o][c];return{r:this.clamp(u*255,0,255),g:this.clamp(h*255,0,255),b:this.clamp(d*255,0,255)}},rgbToHsl(t){let e=this.rgbToHsv(t);return this.hsvToHsl(e)},rgbToHsv(t){let e=t.r/255,n=t.g/255,i=t.b/255,r=Math.max(e,n,i),a=Math.min(e,n,i),s=r-a,o=0,l=r,c=r===0?0:s/r;switch(r){case a:o=0;break;case e:o=(n-i)/s+(n<i?6:0);break;case n:o=(i-e)/s+2;break;case i:o=(e-n)/s+4;break}return{h:o*60%360,s:this.clamp(c*100,0,100),v:this.clamp(l*100,0,100)}},rgbToHex(t){let e="0123456789abcdef".split(""),n=t=>isNaN(t)?"00":e[(t-t%16)/16]+e[t%16],i=n(Math.round(t.r)),r=n(Math.round(t.g)),a=n(Math.round(t.b));return`#${i}${r}${a}`},hsvToHex(t){let e=this.hsvToRgb(t);return this.rgbToHex(e)},hsvToHsl(t){let e=t.s/100,n=t.v/100,i=(2-e)*n,r=i<=1?i:2-i,a=r<1e-9?0:e*n/r;return{h:t.h,s:this.clamp(a*100,0,100),l:this.clamp(i*50,0,100)}},hslToHsv(t){let e=t.l*2,n=t.s*(e<=100?e:200-e)/100,i=e+n<1e-9?0:2*n/(e+n);return{h:t.h,s:this.clamp(i*100,0,100),v:this.clamp((e+n)/2,0,100)}}};THREE_dispose=()=>{delete window.__THREE__};module.exports={THREE:THREE$1,THREE_dispose:THREE_dispose,History:History,Loader:Loader,Strings:Strings,SetPositionCommand:SetPositionCommand,SetRotationCommand:SetRotationCommand,SetScaleCommand:SetScaleCommand,Config:Config,UIPanel:UIPanel,UIDiv:UIDiv,UIText:UIText,VR:VR,ViewportInfo:ViewportInfo,RoomEnvironment:RoomEnvironment,EffectComposer:EffectComposer,RenderPass:RenderPass,ShaderPass:ShaderPass,OutlinePass:OutlinePass,FXAAShader:FXAAShader,Editor:Editor,EditorControls:EditorControls,TransformControls:TransformControls,Viewport:Viewport,ViewHelper:ViewHelper,Selection:Selection,Color:Color,File:File};